self.RdfForm=function(a){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function e(a,e,n,t){return new(n||(n=Promise))((function(i,o){function r(a){try{u(t.next(a))}catch(a){o(a)}}function s(a){try{u(t.throw(a))}catch(a){o(a)}}function u(a){var e;a.done?i(a.value):(e=a.value,e instanceof n?e:new n((function(a){a(e)}))).then(r,s)}u((t=t.apply(a,e||[])).next())}))}function n(a,e,t,i){this.message=a,this.expected=e,this.found=t,this.location=i,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,n)}(function(a,e){function n(){this.constructor=a}n.prototype=e.prototype,a.prototype=new n})(n,Error),n.buildMessage=function(a,e){var n={literal:function(a){return'"'+i(a.text)+'"'},class:function(a){var e,n="";for(e=0;e<a.parts.length;e++)n+=a.parts[e]instanceof Array?o(a.parts[e][0])+"-"+o(a.parts[e][1]):o(a.parts[e]);return"["+(a.inverted?"^":"")+n+"]"},any:function(a){return"any character"},end:function(a){return"end of input"},other:function(a){return a.description}};function t(a){return a.charCodeAt(0).toString(16).toUpperCase()}function i(a){return a.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(a){return"\\x0"+t(a)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(a){return"\\x"+t(a)}))}function o(a){return a.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(a){return"\\x0"+t(a)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(a){return"\\x"+t(a)}))}return"Expected "+function(a){var e,t,i,o=new Array(a.length);for(e=0;e<a.length;e++)o[e]=(i=a[e],n[i.type](i));if(o.sort(),o.length>0){for(e=1,t=1;e<o.length;e++)o[e-1]!==o[e]&&(o[t]=o[e],t++);o.length=t}switch(o.length){case 1:return o[0];case 2:return o[0]+" or "+o[1];default:return o.slice(0,-1).join(", ")+", or "+o[o.length-1]}}(a)+" but "+function(a){return a?'"'+i(a)+'"':"end of input"}(e)+" found."};const t=function(a,e){e=void 0!==e?e:{};var t,i={},o={turtleDoc:Be},r=Be,s=".",u=Ne(".",!1),l=Ne("#",!1),c=/^[^\n]/,d=Ce(["\n"],!0,!1),g=Ne("\n",!1),h=function(a){return a.join("")},m="@prefix",p=Ne("@prefix",!1),b=function(a,e){return nn.addPrefix(""===a?"0":a,e),{}},f="@base",y=Ne("@base",!1),k=function(a){return nn.addBase(a),{}},v=/^[Bb]/,w=Ce(["B","b"],!1,!1),x=/^[Aa]/,S=Ce(["A","a"],!1,!1),M=/^[Ss]/,j=Ce(["S","s"],!1,!1),A=/^[Ee]/,N=Ce(["E","e"],!1,!1),C=/^[Pp]/,K=Ce(["P","p"],!1,!1),T=/^[Rr]/,L=Ce(["R","r"],!1,!1),B=/^[Ff]/,z=Ce(["F","f"],!1,!1),P=/^[Ii]/,D=Ce(["I","i"],!1,!1),I=/^[Xx]/,O=Ce(["X","x"],!1,!1),q=Ne(";",!1),E=function(a,e,n,t){var i={};return i[n]=t,i},G=function(a,e,n){return n},R=Ne(",",!1),W=function(a,e){return e},H=Ne("a",!1),_=Ne("[",!1),F=Ne("]",!1),U=Ne("(",!1),Y=Ne(")",!1),J=Ne("^^",!1),V="true",Z=Ne("true",!1),$="false",Q=Ne("false",!1),X=Ne("<",!1),aa=/^[^\0- <>"{}|\^`\\]/,ea=Ce([["\0"," "],"<",">",'"',"{","}","|","^","`","\\"],!0,!1),na=Ne(">",!1),ta=":",ia=Ne(":",!1),oa=Ne("_:",!1),ra=/^[0-9]/,sa=Ce([["0","9"]],!1,!1),ua=Ne("@",!1),la=/^[a-zA-Z]/,ca=Ce([["a","z"],["A","Z"]],!1,!1),da=Ne("-",!1),ga=/^[a-zA-Z0-9]/,ha=Ce([["a","z"],["A","Z"],["0","9"]],!1,!1),ma=function(a,e){return"-"+e.join("")},pa=/^[+\-]/,ba=Ce(["+","-"],!1,!1),fa=/^[eE]/,ya=Ce(["e","E"],!1,!1),ka='"',va=Ne('"',!1),wa=/^[^"\\\n\r]/,xa=Ce(['"',"\\","\n","\r"],!0,!1),Sa="'",Ma=Ne("'",!1),ja=/^[^'\\\n\r]/,Aa=Ce(["'","\\","\n","\r"],!0,!1),Na="'''",Ca=Ne("'''",!1),Ka=/^[^'\\]/,Ta=Ce(["'","\\"],!0,!1),La="''",Ba=Ne("''",!1),za=function(a,e){return"''"+e.join("")},Pa=function(a,e){return"'"+e.join("")},Da=function(a,e){return a.join("")+e.join("")},Ia='"""',Oa=Ne('"""',!1),qa=/^[^"\\]/,Ea=Ce(['"',"\\"],!0,!1),Ga='""',Ra=Ne('""',!1),Wa=function(a,e){return'""'+e.join("")},Ha=function(a,e){return'"'+e.join("")},_a=Ne("\\U",!1),Fa=Ne("\\u",!1),Ua=Ne("\\t",!1),Ya=Ne("\\b",!1),Ja=Ne("\\n",!1),Va=Ne("\\r",!1),Za=Ne("\\f",!1),$a=Ne('\\"',!1),Qa=Ne("\\'",!1),Xa=Ne("\\\\",!1),ae=/^[ \t\r\n]/,ee=Ce([" ","\t","\r","\n"],!1,!1),ne=/^[\uD800-\uDBFF]/,te=Ce([["\ud800","\udbff"]],!1,!1),ie=/^[\uDC00-\uDFFF]/,oe=Ce([["\udc00","\udfff"]],!1,!1),re=/^[A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,se=Ce([["A","Z"],["a","z"],["À","Ö"],["Ø","ö"],["ø","˿"],["Ͱ","ͽ"],["Ϳ","῿"],["‌","‍"],["⁰","↏"],["Ⰰ","⿯"],["、","퟿"],["豈","﷏"],["ﷰ","�"]],!1,!1),ue=Ne("_",!1),le=Ne("·",!1),ce=/^[\u0300-\u036F]/,de=Ce([["̀","ͯ"]],!1,!1),ge=/^[\u203F-\u2040]/,he=Ce([["‿","⁀"]],!1,!1),me=function(a,e,n,t){return n.join("")+t.join("")},pe=Ne("%",!1),be=/^[0-9A-Fa-f]/,fe=Ce([["0","9"],["A","F"],["a","f"]],!1,!1),ye=Ne("\\",!1),ke=/^[_~.!$&'()*+,;=\/?#@%\-]/,ve=Ce(["_","~",".","!","$","&","'","(",")","*","+",",",";","=","/","?","#","@","%","-"],!1,!1),we=0,xe=0,Se=[{line:1,column:1}],Me=0,je=[];if("startRule"in e){if(!(e.startRule in o))throw new Error("Can't start parsing from rule \""+e.startRule+'".');r=o[e.startRule]}function Ae(a,e){throw function(a,e){return new n(a,null,null,e)}(a,e=void 0!==e?e:Te(xe,we))}function Ne(a,e){return{type:"literal",text:a,ignoreCase:e}}function Ce(a,e,n){return{type:"class",parts:a,inverted:e,ignoreCase:n}}function Ke(e){var n,t=Se[e];if(t)return t;for(n=e-1;!Se[n];)n--;for(t={line:(t=Se[n]).line,column:t.column};n<e;)10===a.charCodeAt(n)?(t.line++,t.column=1):t.column++,n++;return Se[e]=t,t}function Te(a,e){var n=Ke(a),t=Ke(e);return{start:{offset:a,line:n.line,column:n.column},end:{offset:e,line:t.line,column:t.column}}}function Le(a){we<Me||(we>Me&&(Me=we,je=[]),je.push(a))}function Be(){var a,e,n,t;for(a=we,e=[],n=ze();n!==i;)e.push(n),n=ze();if(e!==i){for(n=[],t=Pe();t!==i;)n.push(t),t=Pe();n!==i?(xe=a,a=e=function(a){var e=nn.toJSON();return e["@graph"]=[],a.filter((a=>Array.isArray(a))).forEach((a=>{a.forEach((a=>{e["@graph"].push(a)}))})),1===e["@graph"].length&&(Object.assign(e,e["@graph"][0]),delete e["@graph"]),e}(e)):(we=a,a=i)}else we=a,a=i;return a}function ze(){var e,n,t,o;if((e=function(){var e;return(e=function(){var e,n,t,o,r,l,c,d,g;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i)if(a.substr(we,7)===m?(t=m,we+=7):(t=i,Le(p)),t!==i){for(o=[],r=Pe();r!==i;)o.push(r),r=Pe();if(o!==i)if((r=Ue())!==i){for(l=[],c=Pe();c!==i;)l.push(c),c=Pe();if(l!==i)if((c=_e())!==i){for(d=[],g=Pe();g!==i;)d.push(g),g=Pe();d!==i?(46===a.charCodeAt(we)?(g=s,we++):(g=i,Le(u)),g!==i?(xe=e,e=n=b(r,c)):(we=e,e=i)):(we=e,e=i)}else we=e,e=i;else we=e,e=i}else we=e,e=i;else we=e,e=i}else we=e,e=i;else we=e,e=i;return e}())===i&&(e=function(){var e,n,t,o,r,l,c;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i)if(a.substr(we,5)===f?(t=f,we+=5):(t=i,Le(y)),t!==i){for(o=[],r=Pe();r!==i;)o.push(r),r=Pe();if(o!==i)if((r=_e())!==i){for(l=[],c=Pe();c!==i;)l.push(c),c=Pe();l!==i?(46===a.charCodeAt(we)?(c=s,we++):(c=i,Le(u)),c!==i?(xe=e,e=n=k(r)):(we=e,e=i)):(we=e,e=i)}else we=e,e=i;else we=e,e=i}else we=e,e=i;else we=e,e=i;return e}())===i&&(e=function(){var e,n,t,o,r,s,u,l,c,d,g,h;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i)if(C.test(a.charAt(we))?(t=a.charAt(we),we++):(t=i,Le(K)),t!==i)if(T.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(L)),o!==i)if(A.test(a.charAt(we))?(r=a.charAt(we),we++):(r=i,Le(N)),r!==i)if(B.test(a.charAt(we))?(s=a.charAt(we),we++):(s=i,Le(z)),s!==i)if(P.test(a.charAt(we))?(u=a.charAt(we),we++):(u=i,Le(D)),u!==i)if(I.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(O)),l!==i){for(c=[],d=Pe();d!==i;)c.push(d),d=Pe();if(c!==i)if((d=Ue())!==i){for(g=[],h=Pe();h!==i;)g.push(h),h=Pe();g!==i&&(h=_e())!==i?(xe=e,e=n=b(d,h)):(we=e,e=i)}else we=e,e=i;else we=e,e=i}else we=e,e=i;else we=e,e=i;else we=e,e=i;else we=e,e=i;else we=e,e=i;else we=e,e=i;else we=e,e=i;return e}())===i&&(e=function(){var e,n,t,o,r,s,u,l;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i)if(v.test(a.charAt(we))?(t=a.charAt(we),we++):(t=i,Le(w)),t!==i)if(x.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(S)),o!==i)if(M.test(a.charAt(we))?(r=a.charAt(we),we++):(r=i,Le(j)),r!==i)if(A.test(a.charAt(we))?(s=a.charAt(we),we++):(s=i,Le(N)),s!==i){for(u=[],l=Pe();l!==i;)u.push(l),l=Pe();u!==i&&(l=_e())!==i?(xe=e,e=n=k(l)):(we=e,e=i)}else we=e,e=i;else we=e,e=i;else we=e,e=i;else we=e,e=i;else we=e,e=i;return e}()),e}())===i)if(e=we,(n=function(){var a,e,n;return a=we,(e=function(){var a,e;return a=we,(e=Ge())!==i&&(xe=a,e=function(a){return tn(a,!0)}(e)),(a=e)===i&&(a=He())===i&&(a=We()),a}())!==i&&(n=De())!==i?(xe=a,e=function(a,e){var n={};return"string"==typeof a&&"[]"!==a?n["@id"]=a:"object"==typeof a&&Object.assign(n,a),e&&Object.assign(n,e),[n]}(e,n),a=e):(we=a,a=i),a===i&&(a=we,(e=Ee())!==i?((n=De())===i&&(n=null),n!==i?(xe=a,e=function(a,e){var n={};return a&&Object.assign(n,a),e&&Object.assign(n,e),[n]}(e,n),a=e):(we=a,a=i)):(we=a,a=i)),a}())!==i){for(t=[],o=Pe();o!==i;)t.push(o),o=Pe();t!==i?(46===a.charCodeAt(we)?(o=s,we++):(o=i,Le(u)),o!==i?(xe=e,e=n=n):(we=e,e=i)):(we=e,e=i)}else we=e,e=i;return e}function Pe(){var e;return(e=function(){var e;return ae.test(a.charAt(we))?(e=a.charAt(we),we++):(e=i,Le(ee)),e}())===i&&(e=function(){var e,n,t,o;if(e=we,35===a.charCodeAt(we)?(n="#",we++):(n=i,Le(l)),n!==i){for(t=[],c.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(d));o!==i;)t.push(o),c.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(d));t!==i?(10===a.charCodeAt(we)?(o="\n",we++):(o=i,Le(g)),o!==i?(xe=e,e=n=h(t)):(we=e,e=i)):(we=e,e=i)}else we=e,e=i;return e}()),e}function De(){var e,n,t,o,r,s,u,l,c,d;if(e=we,(n=Oe())!==i)if((t=Ie())!==i){for(o=[],r=we,s=[],u=Pe();u!==i;)s.push(u),u=Pe();for(s!==i?(59===a.charCodeAt(we)?(u=";",we++):(u=i,Le(q)),u!==i?(l=we,(c=Oe())!==i&&(d=Ie())!==i?(xe=l,l=c=E(0,0,c,d)):(we=l,l=i),l===i&&(l=null),l!==i?(xe=r,r=s=G(0,0,l)):(we=r,r=i)):(we=r,r=i)):(we=r,r=i);r!==i;){for(o.push(r),r=we,s=[],u=Pe();u!==i;)s.push(u),u=Pe();s!==i?(59===a.charCodeAt(we)?(u=";",we++):(u=i,Le(q)),u!==i?(l=we,(c=Oe())!==i&&(d=Ie())!==i?(xe=l,l=c=E(0,0,c,d)):(we=l,l=i),l===i&&(l=null),l!==i?(xe=r,r=s=G(0,0,l)):(we=r,r=i)):(we=r,r=i)):(we=r,r=i)}o!==i?(xe=e,e=n=function(a,e,n){var t={};return n.unshift(function(a,e){var n={};return n[a]=e,n}(a,e)),n.forEach((a=>{a&&Object.keys(a).forEach((e=>{a[e].forEach((a=>{"@type"===e&&void 0!==a["@id"]&&(a=a["@id"]),void 0===t[e]?t[e]=a:Array.isArray(t[e])?t[e].push(a):t[e]=[t[e],a]}))}))})),t}(n,t,o)):(we=e,e=i)}else we=e,e=i;else we=e,e=i;return e}function Ie(){var e,n,t,o,r,s,u;if(e=we,(n=qe())!==i){for(t=[],o=we,r=[],s=Pe();s!==i;)r.push(s),s=Pe();for(r!==i?(44===a.charCodeAt(we)?(s=",",we++):(s=i,Le(R)),s!==i&&(u=qe())!==i?(xe=o,o=r=W(0,u)):(we=o,o=i)):(we=o,o=i);o!==i;){for(t.push(o),o=we,r=[],s=Pe();s!==i;)r.push(s),s=Pe();r!==i?(44===a.charCodeAt(we)?(s=",",we++):(s=i,Le(R)),s!==i&&(u=qe())!==i?(xe=o,o=r=W(0,u)):(we=o,o=i)):(we=o,o=i)}t!==i?(xe=e,e=n=function(a,e){return e.unshift(a),e}(n,t)):(we=e,e=i)}else we=e,e=i;return e}function Oe(){var e,n,t;if(e=we,(n=function(){var a,e,n;for(a=we,e=[],n=Pe();n!==i;)e.push(n),n=Pe();return e!==i&&(n=We())!==i?(xe=a,a=e=n):(we=a,a=i),a}())!==i&&(xe=e,n=n),(e=n)===i){for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();n!==i?(97===a.charCodeAt(we)?(t="a",we++):(t=i,Le(H)),t!==i?(xe=e,e=n="@type"):(we=e,e=i)):(we=e,e=i)}return e}function qe(){var e,n;return(e=function(){var e;return(e=function(){var e,n,t,o,r,s,u;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i)if((t=Re())!==i){for(o=[],r=Pe();r!==i;)o.push(r),r=Pe();o!==i&&(r=function(){var e,n,t,o,r,s,u,l;if(e=we,64===a.charCodeAt(we)?(n="@",we++):(n=i,Le(ua)),n!==i){if(t=[],la.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(ca)),o!==i)for(;o!==i;)t.push(o),la.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(ca));else t=i;if(t!==i){if(o=[],r=we,45===a.charCodeAt(we)?(s="-",we++):(s=i,Le(da)),s!==i){if(u=[],ga.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(ha)),l!==i)for(;l!==i;)u.push(l),ga.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(ha));else u=i;u!==i?(xe=r,r=s=ma(0,u)):(we=r,r=i)}else we=r,r=i;for(;r!==i;)if(o.push(r),r=we,45===a.charCodeAt(we)?(s="-",we++):(s=i,Le(da)),s!==i){if(u=[],ga.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(ha)),l!==i)for(;l!==i;)u.push(l),ga.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(ha));else u=i;u!==i?(xe=r,r=s=ma(0,u)):(we=r,r=i)}else we=r,r=i;o!==i?(xe=e,n=function(a,e){return a.join("")+e.join("")}(t,o),e=n):(we=e,e=i)}else we=e,e=i}else we=e,e=i;return e}())!==i?(xe=e,n=function(a,e){return{"@value":a,"@language":e}}(t,r),e=n):(we=e,e=i)}else we=e,e=i;else we=e,e=i;if(e===i){for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i)if((t=Re())!==i){for(o=[],r=Pe();r!==i;)o.push(r),r=Pe();if(o!==i)if("^^"===a.substr(we,2)?(r="^^",we+=2):(r=i,Le(J)),r!==i){for(s=[],u=Pe();u!==i;)s.push(u),u=Pe();s!==i&&(u=We())!==i?(xe=e,n=function(a,e){if("http://www.w3.org/2001/XMLSchema#boolean"===e&&"true"===a)return!0;if("http://www.w3.org/2001/XMLSchema#boolean"===e&&"false"===a)return!1;if("http://www.w3.org/2001/XMLSchema#integer"===e)return parseInt(a);if("http://www.w3.org/2001/XMLSchema#double"===e)return parseFloat(a);const n=nn.resolve(e,!0);if(n){const t=e.split(":")[0];if("http://www.w3.org/2001/XMLSchema#boolean"===n&&"true"===a)return nn.decrement(t),!0;if("http://www.w3.org/2001/XMLSchema#boolean"===n&&"false"===a)return nn.decrement(t),!1;if("http://www.w3.org/2001/XMLSchema#integer"===n)return nn.decrement(t),parseInt(a);if("http://www.w3.org/2001/XMLSchema#double"===n)return nn.decrement(t),parseFloat(a)}return{"@value":a,"@type":e}}(t,u),e=n):(we=e,e=i)}else we=e,e=i;else we=e,e=i}else we=e,e=i;else we=e,e=i;if(e===i){for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();n!==i&&(t=Re())!==i?(xe=e,e=n=t):(we=e,e=i)}}return e}())===i&&(e=function(){var e,n,t;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();return n!==i?((t=function(){var e,n,t,o,r,l,c,d,g;if(e=we,n=we,t=we,pa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(ba)),o===i&&(o=null),o!==i){if(r=we,l=[],ra.test(a.charAt(we))?(c=a.charAt(we),we++):(c=i,Le(sa)),c!==i)for(;c!==i;)l.push(c),ra.test(a.charAt(we))?(c=a.charAt(we),we++):(c=i,Le(sa));else l=i;if(l!==i)if(46===a.charCodeAt(we)?(c=s,we++):(c=i,Le(u)),c!==i){for(d=[],ra.test(a.charAt(we))?(g=a.charAt(we),we++):(g=i,Le(sa));g!==i;)d.push(g),ra.test(a.charAt(we))?(g=a.charAt(we),we++):(g=i,Le(sa));d!==i&&(g=Ye())!==i?r=l=[l,c,d,g]:(we=r,r=i)}else we=r,r=i;else we=r,r=i;if(r===i){if(r=we,46===a.charCodeAt(we)?(l=s,we++):(l=i,Le(u)),l!==i){if(c=[],ra.test(a.charAt(we))?(d=a.charAt(we),we++):(d=i,Le(sa)),d!==i)for(;d!==i;)c.push(d),ra.test(a.charAt(we))?(d=a.charAt(we),we++):(d=i,Le(sa));else c=i;c!==i&&(d=Ye())!==i?r=l=[l,c,d]:(we=r,r=i)}else we=r,r=i;if(r===i){if(r=we,l=[],ra.test(a.charAt(we))?(c=a.charAt(we),we++):(c=i,Le(sa)),c!==i)for(;c!==i;)l.push(c),ra.test(a.charAt(we))?(c=a.charAt(we),we++):(c=i,Le(sa));else l=i;l!==i&&(c=Ye())!==i?r=l=[l,c]:(we=r,r=i)}}r!==i?t=o=[o,r]:(we=t,t=i)}else we=t,t=i;return(n=t!==i?a.substring(n,we):t)!==i&&(xe=e,n=function(a){return{"@value":a,"@type":"http://www.w3.org/2001/XMLSchema#double"}}(n)),n}())===i&&(t=function(){var e,n,t,o,r,l,c,d;if(e=we,n=we,t=we,pa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(ba)),o===i&&(o=null),o!==i){for(r=[],ra.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(sa));l!==i;)r.push(l),ra.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(sa));if(r!==i)if(46===a.charCodeAt(we)?(l=s,we++):(l=i,Le(u)),l!==i){if(c=[],ra.test(a.charAt(we))?(d=a.charAt(we),we++):(d=i,Le(sa)),d!==i)for(;d!==i;)c.push(d),ra.test(a.charAt(we))?(d=a.charAt(we),we++):(d=i,Le(sa));else c=i;c!==i?t=o=[o,r,l,c]:(we=t,t=i)}else we=t,t=i;else we=t,t=i}else we=t,t=i;return(n=t!==i?a.substring(n,we):t)!==i&&(xe=e,n=function(a){return{"@value":a,"@type":"http://www.w3.org/2001/XMLSchema#decimal"}}(n)),n}())===i&&(t=function(){var e,n,t,o,r,s;if(e=we,n=we,t=we,pa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(ba)),o===i&&(o=null),o!==i){if(r=[],ra.test(a.charAt(we))?(s=a.charAt(we),we++):(s=i,Le(sa)),s!==i)for(;s!==i;)r.push(s),ra.test(a.charAt(we))?(s=a.charAt(we),we++):(s=i,Le(sa));else r=i;r!==i?t=o=[o,r]:(we=t,t=i)}else we=t,t=i;return(n=t!==i?a.substring(n,we):t)!==i&&(xe=e,n=function(a){return parseInt(a)}(n)),n}()),t!==i?(xe=e,e=n=t):(we=e,e=i)):(we=e,e=i),e}())===i&&(e=function(){var e,n,t;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i?(a.substr(we,4)===V?(t=V,we+=4):(t=i,Le(Z)),t!==i?(xe=e,e=n=!0):(we=e,e=i)):(we=e,e=i),e===i){for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();n!==i?(a.substr(we,5)===$?(t=$,we+=5):(t=i,Le(Q)),t!==i?(xe=e,e=n=!1):(we=e,e=i)):(we=e,e=i)}return e}()),e}())===i&&(e=we,(n=Ge())!==i&&(xe=e,n=function(a){return tn(a,!1)}(n)),(e=n)===i&&(e=we,(n=He())!==i&&(xe=e,n=function(a){return"[]"===a?{}:{"@id":a}}(n)),(e=n)===i&&(e=we,(n=Ee())!==i&&(xe=e,n=n),(e=n)===i&&(e=we,(n=We())!==i&&(xe=e,n=function(a){return{"@id":a}}(n)),e=n)))),e}function Ee(){var e,n,t,o,r,s;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i)if(91===a.charCodeAt(we)?(t="[",we++):(t=i,Le(_)),t!==i)if((o=De())!==i){for(r=[],s=Pe();s!==i;)r.push(s),s=Pe();r!==i?(93===a.charCodeAt(we)?(s="]",we++):(s=i,Le(F)),s!==i?(xe=e,e=n=o):(we=e,e=i)):(we=e,e=i)}else we=e,e=i;else we=e,e=i;else we=e,e=i;return e}function Ge(){var e,n,t,o,r,s;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i)if(40===a.charCodeAt(we)?(t="(",we++):(t=i,Le(U)),t!==i){for(o=[],r=qe();r!==i;)o.push(r),r=qe();if(o!==i){for(r=[],s=Pe();s!==i;)r.push(s),s=Pe();r!==i?(41===a.charCodeAt(we)?(s=")",we++):(s=i,Le(Y)),s!==i?(xe=e,e=n=function(a){return{"@list":a}}(o)):(we=e,e=i)):(we=e,e=i)}else we=e,e=i}else we=e,e=i;else we=e,e=i;return e}function Re(){var e,n,t;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();return n!==i?((t=function(){var e,n,t,o,r,s,u,l;if(e=we,a.substr(we,3)===Na?(n=Na,we+=3):(n=i,Le(Ca)),n!==i){for(t=[],Ka.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(Ta)),o===i&&(o=Ve())===i&&(o=Je());o!==i;)t.push(o),Ka.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(Ta)),o===i&&(o=Ve())===i&&(o=Je());if(t!==i){if(o=[],r=we,a.substr(we,2)===La?(s=La,we+=2):(s=i,Le(Ba)),s!==i){if(u=[],Ka.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ta)),l===i&&(l=Ve())===i&&(l=Je()),l!==i)for(;l!==i;)u.push(l),Ka.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ta)),l===i&&(l=Ve())===i&&(l=Je());else u=i;u!==i?(xe=r,r=s=za(0,u)):(we=r,r=i)}else we=r,r=i;if(r===i)if(r=we,39===a.charCodeAt(we)?(s=Sa,we++):(s=i,Le(Ma)),s!==i){if(u=[],Ka.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ta)),l===i&&(l=Ve())===i&&(l=Je()),l!==i)for(;l!==i;)u.push(l),Ka.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ta)),l===i&&(l=Ve())===i&&(l=Je());else u=i;u!==i?(xe=r,r=s=Pa(0,u)):(we=r,r=i)}else we=r,r=i;for(;r!==i;){if(o.push(r),r=we,a.substr(we,2)===La?(s=La,we+=2):(s=i,Le(Ba)),s!==i){if(u=[],Ka.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ta)),l===i&&(l=Ve())===i&&(l=Je()),l!==i)for(;l!==i;)u.push(l),Ka.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ta)),l===i&&(l=Ve())===i&&(l=Je());else u=i;u!==i?(xe=r,r=s=za(0,u)):(we=r,r=i)}else we=r,r=i;if(r===i)if(r=we,39===a.charCodeAt(we)?(s=Sa,we++):(s=i,Le(Ma)),s!==i){if(u=[],Ka.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ta)),l===i&&(l=Ve())===i&&(l=Je()),l!==i)for(;l!==i;)u.push(l),Ka.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ta)),l===i&&(l=Ve())===i&&(l=Je());else u=i;u!==i?(xe=r,r=s=Pa(0,u)):(we=r,r=i)}else we=r,r=i}o!==i?(a.substr(we,3)===Na?(r=Na,we+=3):(r=i,Le(Ca)),r!==i?(xe=e,e=n=Da(t,o)):(we=e,e=i)):(we=e,e=i)}else we=e,e=i}else we=e,e=i;return e}())===i&&(t=function(){var e,n,t,o,r,s,u,l;if(e=we,a.substr(we,3)===Ia?(n=Ia,we+=3):(n=i,Le(Oa)),n!==i){for(t=[],qa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(Ea)),o===i&&(o=Ve())===i&&(o=Je());o!==i;)t.push(o),qa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(Ea)),o===i&&(o=Ve())===i&&(o=Je());if(t!==i){if(o=[],r=we,a.substr(we,2)===Ga?(s=Ga,we+=2):(s=i,Le(Ra)),s!==i){if(u=[],qa.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ea)),l===i&&(l=Ve())===i&&(l=Je()),l!==i)for(;l!==i;)u.push(l),qa.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ea)),l===i&&(l=Ve())===i&&(l=Je());else u=i;u!==i?(xe=r,r=s=Wa(0,u)):(we=r,r=i)}else we=r,r=i;if(r===i)if(r=we,34===a.charCodeAt(we)?(s=ka,we++):(s=i,Le(va)),s!==i){if(u=[],qa.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ea)),l===i&&(l=Ve())===i&&(l=Je()),l!==i)for(;l!==i;)u.push(l),qa.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ea)),l===i&&(l=Ve())===i&&(l=Je());else u=i;u!==i?(xe=r,r=s=Ha(0,u)):(we=r,r=i)}else we=r,r=i;for(;r!==i;){if(o.push(r),r=we,a.substr(we,2)===Ga?(s=Ga,we+=2):(s=i,Le(Ra)),s!==i){if(u=[],qa.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ea)),l===i&&(l=Ve())===i&&(l=Je()),l!==i)for(;l!==i;)u.push(l),qa.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ea)),l===i&&(l=Ve())===i&&(l=Je());else u=i;u!==i?(xe=r,r=s=Wa(0,u)):(we=r,r=i)}else we=r,r=i;if(r===i)if(r=we,34===a.charCodeAt(we)?(s=ka,we++):(s=i,Le(va)),s!==i){if(u=[],qa.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ea)),l===i&&(l=Ve())===i&&(l=Je()),l!==i)for(;l!==i;)u.push(l),qa.test(a.charAt(we))?(l=a.charAt(we),we++):(l=i,Le(Ea)),l===i&&(l=Ve())===i&&(l=Je());else u=i;u!==i?(xe=r,r=s=Ha(0,u)):(we=r,r=i)}else we=r,r=i}o!==i?(a.substr(we,3)===Ia?(r=Ia,we+=3):(r=i,Le(Oa)),r!==i?(xe=e,e=n=Da(t,o)):(we=e,e=i)):(we=e,e=i)}else we=e,e=i}else we=e,e=i;return e}())===i&&(t=function(){var e,n,t,o;if(e=we,39===a.charCodeAt(we)?(n=Sa,we++):(n=i,Le(Ma)),n!==i){for(t=[],ja.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(Aa)),o===i&&(o=Ve())===i&&(o=Je());o!==i;)t.push(o),ja.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(Aa)),o===i&&(o=Ve())===i&&(o=Je());t!==i?(39===a.charCodeAt(we)?(o=Sa,we++):(o=i,Le(Ma)),o!==i?(xe=e,e=n=h(t)):(we=e,e=i)):(we=e,e=i)}else we=e,e=i;return e}())===i&&(t=function(){var e,n,t,o;if(e=we,34===a.charCodeAt(we)?(n=ka,we++):(n=i,Le(va)),n!==i){for(t=[],wa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(xa)),o===i&&(o=Ve())===i&&(o=Je());o!==i;)t.push(o),wa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(xa)),o===i&&(o=Ve())===i&&(o=Je());t!==i?(34===a.charCodeAt(we)?(o=ka,we++):(o=i,Le(va)),o!==i?(xe=e,e=n=h(t)):(we=e,e=i)):(we=e,e=i)}else we=e,e=i;return e}()),t!==i?(xe=e,e=n=t):(we=e,e=i)):(we=e,e=i),e}function We(){var e,n,t;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i&&(t=_e())!==i?(xe=e,e=n=t):(we=e,e=i),e===i){for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();n!==i&&(t=function(){var e,n;return(e=function(){var e,n,t;return e=we,(n=Fe())!==i&&(t=function(){var e,n,t,o,r,l,c,d;if(e=we,(n=$e())===i&&(58===a.charCodeAt(we)?(n=ta,we++):(n=i,Le(ia)),n===i&&(ra.test(a.charAt(we))?(n=a.charAt(we),we++):(n=i,Le(sa)),n===i&&(n=an()))),n!==i){for(t=[],(o=Qe())===i&&(58===a.charCodeAt(we)?(o=ta,we++):(o=i,Le(ia)),o===i&&(o=an()));o!==i;)t.push(o),(o=Qe())===i&&(58===a.charCodeAt(we)?(o=ta,we++):(o=i,Le(ia)),o===i&&(o=an()));if(t!==i){if(o=[],r=we,l=[],46===a.charCodeAt(we)?(c=s,we++):(c=i,Le(u)),c!==i)for(;c!==i;)l.push(c),46===a.charCodeAt(we)?(c=s,we++):(c=i,Le(u));else l=i;if(l!==i){if(c=[],(d=Qe())===i&&(58===a.charCodeAt(we)?(d=ta,we++):(d=i,Le(ia)),d===i&&(d=an())),d!==i)for(;d!==i;)c.push(d),(d=Qe())===i&&(58===a.charCodeAt(we)?(d=ta,we++):(d=i,Le(ia)),d===i&&(d=an()));else c=i;c!==i?(xe=r,r=l=me(0,0,l,c)):(we=r,r=i)}else we=r,r=i;for(;r!==i;){if(o.push(r),r=we,l=[],46===a.charCodeAt(we)?(c=s,we++):(c=i,Le(u)),c!==i)for(;c!==i;)l.push(c),46===a.charCodeAt(we)?(c=s,we++):(c=i,Le(u));else l=i;if(l!==i){if(c=[],(d=Qe())===i&&(58===a.charCodeAt(we)?(d=ta,we++):(d=i,Le(ia)),d===i&&(d=an())),d!==i)for(;d!==i;)c.push(d),(d=Qe())===i&&(58===a.charCodeAt(we)?(d=ta,we++):(d=i,Le(ia)),d===i&&(d=an()));else c=i;c!==i?(xe=r,r=l=me(0,0,l,c)):(we=r,r=i)}else we=r,r=i}o!==i?(xe=e,n=function(a,e,n){return a+e.join("")+n.join("")}(n,t,o),e=n):(we=e,e=i)}else we=e,e=i}else we=e,e=i;return e}())!==i?(xe=e,n=function(a,e){return nn.increment(a),nn.resolve(a+":"+e)}(n,t),e=n):(we=e,e=i),e}())===i&&(e=we,(n=Fe())!==i&&(xe=e,n=function(a){return a+":"}(n)),e=n),e}())!==i?(xe=e,e=n=t):(we=e,e=i)}return e}function He(){var e,n,t;for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();if(n!==i&&(t=function(){var e,n,t,o,r,l,c,d,g,h;if(e=we,n=we,"_:"===a.substr(we,2)?(t="_:",we+=2):(t=i,Le(oa)),t!==i)if((o=$e())===i&&(ra.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(sa))),o!==i){for(r=[],l=Qe();l!==i;)r.push(l),l=Qe();if(r!==i){if(l=[],c=we,d=[],46===a.charCodeAt(we)?(g=s,we++):(g=i,Le(u)),g!==i)for(;g!==i;)d.push(g),46===a.charCodeAt(we)?(g=s,we++):(g=i,Le(u));else d=i;if(d!==i){if(g=[],(h=Qe())!==i)for(;h!==i;)g.push(h),h=Qe();else g=i;g!==i?c=d=[d,g]:(we=c,c=i)}else we=c,c=i;for(;c!==i;){if(l.push(c),c=we,d=[],46===a.charCodeAt(we)?(g=s,we++):(g=i,Le(u)),g!==i)for(;g!==i;)d.push(g),46===a.charCodeAt(we)?(g=s,we++):(g=i,Le(u));else d=i;if(d!==i){if(g=[],(h=Qe())!==i)for(;h!==i;)g.push(h),h=Qe();else g=i;g!==i?c=d=[d,g]:(we=c,c=i)}else we=c,c=i}l!==i?n=t=[t,o,r,l]:(we=n,n=i)}else we=n,n=i}else we=n,n=i;else we=n,n=i;return e=n!==i?a.substring(e,we):n}())!==i?(xe=e,e=n=t):(we=e,e=i),e===i){for(e=we,n=[],t=Pe();t!==i;)n.push(t),t=Pe();n!==i&&(t=function(){var e,n,t,o;if(e=we,91===a.charCodeAt(we)?(n="[",we++):(n=i,Le(_)),n!==i){for(t=[],o=Pe();o!==i;)t.push(o),o=Pe();t!==i?(93===a.charCodeAt(we)?(o="]",we++):(o=i,Le(F)),o!==i?(xe=e,e=n="[]"):(we=e,e=i)):(we=e,e=i)}else we=e,e=i;return e}())!==i?(xe=e,e=n=t):(we=e,e=i)}return e}function _e(){var e,n,t,o;if(e=we,60===a.charCodeAt(we)?(n="<",we++):(n=i,Le(X)),n!==i){for(t=[],aa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(ea)),o===i&&(o=Je());o!==i;)t.push(o),aa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(ea)),o===i&&(o=Je());t!==i?(62===a.charCodeAt(we)?(o=">",we++):(o=i,Le(na)),o!==i?(xe=e,e=n=function(a){const e=a.map((a=>65536<=a.codePointAt(0)&&a.codePointAt(0)<=983039?"a":1===a.length?a:6===a.length?String.fromCharCode("0x"+a.substring(2)):10===a.length?String.fromCodePoint("0x"+a.substring(2)):a)).join("");if(e.match(/^[^\u0000-\u0020<>"{}|^`\\]*$/)){var n=a.join("");try{return nn.resolve(n)}catch(a){Ae("Invalid IRIREF "+n)}}else Ae("Invalid IRIREF "+a.join("")+" / "+e)}(t)):(we=e,e=i)):(we=e,e=i)}else we=e,e=i;return e}function Fe(){var e,n,t;return e=we,(n=Xe())===i&&(n=null),n!==i?(58===a.charCodeAt(we)?(t=ta,we++):(t=i,Le(ia)),t!==i?(xe=e,e=n=function(a){return a=a||"0",!1===nn.hasPrefix(a)&&Ae("undefined prefix "+a),a}(n)):(we=e,e=i)):(we=e,e=i),e}function Ue(){var e,n,t;return e=we,(n=Xe())===i&&(n=null),n!==i?(58===a.charCodeAt(we)?(t=ta,we++):(t=i,Le(ia)),t!==i?(xe=e,e=n=function(a){return a||""}(n)):(we=e,e=i)):(we=e,e=i),e}function Ye(){var e,n,t,o,r,s;if(e=we,n=we,fa.test(a.charAt(we))?(t=a.charAt(we),we++):(t=i,Le(ya)),t!==i)if(pa.test(a.charAt(we))?(o=a.charAt(we),we++):(o=i,Le(ba)),o===i&&(o=null),o!==i){if(r=[],ra.test(a.charAt(we))?(s=a.charAt(we),we++):(s=i,Le(sa)),s!==i)for(;s!==i;)r.push(s),ra.test(a.charAt(we))?(s=a.charAt(we),we++):(s=i,Le(sa));else r=i;r!==i?n=t=[t,o,r]:(we=n,n=i)}else we=n,n=i;else we=n,n=i;return n!==i?a.substring(e,we):n}function Je(){var e,n,t,o,r,s,u,l,c,d,g;return e=we,"\\U"===a.substr(we,2)?(n="\\U",we+=2):(n=i,Le(_a)),n!==i?(t=we,(o=en())!==i&&(r=en())!==i&&(s=en())!==i&&(u=en())!==i&&(l=en())!==i&&(c=en())!==i&&(d=en())!==i&&(g=en())!==i?t=o=[o,r,s,u,l,c,d,g]:(we=t,t=i),t!==i?(xe=e,e=n=function(a){return String.fromCodePoint(parseInt(a.join(""),16))}(t)):(we=e,e=i)):(we=e,e=i),e===i&&(e=we,"\\u"===a.substr(we,2)?(n="\\u",we+=2):(n=i,Le(Fa)),n!==i?(t=we,(o=en())!==i&&(r=en())!==i&&(s=en())!==i&&(u=en())!==i?t=o=[o,r,s,u]:(we=t,t=i),t!==i?(xe=e,e=n=function(a){return String.fromCharCode(parseInt(a.join(""),16))}(t)):(we=e,e=i)):(we=e,e=i)),e}function Ve(){var e,n;return e=we,"\\t"===a.substr(we,2)?(n="\\t",we+=2):(n=i,Le(Ua)),n!==i&&(xe=e,n="\t"),(e=n)===i&&(e=we,"\\b"===a.substr(we,2)?(n="\\b",we+=2):(n=i,Le(Ya)),n!==i&&(xe=e,n="\b"),(e=n)===i&&(e=we,"\\n"===a.substr(we,2)?(n="\\n",we+=2):(n=i,Le(Ja)),n!==i&&(xe=e,n="\n"),(e=n)===i&&(e=we,"\\r"===a.substr(we,2)?(n="\\r",we+=2):(n=i,Le(Va)),n!==i&&(xe=e,n="\r"),(e=n)===i&&(e=we,"\\f"===a.substr(we,2)?(n="\\f",we+=2):(n=i,Le(Za)),n!==i&&(xe=e,n="\f"),(e=n)===i&&(e=we,'\\"'===a.substr(we,2)?(n='\\"',we+=2):(n=i,Le($a)),n!==i&&(xe=e,n='"'),(e=n)===i&&(e=we,"\\'"===a.substr(we,2)?(n="\\'",we+=2):(n=i,Le(Qa)),n!==i&&(xe=e,n="'"),(e=n)===i&&(e=we,"\\\\"===a.substr(we,2)?(n="\\\\",we+=2):(n=i,Le(Xa)),n!==i&&(xe=e,n="\\"),e=n))))))),e}function Ze(){var e,n,t;return e=we,ne.test(a.charAt(we))?(n=a.charAt(we),we++):(n=i,Le(te)),n!==i?(ie.test(a.charAt(we))?(t=a.charAt(we),we++):(t=i,Le(oe)),t!==i?(xe=e,e=n=function(a,e){return a+e}(n,t)):(we=e,e=i)):(we=e,e=i),e===i&&(re.test(a.charAt(we))?(e=a.charAt(we),we++):(e=i,Le(se))),e}function $e(){var e;return(e=Ze())===i&&(95===a.charCodeAt(we)?(e="_",we++):(e=i,Le(ue))),e}function Qe(){var e;return(e=$e())===i&&(45===a.charCodeAt(we)?(e="-",we++):(e=i,Le(da)),e===i&&(ra.test(a.charAt(we))?(e=a.charAt(we),we++):(e=i,Le(sa)),e===i&&(183===a.charCodeAt(we)?(e="·",we++):(e=i,Le(le)),e===i&&(ce.test(a.charAt(we))?(e=a.charAt(we),we++):(e=i,Le(de)),e===i&&(ge.test(a.charAt(we))?(e=a.charAt(we),we++):(e=i,Le(he))))))),e}function Xe(){var e,n,t,o,r,l,c,d,g;if(e=we,n=we,(t=Ze())!==i){for(o=[],r=Qe();r!==i;)o.push(r),r=Qe();if(o!==i){if(r=[],l=we,c=[],46===a.charCodeAt(we)?(d=s,we++):(d=i,Le(u)),d!==i)for(;d!==i;)c.push(d),46===a.charCodeAt(we)?(d=s,we++):(d=i,Le(u));else c=i;if(c!==i){if(d=[],(g=Qe())!==i)for(;g!==i;)d.push(g),g=Qe();else d=i;d!==i?l=c=[c,d]:(we=l,l=i)}else we=l,l=i;for(;l!==i;){if(r.push(l),l=we,c=[],46===a.charCodeAt(we)?(d=s,we++):(d=i,Le(u)),d!==i)for(;d!==i;)c.push(d),46===a.charCodeAt(we)?(d=s,we++):(d=i,Le(u));else c=i;if(c!==i){if(d=[],(g=Qe())!==i)for(;g!==i;)d.push(g),g=Qe();else d=i;d!==i?l=c=[c,d]:(we=l,l=i)}else we=l,l=i}r!==i?n=t=[t,o,r]:(we=n,n=i)}else we=n,n=i}else we=n,n=i;return n!==i?a.substring(e,we):n}function an(){var e;return(e=function(){var e,n,t,o,r;return e=we,n=we,37===a.charCodeAt(we)?(t="%",we++):(t=i,Le(pe)),t!==i&&(o=en())!==i&&(r=en())!==i?n=t=[t,o,r]:(we=n,n=i),e=n!==i?a.substring(e,we):n}())===i&&(e=function(){var e,n,t;return e=we,92===a.charCodeAt(we)?(n="\\",we++):(n=i,Le(ye)),n!==i?(ke.test(a.charAt(we))?(t=a.charAt(we),we++):(t=i,Le(ve)),t!==i?(xe=e,e=n=t):(we=e,e=i)):(we=e,e=i),e}()),e}function en(){var e;return be.test(a.charAt(we))?(e=a.charAt(we),we++):(e=i,Le(fe)),e}var nn={base:[],data:{},addBase:function(a){if(0===nn.base.length)return void nn.base.push(a);const e=nn.base[nn.base.length-1];e!==a&&nn.base.push(new URL(a,e).toString())},addPrefix:function(a,e){const n=nn.data[a];void 0===n?nn.data[a]=[{uri:e,count:0}]:n[n.length-1].uri!==e&&n.push({uri:e,count:0})},hasPrefix:function(a){return void 0!==this.data[a]},resolve:function(a,n){const t=Object.keys(nn.data).find((e=>0===a.indexOf(e+":")));if(void 0!==t){const e=nn.data[t];if(1===e.length&&!0!==n)return a;const i=e[e.length-1].uri;return a.replace(t+":",i)}var i=0===nn.base.length?e.baseIRI:nn.base[nn.base.length-1];return!i||a.match(/^(http:|https:|urn:|file:)/)?a:0===a.indexOf("//")&&i?i.split("//")[0]+a:new URL(a,i).toString()},increment:function(a){const e=nn.data[a];void 0!==e&&e[e.length-1].count++},decrement:function(a){const e=nn.data[a];void 0!==e&&e[e.length-1].count--},toJSON:function(){const a={};return nn.base.length>0&&(void 0===a["@context"]&&(a["@context"]={}),a["@context"]["@base"]=nn.base[0]),Object.keys(nn.data).forEach((e=>{const n=nn.data[e][0];"http://www.w3.org/2001/XMLSchema#"===n.uri&&n.count<1||(void 0===a["@context"]&&(a["@context"]={}),a["@context"][e]=n.uri)})),a}};function tn(a,e){if(void 0===a["@list"])return a;if(!e&&!a["@list"].find((a=>void 0!==a["@list"])))return a;if(0===a["@list"].length)return{"@id":"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"};var n={},t=null;return a["@list"].forEach((a=>{null===t?t=n:(t["http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"]={},t=t["http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"]),t["http://www.w3.org/1999/02/22-rdf-syntax-ns#first"]=tn(a,!0),t["http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"]={"@id":"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"}})),n}if((t=r())!==i&&we===a.length)return t;throw t!==i&&we<a.length&&Le({type:"end"}),function(a,e,t){return new n(n.buildMessage(a,e),a,e,t)}(je,Me<a.length?a.charAt(Me):null,Me<a.length?Te(Me,Me+1):Te(Me,Me))};var i="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};var o=class a{constructor(a,e=new Map,n=0){this.prefix=a,this._existing=e,this.counter=n}clone(){const{prefix:e,_existing:n,counter:t}=this;return new a(e,new Map(n),t)}getId(a){const e=a&&this._existing.get(a);if(e)return e;const n=this.prefix+this.counter;return this.counter++,a&&this._existing.set(a,n),n}hasId(a){return this._existing.has(a)}getOldIds(){return[...this._existing.keys()]}};!function(a,e){if(!a.setImmediate){var n,t,i,o,r,s=1,u={},l=!1,c=a.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(a);d=d&&d.setTimeout?d:a,"[object process]"==={}.toString.call(a.process)?n=function(a){process.nextTick((function(){h(a)}))}:function(){if(a.postMessage&&!a.importScripts){var e=!0,n=a.onmessage;return a.onmessage=function(){e=!1},a.postMessage("","*"),a.onmessage=n,e}}()?(o="setImmediate$"+Math.random()+"$",r=function(e){e.source===a&&"string"==typeof e.data&&0===e.data.indexOf(o)&&h(+e.data.slice(o.length))},a.addEventListener?a.addEventListener("message",r,!1):a.attachEvent("onmessage",r),n=function(e){a.postMessage(o+e,"*")}):a.MessageChannel?((i=new MessageChannel).port1.onmessage=function(a){h(a.data)},n=function(a){i.port2.postMessage(a)}):c&&"onreadystatechange"in c.createElement("script")?(t=c.documentElement,n=function(a){var e=c.createElement("script");e.onreadystatechange=function(){h(a),e.onreadystatechange=null,t.removeChild(e),e=null},t.appendChild(e)}):n=function(a){setTimeout(h,0,a)},d.setImmediate=function(a){"function"!=typeof a&&(a=new Function(""+a));for(var e=new Array(arguments.length-1),t=0;t<e.length;t++)e[t]=arguments[t+1];var i={callback:a,args:e};return u[s]=i,n(s),s++},d.clearImmediate=g}function g(a){delete u[a]}function h(a){if(l)setTimeout(h,0,a);else{var e=u[a];if(e){l=!0;try{!function(a){var e=a.callback,n=a.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{g(a),l=!1}}}}}("undefined"==typeof self?i:self);const r=self.crypto||self.msCrypto;var s=class{constructor(a){if(!r||!r.subtle)throw new Error("crypto.subtle not found.");if("sha256"===a)this.algorithm={name:"SHA-256"};else{if("sha1"!==a)throw new Error(`Unsupport algorithm "${a}".`);this.algorithm={name:"SHA-1"}}this._content=""}update(a){this._content+=a}async digest(){const a=(new TextEncoder).encode(this._content),e=new Uint8Array(await r.subtle.digest(this.algorithm,a));let n="";for(let a=0;a<e.length;++a)n+=e[a].toString(16).padStart(2,"0");return n}},u=class{constructor(a){this.current=a.sort(),this.done=!1,this.dir=new Map;for(let e=0;e<a.length;++e)this.dir.set(a[e],!0)}hasNext(){return!this.done}next(){const{current:a,dir:e}=this,n=a.slice();let t=null,i=0;const o=a.length;for(let n=0;n<o;++n){const r=a[n],s=e.get(r);(null===t||r>t)&&(s&&n>0&&r>a[n-1]||!s&&n<o-1&&r>a[n+1])&&(t=r,i=n)}if(null===t)this.done=!0;else{const n=e.get(t)?i-1:i+1;a[i]=a[n],a[n]=t;for(const n of a)n>t&&e.set(n,!e.get(n))}return n}};const l="http://www.w3.org/1999/02/22-rdf-syntax-ns#langString",c="http://www.w3.org/2001/XMLSchema#string",d={eoln:/(?:\r\n)|(?:\n)|(?:\r)/g};d.empty=new RegExp("^[ \\t]*$"),d.quad=new RegExp('^[ \\t]*(?:(?:<([^:]+:[^>]*)>)|(_:(?:[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�_0-9])(?:(?:[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�_0-9-·̀-ͯ‿-⁀.])*(?:[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�_0-9-·̀-ͯ‿-⁀]))?))[ \\t]+(?:<([^:]+:[^>]*)>)[ \\t]+(?:(?:<([^:]+:[^>]*)>)|(_:(?:[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�_0-9])(?:(?:[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�_0-9-·̀-ͯ‿-⁀.])*(?:[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�_0-9-·̀-ͯ‿-⁀]))?)|(?:"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"(?:(?:\\^\\^(?:<([^:]+:[^>]*)>))|(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*)))?))[ \\t]*(?:\\.|(?:(?:(?:<([^:]+:[^>]*)>)|(_:(?:[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�_0-9])(?:(?:[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�_0-9-·̀-ͯ‿-⁀.])*(?:[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�_0-9-·̀-ͯ‿-⁀]))?))[ \\t]*\\.))[ \\t]*$');var g=class a{static parse(a){const e=[],n={},t=a.split(d.eoln);let i=0;for(const a of t){if(i++,d.empty.test(a))continue;const t=a.match(d.quad);if(null===t)throw new Error("N-Quads parse error on line "+i+".");const o={subject:null,predicate:null,object:null,graph:null};if(void 0!==t[1]?o.subject={termType:"NamedNode",value:t[1]}:o.subject={termType:"BlankNode",value:t[2]},o.predicate={termType:"NamedNode",value:t[3]},void 0!==t[4]?o.object={termType:"NamedNode",value:t[4]}:void 0!==t[5]?o.object={termType:"BlankNode",value:t[5]}:(o.object={termType:"Literal",value:void 0,datatype:{termType:"NamedNode"}},void 0!==t[7]?o.object.datatype.value=t[7]:void 0!==t[8]?(o.object.datatype.value=l,o.object.language=t[8]):o.object.datatype.value=c,o.object.value=t[6].replace(p,(function(a,e,n,t){if(e)switch(e){case"t":return"\t";case"b":return"\b";case"n":return"\n";case"r":return"\r";case"f":return"\f";case'"':return'"';case"'":return"'";case"\\":return"\\"}if(n)return String.fromCharCode(parseInt(n,16));if(t)throw new Error("Unsupported U escape")}))),void 0!==t[9]?o.graph={termType:"NamedNode",value:t[9]}:void 0!==t[10]?o.graph={termType:"BlankNode",value:t[10]}:o.graph={termType:"DefaultGraph",value:""},o.graph.value in n){let a=!0;const t=n[o.graph.value];for(const e of t)if(h(e,o)){a=!1;break}a&&(t.push(o),e.push(o))}else n[o.graph.value]=[o],e.push(o)}return e}static serialize(e){Array.isArray(e)||(e=a.legacyDatasetToQuads(e));const n=[];for(const t of e)n.push(a.serializeQuad(t));return n.sort().join("")}static serializeQuad(a){const e=a.subject,n=a.predicate,t=a.object,i=a.graph;let o="";return"NamedNode"===e.termType?o+=`<${e.value}>`:o+=`${e.value}`,o+=` <${n.value}> `,"NamedNode"===t.termType?o+=`<${t.value}>`:"BlankNode"===t.termType?o+=t.value:(o+=`"${function(a){return a.replace(m,(function(a){switch(a){case'"':return'\\"';case"\\":return"\\\\";case"\n":return"\\n";case"\r":return"\\r"}}))}(t.value)}"`,t.datatype.value===l?t.language&&(o+=`@${t.language}`):t.datatype.value!==c&&(o+=`^^<${t.datatype.value}>`)),"NamedNode"===i.termType?o+=` <${i.value}>`:"BlankNode"===i.termType&&(o+=` ${i.value}`),o+=" .\n",o}static legacyDatasetToQuads(a){const e=[],n={"blank node":"BlankNode",IRI:"NamedNode",literal:"Literal"};for(const t in a)a[t].forEach((a=>{const i={};for(const e in a){const t=a[e],o={termType:n[t.type],value:t.value};"Literal"===o.termType&&(o.datatype={termType:"NamedNode"},"datatype"in t&&(o.datatype.value=t.datatype),"language"in t?("datatype"in t||(o.datatype.value=l),o.language=t.language):"datatype"in t||(o.datatype.value=c)),i[e]=o}i.graph="@default"===t?{termType:"DefaultGraph",value:""}:{termType:t.startsWith("_:")?"BlankNode":"NamedNode",value:t},e.push(i)}));return e}};function h(a,e){return a.subject.termType===e.subject.termType&&a.object.termType===e.object.termType&&a.subject.value===e.subject.value&&a.predicate.value===e.predicate.value&&a.object.value===e.object.value&&("Literal"!==a.object.termType||a.object.datatype.termType===e.object.datatype.termType&&a.object.language===e.object.language&&a.object.datatype.value===e.object.datatype.value)}const m=/["\\\n\r]/g,p=/(?:\\([tbnrf"'\\]))|(?:\\u([0-9A-Fa-f]{4}))|(?:\\U([0-9A-Fa-f]{8}))/g;var b=class{constructor(){this.name="URDNA2015",this.blankNodeInfo=new Map,this.canonicalIssuer=new o("_:c14n"),this.hashAlgorithm="sha256",this.quads=null}async main(a){this.quads=a;for(const e of a)this._addBlankNodeQuadInfo({quad:e,component:e.subject}),this._addBlankNodeQuadInfo({quad:e,component:e.object}),this._addBlankNodeQuadInfo({quad:e,component:e.graph});const e=new Map,n=[...this.blankNodeInfo.keys()];let t=0;for(const a of n)++t%100==0&&await this._yield(),await this._hashAndTrackBlankNode({id:a,hashToBlankNodes:e});const i=[...e.keys()].sort(),r=[];for(const a of i){const n=e.get(a);if(n.length>1){r.push(n);continue}const t=n[0];this.canonicalIssuer.getId(t)}for(const a of r){const e=[];for(const n of a){if(this.canonicalIssuer.hasId(n))continue;const a=new o("_:b");a.getId(n);const t=await this.hashNDegreeQuads(n,a);e.push(t)}e.sort(f);for(const a of e){const e=a.issuer.getOldIds();for(const a of e)this.canonicalIssuer.getId(a)}}const s=[];for(const a of this.quads){const e={...a};e.subject=this._useCanonicalId({component:e.subject}),e.object=this._useCanonicalId({component:e.object}),e.graph=this._useCanonicalId({component:e.graph}),s.push(g.serializeQuad(e))}return s.sort(),s.join("")}async hashFirstDegreeQuads(a){const e=[],n=this.blankNodeInfo.get(a),t=n.quads;for(const n of t){const t={subject:null,predicate:n.predicate,object:null,graph:null};t.subject=this.modifyFirstDegreeComponent(a,n.subject,"subject"),t.object=this.modifyFirstDegreeComponent(a,n.object,"object"),t.graph=this.modifyFirstDegreeComponent(a,n.graph,"graph"),e.push(g.serializeQuad(t))}e.sort();const i=new s(this.hashAlgorithm);for(const a of e)i.update(a);return n.hash=await i.digest(),n.hash}async hashRelatedBlankNode(a,e,n,t){let i;i=this.canonicalIssuer.hasId(a)?this.canonicalIssuer.getId(a):n.hasId(a)?n.getId(a):this.blankNodeInfo.get(a).hash;const o=new s(this.hashAlgorithm);return o.update(t),"g"!==t&&o.update(this.getRelatedPredicate(e)),o.update(i),o.digest()}async hashNDegreeQuads(a,e){const n=new s(this.hashAlgorithm),t=await this.createHashToRelated(a,e),i=[...t.keys()].sort();for(const a of i){n.update(a);let i,o="";const r=new u(t.get(a));let s=0;for(;r.hasNext();){const a=r.next();++s%3==0&&await this._yield();let n=e.clone(),t="";const u=[];let l=!1;for(const e of a)if(this.canonicalIssuer.hasId(e)?t+=this.canonicalIssuer.getId(e):(n.hasId(e)||u.push(e),t+=n.getId(e)),0!==o.length&&t>o){l=!0;break}if(!l){for(const a of u){const e=await this.hashNDegreeQuads(a,n);if(t+=n.getId(a),t+=`<${e.hash}>`,n=e.issuer,0!==o.length&&t>o){l=!0;break}}l||(0===o.length||t<o)&&(o=t,i=n)}}n.update(o),e=i}return{hash:await n.digest(),issuer:e}}modifyFirstDegreeComponent(a,e){return"BlankNode"!==e.termType?e:{termType:"BlankNode",value:e.value===a?"_:a":"_:z"}}getRelatedPredicate(a){return`<${a.predicate.value}>`}async createHashToRelated(a,e){const n=new Map,t=this.blankNodeInfo.get(a).quads;let i=0;for(const o of t)++i%100==0&&await this._yield(),await Promise.all([this._addRelatedBlankNodeHash({quad:o,component:o.subject,position:"s",id:a,issuer:e,hashToRelated:n}),this._addRelatedBlankNodeHash({quad:o,component:o.object,position:"o",id:a,issuer:e,hashToRelated:n}),this._addRelatedBlankNodeHash({quad:o,component:o.graph,position:"g",id:a,issuer:e,hashToRelated:n})]);return n}async _hashAndTrackBlankNode({id:a,hashToBlankNodes:e}){const n=await this.hashFirstDegreeQuads(a),t=e.get(n);t?t.push(a):e.set(n,[a])}_addBlankNodeQuadInfo({quad:a,component:e}){if("BlankNode"!==e.termType)return;const n=e.value,t=this.blankNodeInfo.get(n);t?t.quads.add(a):this.blankNodeInfo.set(n,{quads:new Set([a]),hash:null})}async _addRelatedBlankNodeHash({quad:a,component:e,position:n,id:t,issuer:i,hashToRelated:o}){if("BlankNode"!==e.termType||e.value===t)return;const r=e.value,s=await this.hashRelatedBlankNode(r,a,i,n),u=o.get(s);u?u.push(r):o.set(s,[r])}_useCanonicalId({component:a}){return"BlankNode"!==a.termType||a.value.startsWith(this.canonicalIssuer.prefix)?a:{termType:"BlankNode",value:this.canonicalIssuer.getId(a.value)}}async _yield(){return new Promise((a=>setImmediate(a)))}};function f(a,e){return a.hash<e.hash?-1:a.hash>e.hash?1:0}var y=class extends b{constructor(){super(),this.name="URGNA2012",this.hashAlgorithm="sha1"}modifyFirstDegreeComponent(a,e,n){return"BlankNode"!==e.termType?e:"graph"===n?{termType:"BlankNode",value:"_:g"}:{termType:"BlankNode",value:e.value===a?"_:a":"_:z"}}getRelatedPredicate(a){return a.predicate.value}async createHashToRelated(a,e){const n=new Map,t=this.blankNodeInfo.get(a).quads;let i=0;for(const o of t){let t,r;if("BlankNode"===o.subject.termType&&o.subject.value!==a)r=o.subject.value,t="p";else{if("BlankNode"!==o.object.termType||o.object.value===a)continue;r=o.object.value,t="r"}++i%100==0&&await this._yield();const s=await this.hashRelatedBlankNode(r,o,e,t),u=n.get(s);u?u.push(r):n.set(s,[r])}return n}},k=class{constructor(){this.name="URDNA2015",this.blankNodeInfo=new Map,this.canonicalIssuer=new o("_:c14n"),this.hashAlgorithm="sha256",this.quads=null}main(a){this.quads=a;for(const e of a)this._addBlankNodeQuadInfo({quad:e,component:e.subject}),this._addBlankNodeQuadInfo({quad:e,component:e.object}),this._addBlankNodeQuadInfo({quad:e,component:e.graph});const e=new Map,n=[...this.blankNodeInfo.keys()];for(const a of n)this._hashAndTrackBlankNode({id:a,hashToBlankNodes:e});const t=[...e.keys()].sort(),i=[];for(const a of t){const n=e.get(a);if(n.length>1){i.push(n);continue}const t=n[0];this.canonicalIssuer.getId(t)}for(const a of i){const e=[];for(const n of a){if(this.canonicalIssuer.hasId(n))continue;const a=new o("_:b");a.getId(n);const t=this.hashNDegreeQuads(n,a);e.push(t)}e.sort(v);for(const a of e){const e=a.issuer.getOldIds();for(const a of e)this.canonicalIssuer.getId(a)}}const r=[];for(const a of this.quads){const e={...a};e.subject=this._useCanonicalId({component:e.subject}),e.object=this._useCanonicalId({component:e.object}),e.graph=this._useCanonicalId({component:e.graph}),r.push(g.serializeQuad(e))}return r.sort(),r.join("")}hashFirstDegreeQuads(a){const e=[],n=this.blankNodeInfo.get(a),t=n.quads;for(const n of t){const t={subject:null,predicate:n.predicate,object:null,graph:null};t.subject=this.modifyFirstDegreeComponent(a,n.subject,"subject"),t.object=this.modifyFirstDegreeComponent(a,n.object,"object"),t.graph=this.modifyFirstDegreeComponent(a,n.graph,"graph"),e.push(g.serializeQuad(t))}e.sort();const i=new s(this.hashAlgorithm);for(const a of e)i.update(a);return n.hash=i.digest(),n.hash}hashRelatedBlankNode(a,e,n,t){let i;i=this.canonicalIssuer.hasId(a)?this.canonicalIssuer.getId(a):n.hasId(a)?n.getId(a):this.blankNodeInfo.get(a).hash;const o=new s(this.hashAlgorithm);return o.update(t),"g"!==t&&o.update(this.getRelatedPredicate(e)),o.update(i),o.digest()}hashNDegreeQuads(a,e){const n=new s(this.hashAlgorithm),t=this.createHashToRelated(a,e),i=[...t.keys()].sort();for(const a of i){n.update(a);let i,o="";const r=new u(t.get(a));for(;r.hasNext();){const a=r.next();let n=e.clone(),t="";const s=[];let u=!1;for(const e of a)if(this.canonicalIssuer.hasId(e)?t+=this.canonicalIssuer.getId(e):(n.hasId(e)||s.push(e),t+=n.getId(e)),0!==o.length&&t>o){u=!0;break}if(!u){for(const a of s){const e=this.hashNDegreeQuads(a,n);if(t+=n.getId(a),t+=`<${e.hash}>`,n=e.issuer,0!==o.length&&t>o){u=!0;break}}u||(0===o.length||t<o)&&(o=t,i=n)}}n.update(o),e=i}return{hash:n.digest(),issuer:e}}modifyFirstDegreeComponent(a,e){return"BlankNode"!==e.termType?e:{termType:"BlankNode",value:e.value===a?"_:a":"_:z"}}getRelatedPredicate(a){return`<${a.predicate.value}>`}createHashToRelated(a,e){const n=new Map,t=this.blankNodeInfo.get(a).quads;for(const i of t)this._addRelatedBlankNodeHash({quad:i,component:i.subject,position:"s",id:a,issuer:e,hashToRelated:n}),this._addRelatedBlankNodeHash({quad:i,component:i.object,position:"o",id:a,issuer:e,hashToRelated:n}),this._addRelatedBlankNodeHash({quad:i,component:i.graph,position:"g",id:a,issuer:e,hashToRelated:n});return n}_hashAndTrackBlankNode({id:a,hashToBlankNodes:e}){const n=this.hashFirstDegreeQuads(a),t=e.get(n);t?t.push(a):e.set(n,[a])}_addBlankNodeQuadInfo({quad:a,component:e}){if("BlankNode"!==e.termType)return;const n=e.value,t=this.blankNodeInfo.get(n);t?t.quads.add(a):this.blankNodeInfo.set(n,{quads:new Set([a]),hash:null})}_addRelatedBlankNodeHash({quad:a,component:e,position:n,id:t,issuer:i,hashToRelated:o}){if("BlankNode"!==e.termType||e.value===t)return;const r=e.value,s=this.hashRelatedBlankNode(r,a,i,n),u=o.get(s);u?u.push(r):o.set(s,[r])}_useCanonicalId({component:a}){return"BlankNode"!==a.termType||a.value.startsWith(this.canonicalIssuer.prefix)?a:{termType:"BlankNode",value:this.canonicalIssuer.getId(a.value)}}};function v(a,e){return a.hash<e.hash?-1:a.hash>e.hash?1:0}var w=class extends k{constructor(){super(),this.name="URGNA2012",this.hashAlgorithm="sha1"}modifyFirstDegreeComponent(a,e,n){return"BlankNode"!==e.termType?e:"graph"===n?{termType:"BlankNode",value:"_:g"}:{termType:"BlankNode",value:e.value===a?"_:a":"_:z"}}getRelatedPredicate(a){return a.predicate.value}createHashToRelated(a,e){const n=new Map,t=this.blankNodeInfo.get(a).quads;for(const i of t){let t,o;if("BlankNode"===i.subject.termType&&i.subject.value!==a)o=i.subject.value,t="p";else{if("BlankNode"!==i.object.termType||i.object.value===a)continue;o=i.object.value,t="r"}const r=this.hashRelatedBlankNode(o,i,e,t),s=n.get(r);s?s.push(o):n.set(r,[o])}return n}},x=function(a){if(a.__esModule)return a;var e=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(a).forEach((function(n){var t=Object.getOwnPropertyDescriptor(a,n);Object.defineProperty(e,n,t.get?t:{enumerable:!0,get:function(){return a[n]}})})),e}(Object.freeze({__proto__:null,default:{}}));let S;try{S=x}catch(i){}const M={};var j=M;M.NQuads=g,M.IdentifierIssuer=o,M._rdfCanonizeNative=function(a){return a&&(S=a),S},M.canonize=async function(a,e){if(Array.isArray(a)||(a=M.NQuads.legacyDatasetToQuads(a)),e.useNative){if(!S)throw new Error("rdf-canonize-native not available");return new Promise(((n,t)=>S.canonize(a,e,((a,e)=>a?t(a):n(e)))))}if("URDNA2015"===e.algorithm)return new b(e).main(a);if("URGNA2012"===e.algorithm)return new y(e).main(a);if(!("algorithm"in e))throw new Error("No RDF Dataset Canonicalization algorithm specified.");throw new Error("Invalid RDF Dataset Canonicalization algorithm: "+e.algorithm)},M._canonizeSync=function(a,e){if(Array.isArray(a)||(a=M.NQuads.legacyDatasetToQuads(a)),e.useNative){if(S)return S.canonizeSync(a,e);throw new Error("rdf-canonize-native not available")}if("URDNA2015"===e.algorithm)return new k(e).main(a);if("URGNA2012"===e.algorithm)return new w(e).main(a);if(!("algorithm"in e))throw new Error("No RDF Dataset Canonicalization algorithm specified.");throw new Error("Invalid RDF Dataset Canonicalization algorithm: "+e.algorithm)};const A={};var N=A;A.isArray=Array.isArray,A.isBoolean=a=>"boolean"==typeof a||"[object Boolean]"===Object.prototype.toString.call(a),A.isDouble=a=>A.isNumber(a)&&(-1!==String(a).indexOf(".")||Math.abs(a)>=1e21),A.isEmptyObject=a=>A.isObject(a)&&0===Object.keys(a).length,A.isNumber=a=>"number"==typeof a||"[object Number]"===Object.prototype.toString.call(a),A.isNumeric=a=>!isNaN(parseFloat(a))&&isFinite(a),A.isObject=a=>"[object Object]"===Object.prototype.toString.call(a),A.isString=a=>"string"==typeof a||"[object String]"===Object.prototype.toString.call(a),A.isUndefined=a=>void 0===a;const C={};var K=C;C.isSubject=a=>!(!N.isObject(a)||"@value"in a||"@set"in a||"@list"in a)&&(Object.keys(a).length>1||!("@id"in a)),C.isSubjectReference=a=>N.isObject(a)&&1===Object.keys(a).length&&"@id"in a,C.isValue=a=>N.isObject(a)&&"@value"in a,C.isList=a=>N.isObject(a)&&"@list"in a,C.isGraph=a=>N.isObject(a)&&"@graph"in a&&1===Object.keys(a).filter((a=>"@id"!==a&&"@index"!==a)).length,C.isSimpleGraph=a=>C.isGraph(a)&&!("@id"in a),C.isBlankNode=a=>!!N.isObject(a)&&("@id"in a?0===a["@id"].indexOf("_:"):0===Object.keys(a).length||!("@value"in a||"@set"in a||"@list"in a));var T=class extends Error{constructor(a="An unspecified JSON-LD error occurred.",e="jsonld.Error",n={}){super(a),this.name=e,this.message=a,this.details=n}};const L=j.IdentifierIssuer,B=/(?:<[^>]*?>|"[^"]*?"|[^,])+/g,z=/\s*<([^>]*?)>\s*(?:;\s*(.*))?/,P=/(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g,D="application/ld+json, application/json",I={};var O=I;function q(a,e){if(N.isArray(e))for(let n=0;n<e.length;++n)e[n]=q(a,e[n]);else if(K.isList(e))e["@list"]=q(a,e["@list"]);else if(N.isObject(e)){K.isBlankNode(e)&&(e["@id"]=a.getId(e["@id"]));const n=Object.keys(e).sort();for(let t=0;t<n.length;++t){const i=n[t];"@id"!==i&&(e[i]=q(a,e[i]))}}return e}I.IdentifierIssuer=L,I.clone=function(a){if(a&&"object"==typeof a){let e;if(N.isArray(a)){e=[];for(let n=0;n<a.length;++n)e[n]=I.clone(a[n])}else if(a instanceof Map){e=new Map;for(const[n,t]of a)e.set(n,I.clone(t))}else if(a instanceof Set){e=new Set;for(const n of a)e.add(I.clone(n))}else if(N.isObject(a)){e={};for(const n in a)e[n]=I.clone(a[n])}else e=a.toString();return e}return a},I.asArray=function(a){return Array.isArray(a)?a:[a]},I.buildHeaders=(a={})=>{if(Object.keys(a).some((a=>"accept"===a.toLowerCase())))throw new RangeError('Accept header may not be specified; only "'+D+'" is supported.');return Object.assign({Accept:D},a)},I.parseLinkHeader=a=>{const e={},n=a.match(B);for(let a=0;a<n.length;++a){let t=n[a].match(z);if(!t)continue;const i={target:t[1]},o=t[2];for(;t=P.exec(o);)i[t[1]]=void 0===t[2]?t[3]:t[2];const r=i.rel||"";Array.isArray(e[r])?e[r].push(i):e.hasOwnProperty(r)?e[r]=[e[r],i]:e[r]=i}return e},I.validateTypeValue=(a,e)=>{if(!(N.isString(a)||N.isArray(a)&&a.every((a=>N.isString(a))))){if(e&&N.isObject(a))switch(Object.keys(a).length){case 0:return;case 1:if("@default"in a&&I.asArray(a["@default"]).every((a=>N.isString(a))))return}throw new T('Invalid JSON-LD syntax; "@type" value must a string, an array of strings, an empty object, or a default object.',"jsonld.SyntaxError",{code:"invalid type value",value:a})}},I.hasProperty=(a,e)=>{if(a.hasOwnProperty(e)){const n=a[e];return!N.isArray(n)||n.length>0}return!1},I.hasValue=(a,e,n)=>{if(I.hasProperty(a,e)){let t=a[e];const i=K.isList(t);if(N.isArray(t)||i){i&&(t=t["@list"]);for(let a=0;a<t.length;++a)if(I.compareValues(n,t[a]))return!0}else if(!N.isArray(n))return I.compareValues(n,t)}return!1},I.addValue=(a,e,n,t)=>{if("propertyIsArray"in(t=t||{})||(t.propertyIsArray=!1),"valueIsArray"in t||(t.valueIsArray=!1),"allowDuplicate"in t||(t.allowDuplicate=!0),"prependValue"in t||(t.prependValue=!1),t.valueIsArray)a[e]=n;else if(N.isArray(n)){0===n.length&&t.propertyIsArray&&!a.hasOwnProperty(e)&&(a[e]=[]),t.prependValue&&(n=n.concat(a[e]),a[e]=[]);for(let i=0;i<n.length;++i)I.addValue(a,e,n[i],t)}else if(a.hasOwnProperty(e)){const i=!t.allowDuplicate&&I.hasValue(a,e,n);N.isArray(a[e])||i&&!t.propertyIsArray||(a[e]=[a[e]]),i||(t.prependValue?a[e].unshift(n):a[e].push(n))}else a[e]=t.propertyIsArray?[n]:n},I.getValues=(a,e)=>[].concat(a[e]||[]),I.removeProperty=(a,e)=>{delete a[e]},I.removeValue=(a,e,n,t)=>{"propertyIsArray"in(t=t||{})||(t.propertyIsArray=!1);const i=I.getValues(a,e).filter((a=>!I.compareValues(a,n)));0===i.length?I.removeProperty(a,e):1!==i.length||t.propertyIsArray?a[e]=i:a[e]=i[0]},I.relabelBlankNodes=(a,e)=>q((e=e||{}).issuer||new L("_:b"),a),I.compareValues=(a,e)=>a===e||!(!K.isValue(a)||!K.isValue(e)||a["@value"]!==e["@value"]||a["@type"]!==e["@type"]||a["@language"]!==e["@language"]||a["@index"]!==e["@index"])||!!(N.isObject(a)&&"@id"in a&&N.isObject(e)&&"@id"in e)&&a["@id"]===e["@id"],I.compareShortestLeast=(a,e)=>a.length<e.length?-1:e.length<a.length?1:a===e?0:a<e?-1:1;const E={};var G=E;E.parsers={simple:{keys:["href","scheme","authority","path","query","fragment"],regex:/^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/},full:{keys:["href","protocol","scheme","authority","auth","user","password","hostname","port","path","directory","file","query","fragment"],regex:/^(([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(?:(((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/}},E.parse=(a,e)=>{const n={},t=E.parsers[e||"full"],i=t.regex.exec(a);let o=t.keys.length;for(;o--;)n[t.keys[o]]=void 0===i[o]?null:i[o];return("https"===n.scheme&&"443"===n.port||"http"===n.scheme&&"80"===n.port)&&(n.href=n.href.replace(":"+n.port,""),n.authority=n.authority.replace(":"+n.port,""),n.port=null),n.normalizedPath=E.removeDotSegments(n.path),n},E.prependBase=(a,e)=>{if(null===a)return e;if(E.isAbsolute(e))return e;a&&!N.isString(a)||(a=E.parse(a||""));const n=E.parse(e),t={protocol:a.protocol||""};if(null!==n.authority)t.authority=n.authority,t.path=n.path,t.query=n.query;else if(t.authority=a.authority,""===n.path)t.path=a.path,null!==n.query?t.query=n.query:t.query=a.query;else{if(0===n.path.indexOf("/"))t.path=n.path;else{let e=a.path;e=e.substr(0,e.lastIndexOf("/")+1),(e.length>0||a.authority)&&"/"!==e.substr(-1)&&(e+="/"),e+=n.path,t.path=e}t.query=n.query}""!==n.path&&(t.path=E.removeDotSegments(t.path));let i=t.protocol;return null!==t.authority&&(i+="//"+t.authority),i+=t.path,null!==t.query&&(i+="?"+t.query),null!==n.fragment&&(i+="#"+n.fragment),""===i&&(i="./"),i},E.removeBase=(a,e)=>{if(null===a)return e;a&&!N.isString(a)||(a=E.parse(a||""));let n="";if(""!==a.href?n+=(a.protocol||"")+"//"+(a.authority||""):e.indexOf("//")&&(n+="//"),0!==e.indexOf(n))return e;const t=E.parse(e.substr(n.length)),i=a.normalizedPath.split("/"),o=t.normalizedPath.split("/"),r=t.fragment||t.query?0:1;for(;i.length>0&&o.length>r&&i[0]===o[0];)i.shift(),o.shift();let s="";if(i.length>0){i.pop();for(let a=0;a<i.length;++a)s+="../"}return s+=o.join("/"),null!==t.query&&(s+="?"+t.query),null!==t.fragment&&(s+="#"+t.fragment),""===s&&(s="./"),s},E.removeDotSegments=a=>{if(0===a.length)return"";const e=a.split("/"),n=[];for(;e.length>0;){const a=e.shift(),t=0===e.length;"."!==a?".."!==a?n.push(a):(n.pop(),t&&n.push("")):t&&n.push("")}return"/"===a[0]&&n.length>0&&""!==n[0]&&n.unshift(""),1===n.length&&""===n[0]?"/":n.join("/")};const R=/^([A-Za-z][A-Za-z0-9+-.]*|_):[^\s]*$/;E.isAbsolute=a=>N.isString(a)&&R.test(a),E.isRelative=a=>N.isString(a);var W=H;function H(a){var e=this;if(e instanceof H||(e=new H),e.tail=null,e.head=null,e.length=0,a&&"function"==typeof a.forEach)a.forEach((function(a){e.push(a)}));else if(arguments.length>0)for(var n=0,t=arguments.length;n<t;n++)e.push(arguments[n]);return e}function _(a,e,n){var t=e===a.head?new Y(n,null,e,a):new Y(n,e,e.next,a);return null===t.next&&(a.tail=t),null===t.prev&&(a.head=t),a.length++,t}function F(a,e){a.tail=new Y(e,a.tail,null,a),a.head||(a.head=a.tail),a.length++}function U(a,e){a.head=new Y(e,null,a.head,a),a.tail||(a.tail=a.head),a.length++}function Y(a,e,n,t){if(!(this instanceof Y))return new Y(a,e,n,t);this.list=t,this.value=a,e?(e.next=this,this.prev=e):this.prev=null,n?(n.prev=this,this.next=n):this.next=null}H.Node=Y,H.create=H,H.prototype.removeNode=function(a){if(a.list!==this)throw new Error("removing node which does not belong to this list");var e=a.next,n=a.prev;return e&&(e.prev=n),n&&(n.next=e),a===this.head&&(this.head=e),a===this.tail&&(this.tail=n),a.list.length--,a.next=null,a.prev=null,a.list=null,e},H.prototype.unshiftNode=function(a){if(a!==this.head){a.list&&a.list.removeNode(a);var e=this.head;a.list=this,a.next=e,e&&(e.prev=a),this.head=a,this.tail||(this.tail=a),this.length++}},H.prototype.pushNode=function(a){if(a!==this.tail){a.list&&a.list.removeNode(a);var e=this.tail;a.list=this,a.prev=e,e&&(e.next=a),this.tail=a,this.head||(this.head=a),this.length++}},H.prototype.push=function(){for(var a=0,e=arguments.length;a<e;a++)F(this,arguments[a]);return this.length},H.prototype.unshift=function(){for(var a=0,e=arguments.length;a<e;a++)U(this,arguments[a]);return this.length},H.prototype.pop=function(){if(this.tail){var a=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,a}},H.prototype.shift=function(){if(this.head){var a=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,a}},H.prototype.forEach=function(a,e){e=e||this;for(var n=this.head,t=0;null!==n;t++)a.call(e,n.value,t,this),n=n.next},H.prototype.forEachReverse=function(a,e){e=e||this;for(var n=this.tail,t=this.length-1;null!==n;t--)a.call(e,n.value,t,this),n=n.prev},H.prototype.get=function(a){for(var e=0,n=this.head;null!==n&&e<a;e++)n=n.next;if(e===a&&null!==n)return n.value},H.prototype.getReverse=function(a){for(var e=0,n=this.tail;null!==n&&e<a;e++)n=n.prev;if(e===a&&null!==n)return n.value},H.prototype.map=function(a,e){e=e||this;for(var n=new H,t=this.head;null!==t;)n.push(a.call(e,t.value,this)),t=t.next;return n},H.prototype.mapReverse=function(a,e){e=e||this;for(var n=new H,t=this.tail;null!==t;)n.push(a.call(e,t.value,this)),t=t.prev;return n},H.prototype.reduce=function(a,e){var n,t=this.head;if(arguments.length>1)n=e;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");t=this.head.next,n=this.head.value}for(var i=0;null!==t;i++)n=a(n,t.value,i),t=t.next;return n},H.prototype.reduceReverse=function(a,e){var n,t=this.tail;if(arguments.length>1)n=e;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");t=this.tail.prev,n=this.tail.value}for(var i=this.length-1;null!==t;i--)n=a(n,t.value,i),t=t.prev;return n},H.prototype.toArray=function(){for(var a=new Array(this.length),e=0,n=this.head;null!==n;e++)a[e]=n.value,n=n.next;return a},H.prototype.toArrayReverse=function(){for(var a=new Array(this.length),e=0,n=this.tail;null!==n;e++)a[e]=n.value,n=n.prev;return a},H.prototype.slice=function(a,e){(e=e||this.length)<0&&(e+=this.length),(a=a||0)<0&&(a+=this.length);var n=new H;if(e<a||e<0)return n;a<0&&(a=0),e>this.length&&(e=this.length);for(var t=0,i=this.head;null!==i&&t<a;t++)i=i.next;for(;null!==i&&t<e;t++,i=i.next)n.push(i.value);return n},H.prototype.sliceReverse=function(a,e){(e=e||this.length)<0&&(e+=this.length),(a=a||0)<0&&(a+=this.length);var n=new H;if(e<a||e<0)return n;a<0&&(a=0),e>this.length&&(e=this.length);for(var t=this.length,i=this.tail;null!==i&&t>e;t--)i=i.prev;for(;null!==i&&t>a;t--,i=i.prev)n.push(i.value);return n},H.prototype.splice=function(a,e){a>this.length&&(a=this.length-1),a<0&&(a=this.length+a);for(var n=0,t=this.head;null!==t&&n<a;n++)t=t.next;var i=[];for(n=0;t&&n<e;n++)i.push(t.value),t=this.removeNode(t);for(null===t&&(t=this.tail),t!==this.head&&t!==this.tail&&(t=t.prev),n=2;n<arguments.length;n++)t=_(this,t,arguments[n]);return i},H.prototype.reverse=function(){for(var a=this.head,e=this.tail,n=a;null!==n;n=n.prev){var t=n.prev;n.prev=n.next,n.next=t}return this.head=e,this.tail=a,this};try{!function(a){a.prototype[Symbol.iterator]=function*(){for(let a=this.head;a;a=a.next)yield a.value}}(H)}catch(i){}const J=Symbol("max"),V=Symbol("length"),Z=Symbol("lengthCalculator"),$=Symbol("allowStale"),Q=Symbol("maxAge"),X=Symbol("dispose"),aa=Symbol("noDisposeOnSet"),ea=Symbol("lruList"),na=Symbol("cache"),ta=Symbol("updateAgeOnGet"),ia=()=>1,oa=(a,e,n)=>{const t=a[na].get(e);if(t){const e=t.value;if(ra(a,e)){if(ua(a,t),!a[$])return}else n&&(a[ta]&&(t.value.now=Date.now()),a[ea].unshiftNode(t));return e.value}},ra=(a,e)=>{if(!e||!e.maxAge&&!a[Q])return!1;const n=Date.now()-e.now;return e.maxAge?n>e.maxAge:a[Q]&&n>a[Q]},sa=a=>{if(a[V]>a[J])for(let e=a[ea].tail;a[V]>a[J]&&null!==e;){const n=e.prev;ua(a,e),e=n}},ua=(a,e)=>{if(e){const n=e.value;a[X]&&a[X](n.key,n.value),a[V]-=n.length,a[na].delete(n.key),a[ea].removeNode(e)}};class la{constructor(a,e,n,t,i){this.key=a,this.value=e,this.length=n,this.now=t,this.maxAge=i||0}}const ca=(a,e,n,t)=>{let i=n.value;ra(a,i)&&(ua(a,n),a[$]||(i=void 0)),i&&e.call(t,i.value,i.key,a)};var da=class{constructor(a){if("number"==typeof a&&(a={max:a}),a||(a={}),a.max&&("number"!=typeof a.max||a.max<0))throw new TypeError("max must be a non-negative number");this[J]=a.max||1/0;const e=a.length||ia;if(this[Z]="function"!=typeof e?ia:e,this[$]=a.stale||!1,a.maxAge&&"number"!=typeof a.maxAge)throw new TypeError("maxAge must be a number");this[Q]=a.maxAge||0,this[X]=a.dispose,this[aa]=a.noDisposeOnSet||!1,this[ta]=a.updateAgeOnGet||!1,this.reset()}set max(a){if("number"!=typeof a||a<0)throw new TypeError("max must be a non-negative number");this[J]=a||1/0,sa(this)}get max(){return this[J]}set allowStale(a){this[$]=!!a}get allowStale(){return this[$]}set maxAge(a){if("number"!=typeof a)throw new TypeError("maxAge must be a non-negative number");this[Q]=a,sa(this)}get maxAge(){return this[Q]}set lengthCalculator(a){"function"!=typeof a&&(a=ia),a!==this[Z]&&(this[Z]=a,this[V]=0,this[ea].forEach((a=>{a.length=this[Z](a.value,a.key),this[V]+=a.length}))),sa(this)}get lengthCalculator(){return this[Z]}get length(){return this[V]}get itemCount(){return this[ea].length}rforEach(a,e){e=e||this;for(let n=this[ea].tail;null!==n;){const t=n.prev;ca(this,a,n,e),n=t}}forEach(a,e){e=e||this;for(let n=this[ea].head;null!==n;){const t=n.next;ca(this,a,n,e),n=t}}keys(){return this[ea].toArray().map((a=>a.key))}values(){return this[ea].toArray().map((a=>a.value))}reset(){this[X]&&this[ea]&&this[ea].length&&this[ea].forEach((a=>this[X](a.key,a.value))),this[na]=new Map,this[ea]=new W,this[V]=0}dump(){return this[ea].map((a=>!ra(this,a)&&{k:a.key,v:a.value,e:a.now+(a.maxAge||0)})).toArray().filter((a=>a))}dumpLru(){return this[ea]}set(a,e,n){if((n=n||this[Q])&&"number"!=typeof n)throw new TypeError("maxAge must be a number");const t=n?Date.now():0,i=this[Z](e,a);if(this[na].has(a)){if(i>this[J])return ua(this,this[na].get(a)),!1;const o=this[na].get(a).value;return this[X]&&(this[aa]||this[X](a,o.value)),o.now=t,o.maxAge=n,o.value=e,this[V]+=i-o.length,o.length=i,this.get(a),sa(this),!0}const o=new la(a,e,i,t,n);return o.length>this[J]?(this[X]&&this[X](a,e),!1):(this[V]+=o.length,this[ea].unshift(o),this[na].set(a,this[ea].head),sa(this),!0)}has(a){if(!this[na].has(a))return!1;const e=this[na].get(a).value;return!ra(this,e)}get(a){return oa(this,a,!0)}peek(a){return oa(this,a,!1)}pop(){const a=this[ea].tail;return a?(ua(this,a),a.value):null}del(a){ua(this,this[na].get(a))}load(a){this.reset();const e=Date.now();for(let n=a.length-1;n>=0;n--){const t=a[n],i=t.e||0;if(0===i)this.set(t.k,t.v);else{const a=i-e;a>0&&this.set(t.k,t.v,a)}}}prune(){this[na].forEach(((a,e)=>oa(this,e,!1)))}},ga=class{constructor({document:a}){this.document=a,this.cache=new da({max:10})}getProcessed(a){return this.cache.get(a)}setProcessed(a,e){this.cache.set(a,e)}};const{isArray:ha,isObject:ma,isString:pa}=N,{asArray:ba}=O,{prependBase:fa}=G;var ya=class{constructor({sharedCache:a}){this.perOpCache=new Map,this.sharedCache=a}async resolve({activeCtx:a,context:e,documentLoader:n,base:t,cycles:i=new Set}){e&&ma(e)&&e["@context"]&&(e=e["@context"]),e=ba(e);const o=[];for(const r of e){if(pa(r)){let e=this._get(r);e||(e=await this._resolveRemoteContext({activeCtx:a,url:r,documentLoader:n,base:t,cycles:i})),ha(e)?o.push(...e):o.push(e);continue}if(null===r){o.push(new ga({document:null}));continue}ma(r)||ka(e);const s=JSON.stringify(r);let u=this._get(s);u||(u=new ga({document:r}),this._cacheResolvedContext({key:s,resolved:u,tag:"static"})),o.push(u)}return o}_get(a){let e=this.perOpCache.get(a);if(!e){const n=this.sharedCache.get(a);n&&(e=n.get("static"),e&&this.perOpCache.set(a,e))}return e}_cacheResolvedContext({key:a,resolved:e,tag:n}){if(this.perOpCache.set(a,e),void 0!==n){let t=this.sharedCache.get(a);t||(t=new Map,this.sharedCache.set(a,t)),t.set(n,e)}return e}async _resolveRemoteContext({activeCtx:a,url:e,documentLoader:n,base:t,cycles:i}){e=fa(t,e);const{context:o,remoteDoc:r}=await this._fetchContext({activeCtx:a,url:e,documentLoader:n,cycles:i});va({context:o,base:t=r.documentUrl||e});const s=await this.resolve({activeCtx:a,context:o,documentLoader:n,base:t,cycles:i});return this._cacheResolvedContext({key:e,resolved:s,tag:r.tag}),s}async _fetchContext({activeCtx:a,url:e,documentLoader:n,cycles:t}){if(t.size>10)throw new T("Maximum number of @context URLs exceeded.","jsonld.ContextUrlError",{code:"json-ld-1.0"===a.processingMode?"loading remote context failed":"context overflow",max:10});if(t.has(e))throw new T("Cyclical @context URLs detected.","jsonld.ContextUrlError",{code:"json-ld-1.0"===a.processingMode?"recursive context inclusion":"context overflow",url:e});let i,o;t.add(e);try{o=await n(e),i=o.document||null,pa(i)&&(i=JSON.parse(i))}catch(a){throw new T("Dereferencing a URL did not result in a valid JSON-LD object. Possible causes are an inaccessible URL perhaps due to a same-origin policy (ensure the server uses CORS if you are using client-side JavaScript), too many redirects, a non-JSON response, or more than one HTTP Link Header was provided for a remote context.","jsonld.InvalidUrl",{code:"loading remote context failed",url:e,cause:a})}if(!ma(i))throw new T("Dereferencing a URL did not result in a JSON object. The response was valid JSON, but it was not a JSON object.","jsonld.InvalidUrl",{code:"invalid remote context",url:e});return i="@context"in i?{"@context":i["@context"]}:{"@context":{}},o.contextUrl&&(ha(i["@context"])||(i["@context"]=[i["@context"]]),i["@context"].push(o.contextUrl)),{context:i,remoteDoc:o}}};function ka(a){throw new T("Invalid JSON-LD syntax; @context must be an object.","jsonld.SyntaxError",{code:"invalid local context",context:a})}function va({context:a,base:e}){if(!a)return;const n=a["@context"];if(pa(n))a["@context"]=fa(e,n);else if(ha(n))for(let a=0;a<n.length;++a){const t=n[a];pa(t)?n[a]=fa(e,t):ma(t)&&va({context:{"@context":t},base:e})}else if(ma(n))for(const a in n)va({context:n[a],base:e})}var wa=j.NQuads;const{isArray:xa,isObject:Sa,isString:Ma,isUndefined:ja}=N,{isAbsolute:Aa,isRelative:Na,prependBase:Ca}=G,{asArray:Ka,compareShortestLeast:Ta}=O,La=new Map,Ba=/^@[a-zA-Z]+$/,za={};var Pa=za;function Da(a,e,n,t,i,o){if(null===e||!Ma(e)||za.isKeyword(e))return e;if(e.match(Ba))return null;if(t&&t.hasOwnProperty(e)&&!0!==i.get(e)&&za.createTermDefinition({activeCtx:a,localCtx:t,term:e,defined:i,options:o}),(n=n||{}).vocab){const n=a.mappings.get(e);if(null===n)return null;if(Sa(n)&&"@id"in n)return n["@id"]}const r=e.indexOf(":");if(r>0){const n=e.substr(0,r),s=e.substr(r+1);if("_"===n||0===s.indexOf("//"))return e;t&&t.hasOwnProperty(n)&&za.createTermDefinition({activeCtx:a,localCtx:t,term:n,defined:i,options:o});const u=a.mappings.get(n);if(u&&u._prefix)return u["@id"]+s;if(Aa(e))return e}if(n.vocab&&"@vocab"in a)return a["@vocab"]+e;if(n.base&&"@base"in a){if(a["@base"])return Ca(Ca(o.base,a["@base"]),e)}else if(n.base)return Ca(o.base,e);return e}function Ia(a,e){if(!a||"object"!=typeof a||!e||"object"!=typeof e)return a===e;const n=Array.isArray(a);if(n!==Array.isArray(e))return!1;if(n){if(a.length!==e.length)return!1;for(let n=0;n<a.length;++n)if(!Ia(a[n],e[n]))return!1;return!0}const t=Object.keys(a),i=Object.keys(e);if(t.length!==i.length)return!1;for(const n in a){let t=a[n],i=e[n];if("@container"===n&&Array.isArray(t)&&Array.isArray(i)&&(t=t.slice().sort(),i=i.slice().sort()),!Ia(t,i))return!1}return!0}za.process=async({activeCtx:a,localCtx:e,options:n,propagate:t=!0,overrideProtected:i=!1,cycles:o=new Set})=>{if(Sa(e)&&"@context"in e&&xa(e["@context"])&&(e=e["@context"]),0===Ka(e).length)return a;const r=await n.contextResolver.resolve({activeCtx:a,context:e,documentLoader:n.documentLoader,base:n.base});Sa(r[0].document)&&"boolean"==typeof r[0].document["@propagate"]&&(t=r[0].document["@propagate"]);let s=a;t||s.previousContext||(s=s.clone(),s.previousContext=a);for(const t of r){let{document:r}=t;if(a=s,null===r){if(!i&&0!==Object.keys(a.protected).length){const i=n&&n.protectedMode||"error";if("error"===i)throw new T("Tried to nullify a context with protected terms outside of a term definition.","jsonld.SyntaxError",{code:"invalid context nullification"});if("warn"===i){console.warn("WARNING: invalid context nullification");const e=t.getProcessed(a);if(e){s=a=e;continue}const i=a;s=a=za.getInitialContext(n).clone();for(const[e,n]of Object.entries(i.protected))n&&(a.mappings[e]=O.clone(i.mappings[e]));a.protected=O.clone(i.protected),t.setProcessed(i,s);continue}throw new T("Invalid protectedMode.","jsonld.SyntaxError",{code:"invalid protected mode",context:e,protectedMode:i})}s=a=za.getInitialContext(n).clone();continue}const u=t.getProcessed(a);if(u){s=a=u;continue}if(Sa(r)&&"@context"in r&&(r=r["@context"]),!Sa(r))throw new T("Invalid JSON-LD syntax; @context must be an object.","jsonld.SyntaxError",{code:"invalid local context",context:r});s=s.clone();const l=new Map;if("@version"in r){if(1.1!==r["@version"])throw new T("Unsupported JSON-LD version: "+r["@version"],"jsonld.UnsupportedVersion",{code:"invalid @version value",context:r});if(a.processingMode&&"json-ld-1.0"===a.processingMode)throw new T("@version: "+r["@version"]+" not compatible with "+a.processingMode,"jsonld.ProcessingModeConflict",{code:"processing mode conflict",context:r});s.processingMode="json-ld-1.1",s["@version"]=r["@version"],l.set("@version",!0)}if(s.processingMode=s.processingMode||a.processingMode,"@base"in r){let a=r["@base"];if(null===a||Aa(a));else{if(!Na(a))throw new T('Invalid JSON-LD syntax; the value of "@base" in a @context must be an absolute IRI, a relative IRI, or null.',"jsonld.SyntaxError",{code:"invalid base IRI",context:r});a=Ca(s["@base"],a)}s["@base"]=a,l.set("@base",!0)}if("@vocab"in r){const a=r["@vocab"];if(null===a)delete s["@vocab"];else{if(!Ma(a))throw new T('Invalid JSON-LD syntax; the value of "@vocab" in a @context must be a string or null.',"jsonld.SyntaxError",{code:"invalid vocab mapping",context:r});if(!Aa(a)&&za.processingMode(s,1))throw new T('Invalid JSON-LD syntax; the value of "@vocab" in a @context must be an absolute IRI.',"jsonld.SyntaxError",{code:"invalid vocab mapping",context:r});s["@vocab"]=Da(s,a,{vocab:!0,base:!0},void 0,void 0,n)}l.set("@vocab",!0)}if("@language"in r){const a=r["@language"];if(null===a)delete s["@language"];else{if(!Ma(a))throw new T('Invalid JSON-LD syntax; the value of "@language" in a @context must be a string or null.',"jsonld.SyntaxError",{code:"invalid default language",context:r});s["@language"]=a.toLowerCase()}l.set("@language",!0)}if("@direction"in r){const e=r["@direction"];if("json-ld-1.0"===a.processingMode)throw new T("Invalid JSON-LD syntax; @direction not compatible with "+a.processingMode,"jsonld.SyntaxError",{code:"invalid context member",context:r});if(null===e)delete s["@direction"];else{if("ltr"!==e&&"rtl"!==e)throw new T('Invalid JSON-LD syntax; the value of "@direction" in a @context must be null, "ltr", or "rtl".',"jsonld.SyntaxError",{code:"invalid base direction",context:r});s["@direction"]=e}l.set("@direction",!0)}if("@propagate"in r){const n=r["@propagate"];if("json-ld-1.0"===a.processingMode)throw new T("Invalid JSON-LD syntax; @propagate not compatible with "+a.processingMode,"jsonld.SyntaxError",{code:"invalid context entry",context:r});if("boolean"!=typeof n)throw new T("Invalid JSON-LD syntax; @propagate value must be a boolean.","jsonld.SyntaxError",{code:"invalid @propagate value",context:e});l.set("@propagate",!0)}if("@import"in r){const t=r["@import"];if("json-ld-1.0"===a.processingMode)throw new T("Invalid JSON-LD syntax; @import not compatible with "+a.processingMode,"jsonld.SyntaxError",{code:"invalid context entry",context:r});if(!Ma(t))throw new T("Invalid JSON-LD syntax; @import must be a string.","jsonld.SyntaxError",{code:"invalid @import value",context:e});const i=await n.contextResolver.resolve({activeCtx:a,context:t,documentLoader:n.documentLoader,base:n.base});if(1!==i.length)throw new T("Invalid JSON-LD syntax; @import must reference a single context.","jsonld.SyntaxError",{code:"invalid remote context",context:e});const o=i[0].getProcessed(a);if(o)r=o;else{const n=i[0].document;if("@import"in n)throw new T("Invalid JSON-LD syntax: imported context must not include @import.","jsonld.SyntaxError",{code:"invalid context entry",context:e});for(const a in n)r.hasOwnProperty(a)||(r[a]=n[a]);i[0].setProcessed(a,r)}l.set("@import",!0)}l.set("@protected",r["@protected"]||!1);for(const a in r)if(za.createTermDefinition({activeCtx:s,localCtx:r,term:a,defined:l,options:n,overrideProtected:i}),Sa(r[a])&&"@context"in r[a]){const t=r[a]["@context"];let i=!0;if(Ma(t)){const a=Ca(n.base,t);o.has(a)?i=!1:o.add(a)}if(i)try{await za.process({activeCtx:s.clone(),localCtx:r[a]["@context"],overrideProtected:!0,options:n,cycles:o})}catch(e){throw new T("Invalid JSON-LD syntax; invalid scoped context.","jsonld.SyntaxError",{code:"invalid scoped context",context:r[a]["@context"],term:a})}}t.setProcessed(a,s)}return s},za.createTermDefinition=({activeCtx:a,localCtx:e,term:n,defined:t,options:i,overrideProtected:o=!1})=>{if(t.has(n)){if(t.get(n))return;throw new T("Cyclical context definition detected.","jsonld.CyclicalContext",{code:"cyclic IRI mapping",context:e,term:n})}let r;if(t.set(n,!1),e.hasOwnProperty(n)&&(r=e[n]),"@type"===n&&Sa(r)&&"@set"===(r["@container"]||"@set")&&za.processingMode(a,1.1)){const a=["@container","@id","@protected"],t=Object.keys(r);if(0===t.length||t.some((e=>!a.includes(e))))throw new T("Invalid JSON-LD syntax; keywords cannot be overridden.","jsonld.SyntaxError",{code:"keyword redefinition",context:e,term:n})}else{if(za.isKeyword(n))throw new T("Invalid JSON-LD syntax; keywords cannot be overridden.","jsonld.SyntaxError",{code:"keyword redefinition",context:e,term:n});if(n.match(Ba))return void console.warn('WARNING: terms beginning with "@" are reserved for future use and ignored',{term:n});if(""===n)throw new T("Invalid JSON-LD syntax; a term cannot be an empty string.","jsonld.SyntaxError",{code:"invalid term definition",context:e})}const s=a.mappings.get(n);a.mappings.has(n)&&a.mappings.delete(n);let u=!1;if((Ma(r)||null===r)&&(u=!0,r={"@id":r}),!Sa(r))throw new T("Invalid JSON-LD syntax; @context term values must be strings or objects.","jsonld.SyntaxError",{code:"invalid term definition",context:e});const l={};a.mappings.set(n,l),l.reverse=!1;const c=["@container","@id","@language","@reverse","@type"];za.processingMode(a,1.1)&&c.push("@context","@direction","@index","@nest","@prefix","@protected");for(const a in r)if(!c.includes(a))throw new T("Invalid JSON-LD syntax; a term definition must not contain "+a,"jsonld.SyntaxError",{code:"invalid term definition",context:e});const d=n.indexOf(":");if(l._termHasColon=d>0,"@reverse"in r){if("@id"in r)throw new T("Invalid JSON-LD syntax; a @reverse term definition must not contain @id.","jsonld.SyntaxError",{code:"invalid reverse property",context:e});if("@nest"in r)throw new T("Invalid JSON-LD syntax; a @reverse term definition must not contain @nest.","jsonld.SyntaxError",{code:"invalid reverse property",context:e});const o=r["@reverse"];if(!Ma(o))throw new T("Invalid JSON-LD syntax; a @context @reverse value must be a string.","jsonld.SyntaxError",{code:"invalid IRI mapping",context:e});if(!za.isKeyword(o)&&o.match(Ba))return console.warn('WARNING: values beginning with "@" are reserved for future use and ignored',{reverse:o}),void(s?a.mappings.set(n,s):a.mappings.delete(n));const u=Da(a,o,{vocab:!0,base:!1},e,t,i);if(!Aa(u))throw new T("Invalid JSON-LD syntax; a @context @reverse value must be an absolute IRI or a blank node identifier.","jsonld.SyntaxError",{code:"invalid IRI mapping",context:e});l["@id"]=u,l.reverse=!0}else if("@id"in r){let o=r["@id"];if(o&&!Ma(o))throw new T("Invalid JSON-LD syntax; a @context @id value must be an array of strings or a string.","jsonld.SyntaxError",{code:"invalid IRI mapping",context:e});if(null===o)l["@id"]=null;else{if(!za.isKeyword(o)&&o.match(Ba))return console.warn('WARNING: values beginning with "@" are reserved for future use and ignored',{id:o}),void(s?a.mappings.set(n,s):a.mappings.delete(n));if(o!==n){if(o=Da(a,o,{vocab:!0,base:!1},e,t,i),!Aa(o)&&!za.isKeyword(o))throw new T("Invalid JSON-LD syntax; a @context @id value must be an absolute IRI, a blank node identifier, or a keyword.","jsonld.SyntaxError",{code:"invalid IRI mapping",context:e});if(n.match(/(?::[^:])|\//)&&Da(a,n,{vocab:!0,base:!1},e,new Map(t).set(n,!0),i)!==o)throw new T("Invalid JSON-LD syntax; term in form of IRI must expand to definition.","jsonld.SyntaxError",{code:"invalid IRI mapping",context:e});l["@id"]=o,l._prefix=u&&!l._termHasColon&&o.match(/[:\/\?#\[\]@]$/)}}}if(!("@id"in l))if(l._termHasColon){const o=n.substr(0,d);if(e.hasOwnProperty(o)&&za.createTermDefinition({activeCtx:a,localCtx:e,term:o,defined:t,options:i}),a.mappings.has(o)){const e=n.substr(d+1);l["@id"]=a.mappings.get(o)["@id"]+e}else l["@id"]=n}else if("@type"===n)l["@id"]=n;else{if(!("@vocab"in a))throw new T("Invalid JSON-LD syntax; @context terms must define an @id.","jsonld.SyntaxError",{code:"invalid IRI mapping",context:e,term:n});l["@id"]=a["@vocab"]+n}if((!0===r["@protected"]||!0===t.get("@protected")&&!1!==r["@protected"])&&(a.protected[n]=!0,l.protected=!0),t.set(n,!0),"@type"in r){let n=r["@type"];if(!Ma(n))throw new T("Invalid JSON-LD syntax; an @context @type value must be a string.","jsonld.SyntaxError",{code:"invalid type mapping",context:e});if("@json"===n||"@none"===n){if(za.processingMode(a,1))throw new T(`Invalid JSON-LD syntax; an @context @type value must not be "${n}" in JSON-LD 1.0 mode.`,"jsonld.SyntaxError",{code:"invalid type mapping",context:e})}else if("@id"!==n&&"@vocab"!==n){if(n=Da(a,n,{vocab:!0,base:!1},e,t,i),!Aa(n))throw new T("Invalid JSON-LD syntax; an @context @type value must be an absolute IRI.","jsonld.SyntaxError",{code:"invalid type mapping",context:e});if(0===n.indexOf("_:"))throw new T("Invalid JSON-LD syntax; an @context @type value must be an IRI, not a blank node identifier.","jsonld.SyntaxError",{code:"invalid type mapping",context:e})}l["@type"]=n}if("@container"in r){const n=Ma(r["@container"])?[r["@container"]]:r["@container"]||[],t=["@list","@set","@index","@language"];let i=!0;const o=n.includes("@set");if(za.processingMode(a,1.1)){if(t.push("@graph","@id","@type"),n.includes("@list")){if(1!==n.length)throw new T("Invalid JSON-LD syntax; @context @container with @list must have no other values","jsonld.SyntaxError",{code:"invalid container mapping",context:e})}else if(n.includes("@graph")){if(n.some((a=>"@graph"!==a&&"@id"!==a&&"@index"!==a&&"@set"!==a)))throw new T("Invalid JSON-LD syntax; @context @container with @graph must have no other values other than @id, @index, and @set","jsonld.SyntaxError",{code:"invalid container mapping",context:e})}else i&=n.length<=(o?2:1);if(n.includes("@type")&&(l["@type"]=l["@type"]||"@id",!["@id","@vocab"].includes(l["@type"])))throw new T("Invalid JSON-LD syntax; container: @type requires @type to be @id or @vocab.","jsonld.SyntaxError",{code:"invalid type mapping",context:e})}else i&=!xa(r["@container"]),i&=n.length<=1;if(i&=n.every((a=>t.includes(a))),i&=!(o&&n.includes("@list")),!i)throw new T("Invalid JSON-LD syntax; @context @container value must be one of the following: "+t.join(", "),"jsonld.SyntaxError",{code:"invalid container mapping",context:e});if(l.reverse&&!n.every((a=>["@index","@set"].includes(a))))throw new T("Invalid JSON-LD syntax; @context @container value for a @reverse type definition must be @index or @set.","jsonld.SyntaxError",{code:"invalid reverse property",context:e});l["@container"]=n}if("@index"in r){if(!("@container"in r)||!l["@container"].includes("@index"))throw new T(`Invalid JSON-LD syntax; @index without @index in @container: "${r["@index"]}" on term "${n}".`,"jsonld.SyntaxError",{code:"invalid term definition",context:e});if(!Ma(r["@index"])||0===r["@index"].indexOf("@"))throw new T(`Invalid JSON-LD syntax; @index must expand to an IRI: "${r["@index"]}" on term "${n}".`,"jsonld.SyntaxError",{code:"invalid term definition",context:e});l["@index"]=r["@index"]}if("@context"in r&&(l["@context"]=r["@context"]),"@language"in r&&!("@type"in r)){let a=r["@language"];if(null!==a&&!Ma(a))throw new T("Invalid JSON-LD syntax; @context @language value must be a string or null.","jsonld.SyntaxError",{code:"invalid language mapping",context:e});null!==a&&(a=a.toLowerCase()),l["@language"]=a}if("@prefix"in r){if(n.match(/:|\//))throw new T("Invalid JSON-LD syntax; @context @prefix used on a compact IRI term","jsonld.SyntaxError",{code:"invalid term definition",context:e});if(za.isKeyword(l["@id"]))throw new T("Invalid JSON-LD syntax; keywords may not be used as prefixes","jsonld.SyntaxError",{code:"invalid term definition",context:e});if("boolean"!=typeof r["@prefix"])throw new T("Invalid JSON-LD syntax; @context value for @prefix must be boolean","jsonld.SyntaxError",{code:"invalid @prefix value",context:e});l._prefix=!0===r["@prefix"]}if("@direction"in r){const a=r["@direction"];if(null!==a&&"ltr"!==a&&"rtl"!==a)throw new T('Invalid JSON-LD syntax; @direction value must be null, "ltr", or "rtl".',"jsonld.SyntaxError",{code:"invalid base direction",context:e});l["@direction"]=a}if("@nest"in r){const a=r["@nest"];if(!Ma(a)||"@nest"!==a&&0===a.indexOf("@"))throw new T("Invalid JSON-LD syntax; @context @nest value must be a string which is not a keyword other than @nest.","jsonld.SyntaxError",{code:"invalid @nest value",context:e});l["@nest"]=a}
// disallow aliasing @context and @preserve
const g=l["@id"];if("@context"===g||"@preserve"===g)throw new T("Invalid JSON-LD syntax; @context and @preserve cannot be aliased.","jsonld.SyntaxError",{code:"invalid keyword alias",context:e});if(s&&s.protected&&!o&&(a.protected[n]=!0,l.protected=!0,!Ia(s,l))){const a=i&&i.protectedMode||"error";if("error"===a)throw new T(`Invalid JSON-LD syntax; tried to redefine "${n}" which is a protected term.`,"jsonld.SyntaxError",{code:"protected term redefinition",context:e,term:n});if("warn"===a)return void console.warn("WARNING: protected term redefinition",{term:n});throw new T("Invalid protectedMode.","jsonld.SyntaxError",{code:"invalid protected mode",context:e,term:n,protectedMode:a})}},za.expandIri=(a,e,n,t)=>Da(a,e,n,void 0,void 0,t),za.getInitialContext=a=>{const e=JSON.stringify({processingMode:a.processingMode}),n=La.get(e);if(n)return n;const t={processingMode:a.processingMode,mappings:new Map,inverse:null,getInverse:function(){const a=this;if(a.inverse)return a.inverse;const e=a.inverse={},n=a.fastCurieMap={},t={},r=(a["@language"]||"@none").toLowerCase(),s=a["@direction"],u=a.mappings,l=[...u.keys()].sort(Ta);for(const a of l){const i=u.get(a);if(null===i)continue;let l=i["@container"]||"@none";if(l=[].concat(l).sort().join(""),null===i["@id"])continue;const c=Ka(i["@id"]);for(const u of c){let c=e[u];const d=za.isKeyword(u);if(c)d||i._termHasColon||t[u].push(a);else if(e[u]=c={},!d&&!i._termHasColon){t[u]=[a];const e={iri:u,terms:t[u]};u[0]in n?n[u[0]].push(e):n[u[0]]=[e]}if(c[l]||(c[l]={"@language":{},"@type":{},"@any":{}}),c=c[l],o(a,c["@any"],"@none"),i.reverse)o(a,c["@type"],"@reverse");else if("@none"===i["@type"])o(a,c["@any"],"@none"),o(a,c["@language"],"@none"),o(a,c["@type"],"@none");else if("@type"in i)o(a,c["@type"],i["@type"]);else if("@language"in i&&"@direction"in i){const e=i["@language"],n=i["@direction"];o(a,c["@language"],e&&n?`${e}_${n}`.toLowerCase():e?e.toLowerCase():n?`_${n}`:"@null")}else"@language"in i?o(a,c["@language"],(i["@language"]||"@null").toLowerCase()):"@direction"in i?i["@direction"]?o(a,c["@language"],`_${i["@direction"]}`):o(a,c["@language"],"@none"):s?(o(a,c["@language"],`_${s}`),o(a,c["@language"],"@none"),o(a,c["@type"],"@none")):(o(a,c["@language"],r),o(a,c["@language"],"@none"),o(a,c["@type"],"@none"))}}for(const a in n)i(n,a,1);return e},clone:function(){const a={};return a.mappings=O.clone(this.mappings),a.clone=this.clone,a.inverse=null,a.getInverse=this.getInverse,a.protected=O.clone(this.protected),this.previousContext&&(a.previousContext=this.previousContext.clone()),a.revertToPreviousContext=this.revertToPreviousContext,"@base"in this&&(a["@base"]=this["@base"]),"@language"in this&&(a["@language"]=this["@language"]),"@vocab"in this&&(a["@vocab"]=this["@vocab"]),a},revertToPreviousContext:function(){return this.previousContext?this.previousContext.clone():this},protected:{}};return 1e4===La.size&&La.clear(),La.set(e,t),t;function i(a,e,n){const t=a[e],o=a[e]={};let r,s;for(const a of t)r=a.iri,s=n>=r.length?"":r[n],s in o?o[s].push(a):o[s]=[a];for(const a in o)""!==a&&i(o,a,n+1)}function o(a,e,n){e.hasOwnProperty(n)||(e[n]=a)}},za.getContextValue=(a,e,n)=>{if(null===e){if("@context"===n)return;return null}if(a.mappings.has(e)){const t=a.mappings.get(e);if(ja(n))return t;if(t.hasOwnProperty(n))return t[n]}return"@language"===n&&n in a||"@direction"===n&&n in a?a[n]:"@context"!==n?null:void 0},za.processingMode=(a,e)=>e.toString()>="1.1"?!a.processingMode||a.processingMode>="json-ld-"+e.toString():"json-ld-1.0"===a.processingMode,za.isKeyword=a=>{if(!Ma(a)||"@"!==a[0])return!1;switch(a){case"@base":case"@container":case"@context":case"@default":case"@direction":case"@embed":case"@explicit":case"@graph":case"@id":case"@included":case"@index":case"@json":case"@language":case"@list":case"@nest":case"@none":case"@omitDefault":case"@prefix":case"@preserve":case"@protected":case"@requireAll":case"@reverse":case"@set":case"@type":case"@value":case"@version":case"@vocab":return!0}return!1};const{isArray:Oa,isObject:qa,isEmptyObject:Ea,isString:Ga,isUndefined:Ra}=N,{isList:Wa,isValue:Ha,isGraph:_a,isSubject:Fa}=K,{expandIri:Ua,getContextValue:Ya,isKeyword:Ja,process:Va,processingMode:Za}=Pa,{isAbsolute:$a}=G,{addValue:Qa,asArray:Xa,getValues:ae,validateTypeValue:ee}=O,ne={};var te=ne;const ie=/^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;async function oe({activeCtx:a,activeProperty:e,expandedActiveProperty:n,element:t,expandedParent:i,options:o={},insideList:r,typeKey:s,typeScopedContext:u,expansionMap:l}){const c=Object.keys(t).sort(),d=[];let g;const h=t[s]&&"@json"===Ua(a,Oa(t[s])?t[s][0]:t[s],{vocab:!0},o);for(const s of c){let c,m=t[s];if("@context"===s)continue;let p=Ua(a,s,{vocab:!0},o);if((null===p||!$a(p)&&!Ja(p))&&(p=l({unmappedProperty:s,activeCtx:a,activeProperty:e,parent:t,options:o,insideList:r,value:m,expandedParent:i}),void 0===p))continue;if(Ja(p)){if("@reverse"===n)throw new T("Invalid JSON-LD syntax; a keyword cannot be used as a @reverse property.","jsonld.SyntaxError",{code:"invalid reverse property map",value:m});if(p in i&&"@included"!==p&&"@type"!==p)throw new T("Invalid JSON-LD syntax; colliding keywords detected.","jsonld.SyntaxError",{code:"colliding keywords",keyword:p})}if("@id"===p){if(!Ga(m)){if(!o.isFrame)throw new T('Invalid JSON-LD syntax; "@id" value must a string.',"jsonld.SyntaxError",{code:"invalid @id value",value:m});if(qa(m)){if(!Ea(m))throw new T('Invalid JSON-LD syntax; "@id" value an empty object or array of strings, if framing',"jsonld.SyntaxError",{code:"invalid @id value",value:m})}else{if(!Oa(m))throw new T('Invalid JSON-LD syntax; "@id" value an empty object or array of strings, if framing',"jsonld.SyntaxError",{code:"invalid @id value",value:m});if(!m.every((a=>Ga(a))))throw new T('Invalid JSON-LD syntax; "@id" value an empty object or array of strings, if framing',"jsonld.SyntaxError",{code:"invalid @id value",value:m})}}Qa(i,"@id",Xa(m).map((e=>Ga(e)?Ua(a,e,{base:!0},o):e)),{propertyIsArray:o.isFrame});continue}if("@type"===p){qa(m)&&(m=Object.fromEntries(Object.entries(m).map((([a,e])=>[Ua(u,a,{vocab:!0}),Xa(e).map((a=>Ua(u,a,{base:!0,vocab:!0})))])))),ee(m,o.isFrame),Qa(i,"@type",Xa(m).map((a=>Ga(a)?Ua(u,a,{base:!0,vocab:!0},o):a)),{propertyIsArray:o.isFrame});continue}if("@included"===p&&Za(a,1.1)){const n=Xa(await ne.expand({activeCtx:a,activeProperty:e,element:m,options:o,expansionMap:l}));if(!n.every((a=>Fa(a))))throw new T("Invalid JSON-LD syntax; values of @included must expand to node objects.","jsonld.SyntaxError",{code:"invalid @included value",value:m});Qa(i,"@included",n,{propertyIsArray:!0});continue}if("@graph"===p&&!qa(m)&&!Oa(m))throw new T('Invalid JSON-LD syntax; "@graph" value must not be an object or an array.',"jsonld.SyntaxError",{code:"invalid @graph value",value:m});if("@value"===p){g=m,h&&Za(a,1.1)?i["@value"]=m:Qa(i,"@value",m,{propertyIsArray:o.isFrame});continue}if("@language"===p){if(null===m)continue;if(!Ga(m)&&!o.isFrame)throw new T('Invalid JSON-LD syntax; "@language" value must be a string.',"jsonld.SyntaxError",{code:"invalid language-tagged string",value:m});m=Xa(m).map((a=>Ga(a)?a.toLowerCase():a));for(const a of m)Ga(a)&&!a.match(ie)&&console.warn(`@language must be valid BCP47: ${a}`);Qa(i,"@language",m,{propertyIsArray:o.isFrame});continue}if("@direction"===p){if(!Ga(m)&&!o.isFrame)throw new T('Invalid JSON-LD syntax; "@direction" value must be a string.',"jsonld.SyntaxError",{code:"invalid base direction",value:m});m=Xa(m);for(const a of m)if(Ga(a)&&"ltr"!==a&&"rtl"!==a)throw new T('Invalid JSON-LD syntax; "@direction" must be "ltr" or "rtl".',"jsonld.SyntaxError",{code:"invalid base direction",value:m});Qa(i,"@direction",m,{propertyIsArray:o.isFrame});continue}if("@index"===p){if(!Ga(m))throw new T('Invalid JSON-LD syntax; "@index" value must be a string.',"jsonld.SyntaxError",{code:"invalid @index value",value:m});Qa(i,"@index",m);continue}if("@reverse"===p){if(!qa(m))throw new T('Invalid JSON-LD syntax; "@reverse" value must be an object.',"jsonld.SyntaxError",{code:"invalid @reverse value",value:m});if(c=await ne.expand({activeCtx:a,activeProperty:"@reverse",element:m,options:o,expansionMap:l}),"@reverse"in c)for(const a in c["@reverse"])Qa(i,a,c["@reverse"][a],{propertyIsArray:!0});let e=i["@reverse"]||null;for(const a in c){if("@reverse"===a)continue;null===e&&(e=i["@reverse"]={}),Qa(e,a,[],{propertyIsArray:!0});const n=c[a];for(let t=0;t<n.length;++t){const i=n[t];if(Ha(i)||Wa(i))throw new T('Invalid JSON-LD syntax; "@reverse" value must not be a @value or an @list.',"jsonld.SyntaxError",{code:"invalid reverse property value",value:c});Qa(e,a,i,{propertyIsArray:!0})}}continue}if("@nest"===p){d.push(s);continue}let b=a;const f=Ya(a,s,"@context");Ra(f)||(b=await Va({activeCtx:a,localCtx:f,propagate:!0,overrideProtected:!0,options:o}));const y=Ya(b,s,"@container")||[];if(y.includes("@language")&&qa(m))c=se(b,m,Ya(b,s,"@direction"),o);else if(y.includes("@index")&&qa(m)){const e=y.includes("@graph"),n=Ya(b,s,"@index")||"@index",t="@index"!==n&&Ua(a,n,{vocab:!0},o);c=await ue({activeCtx:b,options:o,activeProperty:s,value:m,expansionMap:l,asGraph:e,indexKey:n,propertyIndex:t})}else if(y.includes("@id")&&qa(m)){const a=y.includes("@graph");c=await ue({activeCtx:b,options:o,activeProperty:s,value:m,expansionMap:l,asGraph:a,indexKey:"@id"})}else if(y.includes("@type")&&qa(m))c=await ue({activeCtx:b.revertToPreviousContext(),options:o,activeProperty:s,value:m,expansionMap:l,asGraph:!1,indexKey:"@type"});else{const t="@list"===p;if(t||"@set"===p){let a=e;t&&"@graph"===n&&(a=null),c=await ne.expand({activeCtx:b,activeProperty:a,element:m,options:o,insideList:t,expansionMap:l})}else c="@json"===Ya(a,s,"@type")?{"@type":"@json","@value":m}:await ne.expand({activeCtx:b,activeProperty:s,element:m,options:o,insideList:!1,expansionMap:l})}if(null!==c||"@value"===p||(c=l({unmappedValue:m,expandedProperty:p,activeCtx:b,activeProperty:e,parent:t,options:o,insideList:r,key:s,expandedParent:i}),void 0!==c))if("@list"!==p&&!Wa(c)&&y.includes("@list")&&(c={"@list":Xa(c)}),y.includes("@graph")&&!y.some((a=>"@id"===a||"@index"===a))&&(c=Xa(c).map((a=>({"@graph":Xa(a)})))),b.mappings.has(s)&&b.mappings.get(s).reverse){const a=i["@reverse"]=i["@reverse"]||{};c=Xa(c);for(let e=0;e<c.length;++e){const n=c[e];if(Ha(n)||Wa(n))throw new T('Invalid JSON-LD syntax; "@reverse" value must not be a @value or an @list.',"jsonld.SyntaxError",{code:"invalid reverse property value",value:c});Qa(a,p,n,{propertyIsArray:!0})}}else Qa(i,p,c,{propertyIsArray:!0})}if("@value"in i)if("@json"===i["@type"]&&Za(a,1.1));else if((qa(g)||Oa(g))&&!o.isFrame)throw new T('Invalid JSON-LD syntax; "@value" value must not be an object or an array.',"jsonld.SyntaxError",{code:"invalid value object value",value:g});for(const c of d){const d=Oa(t[c])?t[c]:[t[c]];for(const t of d){if(!qa(t)||Object.keys(t).some((e=>"@value"===Ua(a,e,{vocab:!0},o))))throw new T("Invalid JSON-LD syntax; nested value must be a node object.","jsonld.SyntaxError",{code:"invalid @nest value",value:t});await oe({activeCtx:a,activeProperty:e,expandedActiveProperty:n,element:t,expandedParent:i,options:o,insideList:r,typeScopedContext:u,typeKey:s,expansionMap:l})}}}function re({activeCtx:a,activeProperty:e,value:n,options:t}){if(null==n)return null;const i=Ua(a,e,{vocab:!0},t);if("@id"===i)return Ua(a,n,{base:!0},t);if("@type"===i)return Ua(a,n,{vocab:!0,base:!0},t);const o=Ya(a,e,"@type");if(("@id"===o||"@graph"===i)&&Ga(n))return{"@id":Ua(a,n,{base:!0},t)};if("@vocab"===o&&Ga(n))return{"@id":Ua(a,n,{vocab:!0,base:!0},t)};if(Ja(i))return n;const r={};if(o&&!["@id","@vocab","@none"].includes(o))r["@type"]=o;else if(Ga(n)){const n=Ya(a,e,"@language");null!==n&&(r["@language"]=n);const t=Ya(a,e,"@direction");null!==t&&(r["@direction"]=t)}return["boolean","number","string"].includes(typeof n)||(n=n.toString()),r["@value"]=n,r}function se(a,e,n,t){const i=[],o=Object.keys(e).sort();for(const r of o){const o=Ua(a,r,{vocab:!0},t);let s=e[r];Oa(s)||(s=[s]);for(const a of s){if(null===a)continue;if(!Ga(a))throw new T("Invalid JSON-LD syntax; language map values must be strings.","jsonld.SyntaxError",{code:"invalid language map value",languageMap:e});const t={"@value":a};"@none"!==o&&(t["@language"]=r.toLowerCase()),n&&(t["@direction"]=n),i.push(t)}}return i}async function ue({activeCtx:a,options:e,activeProperty:n,value:t,expansionMap:i,asGraph:o,indexKey:r,propertyIndex:s}){const u=[],l=Object.keys(t).sort(),c="@type"===r;for(let d of l){if(c){const n=Ya(a,d,"@context");Ra(n)||(a=await Va({activeCtx:a,localCtx:n,propagate:!1,options:e}))}let l,g=t[d];Oa(g)||(g=[g]),g=await ne.expand({activeCtx:a,activeProperty:n,element:g,options:e,insideList:!1,insideIndex:!0,expansionMap:i}),l=s?"@none"===d?"@none":re({activeCtx:a,activeProperty:r,value:d,options:e}):Ua(a,d,{vocab:!0},e),"@id"===r?d=Ua(a,d,{base:!0},e):c&&(d=l);for(let a of g){if(o&&!_a(a)&&(a={"@graph":[a]}),"@type"===r)"@none"===l||(a["@type"]?a["@type"]=[d].concat(a["@type"]):a["@type"]=[d]);else{if(Ha(a)&&!["@language","@type","@index"].includes(r))throw new T(`Invalid JSON-LD syntax; Attempt to add illegal key to value object: "${r}".`,"jsonld.SyntaxError",{code:"invalid value object",value:a});s?"@none"!==l&&Qa(a,s,l,{propertyIsArray:!0,prependValue:!0}):"@none"===l||r in a||(a[r]=d)}u.push(a)}}return u}ne.expand=async({activeCtx:a,activeProperty:e=null,element:n,options:t={},insideList:i=!1,insideIndex:o=!1,typeScopedContext:r=null,expansionMap:s=(()=>{})})=>{if(null==n)return null;if("@default"===e&&(t=Object.assign({},t,{isFrame:!1})),!Oa(n)&&!qa(n)){if(!i&&(null===e||"@graph"===Ua(a,e,{vocab:!0},t))){const o=await s({unmappedValue:n,activeCtx:a,activeProperty:e,options:t,insideList:i});return void 0===o?null:o}return re({activeCtx:a,activeProperty:e,value:n,options:t})}if(Oa(n)){let u=[];const l=Ya(a,e,"@container")||[];i=i||l.includes("@list");for(let l=0;l<n.length;++l){let c=await ne.expand({activeCtx:a,activeProperty:e,element:n[l],options:t,expansionMap:s,insideIndex:o,typeScopedContext:r});i&&Oa(c)&&(c={"@list":c}),null===c&&(c=await s({unmappedValue:n[l],activeCtx:a,activeProperty:e,parent:n,index:l,options:t,expandedParent:u,insideList:i}),void 0===c)||(Oa(c)?u=u.concat(c):u.push(c))}return u}const u=Ua(a,e,{vocab:!0},t),l=Ya(a,e,"@context");r=r||(a.previousContext?a:null);let c=Object.keys(n).sort(),d=!o;if(d&&r&&c.length<=2&&!c.includes("@context"))for(const e of c){const n=Ua(r,e,{vocab:!0},t);if("@value"===n){d=!1,a=r;break}if("@id"===n&&1===c.length){d=!1;break}}d&&(a=a.revertToPreviousContext()),Ra(l)||(a=await Va({activeCtx:a,localCtx:l,propagate:!0,overrideProtected:!0,options:t})),"@context"in n&&(a=await Va({activeCtx:a,localCtx:n["@context"],options:t})),r=a;let g=null;for(const e of c)if("@type"===Ua(a,e,{vocab:!0},t)){g=g||e;const i=n[e],o=Array.isArray(i)?i.length>1?i.slice().sort():i:[i];for(const e of o){const n=Ya(r,e,"@context");Ra(n)||(a=await Va({activeCtx:a,localCtx:n,options:t,propagate:!1}))}}let h={};await oe({activeCtx:a,activeProperty:e,expandedActiveProperty:u,element:n,expandedParent:h,options:t,insideList:i,typeKey:g,typeScopedContext:r,expansionMap:s}),c=Object.keys(h);let m=c.length;if("@value"in h){if("@type"in h&&("@language"in h||"@direction"in h))throw new T('Invalid JSON-LD syntax; an element containing "@value" may not contain both "@type" and either "@language" or "@direction".',"jsonld.SyntaxError",{code:"invalid value object",element:h});let o=m-1;if("@type"in h&&(o-=1),"@index"in h&&(o-=1),"@language"in h&&(o-=1),"@direction"in h&&(o-=1),0!==o)throw new T('Invalid JSON-LD syntax; an element containing "@value" may only have an "@index" property and either "@type" or either or both "@language" or "@direction".',"jsonld.SyntaxError",{code:"invalid value object",element:h});const r=null===h["@value"]?[]:Xa(h["@value"]),u=ae(h,"@type");if(Za(a,1.1)&&u.includes("@json")&&1===u.length);else if(0===r.length){const o=await s({unmappedValue:h,activeCtx:a,activeProperty:e,element:n,options:t,insideList:i});h=void 0!==o?o:null}else{if(!r.every((a=>Ga(a)||Ea(a)))&&"@language"in h)throw new T("Invalid JSON-LD syntax; only strings may be language-tagged.","jsonld.SyntaxError",{code:"invalid language-tagged value",element:h});if(!u.every((a=>$a(a)&&!(Ga(a)&&0===a.indexOf("_:"))||Ea(a))))throw new T('Invalid JSON-LD syntax; an element containing "@value" and "@type" must have an absolute IRI for the value of "@type".',"jsonld.SyntaxError",{code:"invalid typed value",element:h})}}else if("@type"in h&&!Oa(h["@type"]))h["@type"]=[h["@type"]];else if("@set"in h||"@list"in h){if(m>1&&(2!==m||!("@index"in h)))throw new T('Invalid JSON-LD syntax; if an element has the property "@set" or "@list", then it can have at most one other property that is "@index".',"jsonld.SyntaxError",{code:"invalid set or list object",element:h});"@set"in h&&(h=h["@set"],c=Object.keys(h),m=c.length)}else if(1===m&&"@language"in h){const o=await s(h,{unmappedValue:h,activeCtx:a,activeProperty:e,element:n,options:t,insideList:i});h=void 0!==o?o:null}if(qa(h)&&!t.keepFreeFloatingNodes&&!i&&(null===e||"@graph"===u)&&(0===m||"@value"in h||"@list"in h||1===m&&"@id"in h)){const o=await s({unmappedValue:h,activeCtx:a,activeProperty:e,element:n,options:t,insideList:i});h=void 0!==o?o:null}return h};const{isKeyword:le}=Pa,ce={};var de=ce;ce.createMergedNodeMap=(a,e)=>{const n=(e=e||{}).issuer||new O.IdentifierIssuer("_:b"),t={"@default":{}};return ce.createNodeMap(a,t,"@default",n),ce.mergeNodeMaps(t)},ce.createNodeMap=(a,e,n,t,i,o)=>{if(N.isArray(a)){for(const i of a)ce.createNodeMap(i,e,n,t,void 0,o);return}if(!N.isObject(a))return void(o&&o.push(a));if(K.isValue(a)){if("@type"in a){let e=a["@type"];0===e.indexOf("_:")&&(a["@type"]=e=t.getId(e))}return void(o&&o.push(a))}if(o&&K.isList(a)){const r=[];return ce.createNodeMap(a["@list"],e,n,t,i,r),void o.push({"@list":r})}if("@type"in a){const e=a["@type"];for(const a of e)0===a.indexOf("_:")&&t.getId(a)}N.isUndefined(i)&&(i=K.isBlankNode(a)?t.getId(a["@id"]):a["@id"]),o&&o.push({"@id":i});const r=e[n],s=r[i]=r[i]||{};s["@id"]=i;const u=Object.keys(a).sort();for(let o of u){if("@id"===o)continue;if("@reverse"===o){const o={"@id":i},s=a["@reverse"];for(const a in s){const i=s[a];for(const s of i){let i=s["@id"];K.isBlankNode(s)&&(i=t.getId(i)),ce.createNodeMap(s,e,n,t,i),O.addValue(r[i],a,o,{propertyIsArray:!0,allowDuplicate:!1})}}continue}if("@graph"===o){i in e||(e[i]={}),ce.createNodeMap(a[o],e,i,t);continue}if("@included"===o){ce.createNodeMap(a[o],e,n,t);continue}if("@type"!==o&&le(o)){if("@index"===o&&o in s&&(a[o]!==s[o]||a[o]["@id"]!==s[o]["@id"]))throw new T("Invalid JSON-LD syntax; conflicting @index property detected.","jsonld.SyntaxError",{code:"conflicting indexes",subject:s});s[o]=a[o];continue}const u=a[o];if(0===o.indexOf("_:")&&(o=t.getId(o)),0!==u.length)for(let a of u)if("@type"===o&&(a=0===a.indexOf("_:")?t.getId(a):a),K.isSubject(a)||K.isSubjectReference(a)){if("@id"in a&&!a["@id"])continue;const i=K.isBlankNode(a)?t.getId(a["@id"]):a["@id"];O.addValue(s,o,{"@id":i},{propertyIsArray:!0,allowDuplicate:!1}),ce.createNodeMap(a,e,n,t,i)}else if(K.isValue(a))O.addValue(s,o,a,{propertyIsArray:!0,allowDuplicate:!1});else if(K.isList(a)){const r=[];ce.createNodeMap(a["@list"],e,n,t,i,r),a={"@list":r},O.addValue(s,o,a,{propertyIsArray:!0,allowDuplicate:!1})}else ce.createNodeMap(a,e,n,t,i),O.addValue(s,o,a,{propertyIsArray:!0,allowDuplicate:!1});else O.addValue(s,o,[],{propertyIsArray:!0})}},ce.mergeNodeMapGraphs=a=>{const e={};for(const n of Object.keys(a).sort())for(const t of Object.keys(a[n]).sort()){const i=a[n][t];t in e||(e[t]={"@id":t});const o=e[t];for(const a of Object.keys(i).sort())if(le(a)&&"@type"!==a)o[a]=O.clone(i[a]);else for(const e of i[a])O.addValue(o,a,O.clone(e),{propertyIsArray:!0,allowDuplicate:!1})}return e},ce.mergeNodeMaps=a=>{const e=a["@default"],n=Object.keys(a).sort();for(const t of n){if("@default"===t)continue;const n=a[t];let i=e[t];i?"@graph"in i||(i["@graph"]=[]):e[t]=i={"@id":t,"@graph":[]};const o=i["@graph"];for(const a of Object.keys(n).sort()){const e=n[a];K.isSubjectReference(e)||o.push(e)}}return e};const{isSubjectReference:ge}=K,{createMergedNodeMap:he}=de,me={};var pe=me;me.flatten=a=>{const e=he(a),n=[],t=Object.keys(e).sort();for(let a=0;a<t.length;++a){const i=e[t[a]];ge(i)||n.push(i)}return n};const be="http://www.w3.org/1999/02/22-rdf-syntax-ns#",fe="http://www.w3.org/2001/XMLSchema#";var ye={LINK_HEADER_REL:"http://www.w3.org/ns/json-ld#context",LINK_HEADER_CONTEXT:"http://www.w3.org/ns/json-ld#context",RDF:be,RDF_LIST:be+"List",RDF_FIRST:be+"first",RDF_REST:be+"rest",RDF_NIL:be+"nil",RDF_TYPE:be+"type",RDF_PLAIN_LITERAL:be+"PlainLiteral",RDF_XML_LITERAL:be+"XMLLiteral",RDF_JSON_LITERAL:be+"JSON",RDF_OBJECT:be+"object",RDF_LANGSTRING:be+"langString",XSD:fe,XSD_BOOLEAN:fe+"boolean",XSD_DOUBLE:fe+"double",XSD_INTEGER:fe+"integer",XSD_STRING:fe+"string"};const{RDF_LIST:ke,RDF_FIRST:ve,RDF_REST:we,RDF_NIL:xe,RDF_TYPE:Se,RDF_JSON_LITERAL:Me,XSD_BOOLEAN:je,XSD_DOUBLE:Ae,XSD_INTEGER:Ne,XSD_STRING:Ce}=ye,Ke=/^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/,Te={};var Le=Te;function Be(a,e,n){if(a.termType.endsWith("Node"))return{"@id":a.value};const t={"@value":a.value};if(a.language)t["@language"]=a.language;else{let i=a.datatype.value;if(i||(i=Ce),i===Me){i="@json";try{t["@value"]=JSON.parse(t["@value"])}catch(a){throw new T("JSON literal could not be parsed.","jsonld.InvalidJsonLiteral",{code:"invalid JSON literal",value:t["@value"],cause:a})}}if(e){if(i===je)"true"===t["@value"]?t["@value"]=!0:"false"===t["@value"]&&(t["@value"]=!1);else if(N.isNumeric(t["@value"]))if(i===Ne){const a=parseInt(t["@value"],10);a.toFixed(0)===t["@value"]&&(t["@value"]=a)}else i===Ae&&(t["@value"]=parseFloat(t["@value"]));[je,Ne,Ae,Ce].includes(i)||(t["@type"]=i)}else if("i18n-datatype"===n&&i.startsWith("https://www.w3.org/ns/i18n#")){const[,a,e]=i.split(/[#_]/);a.length>0&&(t["@language"]=a,a.match(Ke)||console.warn(`@language must be valid BCP47: ${a}`)),t["@direction"]=e}else i!==Ce&&(t["@type"]=i)}return t}Te.fromRDF=async(a,{useRdfType:e=!1,useNativeTypes:n=!1,rdfDirection:t=null})=>{const i={},o={"@default":i},r={};for(const s of a){const a="DefaultGraph"===s.graph.termType?"@default":s.graph.value;a in o||(o[a]={}),"@default"===a||a in i||(i[a]={"@id":a});const u=o[a],l=s.subject.value,c=s.predicate.value,d=s.object;l in u||(u[l]={"@id":l});const g=u[l],h=d.termType.endsWith("Node");if(h&&!(d.value in u)&&(u[d.value]={"@id":d.value}),c===Se&&!e&&h){O.addValue(g,"@type",d.value,{propertyIsArray:!0});continue}const m=Be(d,n,t);if(O.addValue(g,c,m,{propertyIsArray:!0}),h)if(d.value===xe){const a=u[d.value];"usages"in a||(a.usages=[]),a.usages.push({node:g,property:c,value:m})}else d.value in r?r[d.value]=!1:r[d.value]={node:g,property:c,value:m}}for(const a in o){const e=o[a];if(!(xe in e))continue;const n=e[xe];if(n.usages){for(let a of n.usages){let n=a.node,t=a.property,i=a.value;const o=[],s=[];let u=Object.keys(n).length;for(;t===we&&N.isObject(r[n["@id"]])&&N.isArray(n[ve])&&1===n[ve].length&&N.isArray(n[we])&&1===n[we].length&&(3===u||4===u&&N.isArray(n["@type"])&&1===n["@type"].length&&n["@type"][0]===ke)&&(o.push(n[ve][0]),s.push(n["@id"]),a=r[n["@id"]],n=a.node,t=a.property,i=a.value,u=Object.keys(n).length,K.isBlankNode(n)););delete i["@id"],i["@list"]=o.reverse();for(const a of s)delete e[a]}delete n.usages}}const s=[],u=Object.keys(i).sort();for(const a of u){const e=i[a];if(a in o){const n=e["@graph"]=[],t=o[a],i=Object.keys(t).sort();for(const a of i){const e=t[a];K.isSubjectReference(e)||n.push(e)}}K.isSubjectReference(e)||s.push(e)}return s};var ze=function a(e){return null===e||"object"!=typeof e||null!=e.toJSON?JSON.stringify(e):Array.isArray(e)?"["+e.reduce(((e,n,t)=>e+(0===t?"":",")+a(void 0===n||"symbol"==typeof n?null:n)),"")+"]":"{"+Object.keys(e).sort().reduce(((n,t,i)=>void 0===e[t]||"symbol"==typeof e[t]?n:n+(0===n.length?"":",")+a(t)+":"+a(e[t])),"")+"}"};const{createNodeMap:Pe}=de,{isKeyword:De}=Pa,{RDF_FIRST:Ie,RDF_REST:Oe,RDF_NIL:qe,RDF_TYPE:Ee,RDF_JSON_LITERAL:Ge,RDF_LANGSTRING:Re,XSD_BOOLEAN:We,XSD_DOUBLE:He,XSD_INTEGER:_e,XSD_STRING:Fe}=ye,{isAbsolute:Ue}=G,Ye={};var Je=Ye;function Ve(a,e,n,t,i){const o=Object.keys(e).sort();for(const r of o){const o=e[r],s=Object.keys(o).sort();for(let e of s){const s=o[e];if("@type"===e)e=Ee;else if(De(e))continue;for(const o of s){const s={termType:r.startsWith("_:")?"BlankNode":"NamedNode",value:r};if(!Ue(r))continue;const u={termType:e.startsWith("_:")?"BlankNode":"NamedNode",value:e};if(!Ue(e))continue;if("BlankNode"===u.termType&&!i.produceGeneralizedRdf)continue;const l=Ze(o,t,a,n,i.rdfDirection);l&&a.push({subject:s,predicate:u,object:l,graph:n})}}}}function Ze(a,e,n,t,i){const o={};if(K.isValue(a)){o.termType="Literal",o.value=void 0,o.datatype={termType:"NamedNode"};let e=a["@value"];const n=a["@type"]||null;if("@json"===n)o.value=ze(e),o.datatype.value=Ge;else if(N.isBoolean(e))o.value=e.toString(),o.datatype.value=n||We;else if(N.isDouble(e)||n===He)N.isDouble(e)||(e=parseFloat(e)),o.value=e.toExponential(15).replace(/(\d)0*e\+?/,"$1E"),o.datatype.value=n||He;else if(N.isNumber(e))o.value=e.toFixed(0),o.datatype.value=n||_e;else if("i18n-datatype"===i&&"@direction"in a){const n="https://www.w3.org/ns/i18n#"+(a["@language"]||"")+`_${a["@direction"]}`;o.datatype.value=n,o.value=e}else"@language"in a?(o.value=e,o.datatype.value=n||Re,o.language=a["@language"]):(o.value=e,o.datatype.value=n||Fe)}else if(K.isList(a)){const r=function(a,e,n,t,i){const o={termType:"NamedNode",value:Ie},r={termType:"NamedNode",value:Oe},s={termType:"NamedNode",value:qe},u=a.pop(),l=u?{termType:"BlankNode",value:e.getId()}:s;let c=l;for(const s of a){const a=Ze(s,e,n,t,i),u={termType:"BlankNode",value:e.getId()};n.push({subject:c,predicate:o,object:a,graph:t}),n.push({subject:c,predicate:r,object:u,graph:t}),c=u}if(u){const a=Ze(u,e,n,t,i);n.push({subject:c,predicate:o,object:a,graph:t}),n.push({subject:c,predicate:r,object:s,graph:t})}return l}(a["@list"],e,n,t,i);o.termType=r.termType,o.value=r.value}else{const e=N.isObject(a)?a["@id"]:a;o.termType=e.startsWith("_:")?"BlankNode":"NamedNode",o.value=e}return"NamedNode"!==o.termType||Ue(o.value)?o:null}Ye.toRDF=(a,e)=>{const n=new O.IdentifierIssuer("_:b"),t={"@default":{}};Pe(a,t,"@default",n);const i=[],o=Object.keys(t).sort();for(const a of o){let o;if("@default"===a)o={termType:"DefaultGraph",value:""};else{if(!Ue(a))continue;o=a.startsWith("_:")?{termType:"BlankNode"}:{termType:"NamedNode"},o.value=a}Ve(i,t[a],o,n,e)}return i};const{isKeyword:$e}=Pa,{createNodeMap:Qe,mergeNodeMapGraphs:Xe}=de,an={};var en=an;function nn(a){const e={};for(const n in a)void 0!==a[n]&&(e["@"+n]=[a[n]]);return[e]}function tn(a,e,n){for(let t=n.length-1;t>=0;--t){const i=n[t];if(i.graph===e&&i.subject["@id"]===a["@id"])return!0}return!1}function on(a,e,n){const t="@"+n;let i=t in a?a[t][0]:e[n];if("embed"===n)if(!0===i)i="@once";else if(!1===i)i="@never";else if("@always"!==i&&"@never"!==i&&"@link"!==i&&"@first"!==i&&"@last"!==i&&"@once"!==i)throw new T("Invalid JSON-LD syntax; invalid value of @embed.","jsonld.SyntaxError",{code:"invalid @embed value",frame:a});return i}function rn(a){if(!N.isArray(a)||1!==a.length||!N.isObject(a[0]))throw new T("Invalid JSON-LD syntax; a JSON-LD frame must be a single object.","jsonld.SyntaxError",{frame:a});if("@id"in a[0])for(const e of O.asArray(a[0]["@id"]))if(!N.isObject(e)&&!G.isAbsolute(e)||N.isString(e)&&0===e.indexOf("_:"))throw new T("Invalid JSON-LD syntax; invalid @id in frame.","jsonld.SyntaxError",{code:"invalid frame",frame:a});if("@type"in a[0])for(const e of O.asArray(a[0]["@type"]))if(!N.isObject(e)&&!G.isAbsolute(e)||N.isString(e)&&0===e.indexOf("_:"))throw new T("Invalid JSON-LD syntax; invalid @type in frame.","jsonld.SyntaxError",{code:"invalid frame",frame:a})}function sn(a,e,n,t){let i=!0,o=!1;for(const r in n){let s=!1;const u=O.getValues(e,r),l=0===O.getValues(n,r).length;if("@id"===r){if(N.isEmptyObject(n["@id"][0]||{})?s=!0:n["@id"].length>=0&&(s=n["@id"].includes(u[0])),!t.requireAll)return s}else if("@type"===r){if(i=!1,l){if(u.length>0)return!1;s=!0}else if(1===n["@type"].length&&N.isEmptyObject(n["@type"][0]))s=u.length>0;else for(const a of n["@type"])s=!(!N.isObject(a)||!("@default"in a))||s||u.some((e=>e===a));if(!t.requireAll)return s}else{if($e(r))continue;{const e=O.getValues(n,r)[0];let o=!1;if(e&&(rn([e]),o="@default"in e),i=!1,0===u.length&&o)continue;if(u.length>0&&l)return!1;if(void 0===e){if(u.length>0)return!1;s=!0}else if(K.isList(e)){const n=e["@list"][0];if(K.isList(u[0])){const e=u[0]["@list"];K.isValue(n)?s=e.some((a=>gn(n,a))):(K.isSubject(n)||K.isSubjectReference(n))&&(s=e.some((e=>dn(a,n,e,t))))}}else s=K.isValue(e)?u.some((a=>gn(e,a))):K.isSubjectReference(e)?u.some((n=>dn(a,e,n,t))):!!N.isObject(e)&&u.length>0}}if(!s&&t.requireAll)return!1;o=o||s}return i||o}function un(a,e){const n=a.uniqueEmbeds[a.graph],t=n[e],i=t.parent,o=t.property,r={"@id":e};if(N.isArray(i)){for(let a=0;a<i.length;++a)if(O.compareValues(i[a],r)){i[a]=r;break}}else{const a=N.isArray(i[o]);O.removeValue(i,o,r,{propertyIsArray:a}),O.addValue(i,o,r,{propertyIsArray:a})}const s=a=>{const e=Object.keys(n);for(const t of e)t in n&&N.isObject(n[t].parent)&&n[t].parent["@id"]===a&&(delete n[t],s(t))};s(e)}
/**
     * Removes the @preserve keywords from expanded result of framing.
     *
     * @param input the framed, framed output.
     * @param options the framing options used.
     *
     * @return the resulting output.
     */function ln(a,e){if(N.isArray(a))return a.map((a=>ln(a,e)));if(N.isObject(a)){
// remove @preserve
if("@preserve"in a)return a["@preserve"][0];if(K.isValue(a))return a;if(K.isList(a))return a["@list"]=ln(a["@list"],e),a;if("@id"in a){const n=a["@id"];if(e.link.hasOwnProperty(n)){const t=e.link[n].indexOf(a);if(-1!==t)return e.link[n][t];e.link[n].push(a)}else e.link[n]=[a]}for(const n in a)"@id"===n&&e.bnodesToClear.includes(a[n])?delete a["@id"]:a[n]=ln(a[n],e)}return a}function cn(a,e,n){N.isObject(a)?O.addValue(a,e,n,{propertyIsArray:!0}):a.push(n)}function dn(a,e,n,t){if(!("@id"in n))return!1;const i=a.subjects[n["@id"]];return i&&sn(a,i,e,t)}function gn(a,e){const n=e["@value"],t=e["@type"],i=e["@language"],o=a["@value"]?N.isArray(a["@value"])?a["@value"]:[a["@value"]]:[],r=a["@type"]?N.isArray(a["@type"])?a["@type"]:[a["@type"]]:[],s=a["@language"]?N.isArray(a["@language"])?a["@language"]:[a["@language"]]:[];return 0===o.length&&0===r.length&&0===s.length||!(!o.includes(n)&&!N.isEmptyObject(o[0]))&&!!(!t&&0===r.length||r.includes(t)||t&&N.isEmptyObject(r[0]))&&!!(!i&&0===s.length||s.includes(i)||i&&N.isEmptyObject(s[0]))}an.frameMergedOrDefault=(a,e,n)=>{const t={options:n,embedded:!1,graph:"@default",graphMap:{"@default":{}},subjectStack:[],link:{},bnodeMap:{}},i=new O.IdentifierIssuer("_:b");Qe(a,t.graphMap,"@default",i),n.merged&&(t.graphMap["@merged"]=Xe(t.graphMap),t.graph="@merged"),t.subjects=t.graphMap[t.graph];const o=[];return an.frame(t,Object.keys(t.subjects).sort(),e,o),n.pruneBlankNodeIdentifiers&&(n.bnodesToClear=Object.keys(t.bnodeMap).filter((a=>1===t.bnodeMap[a].length))),
// remove @preserve from results
n.link={},ln(o,n)},an.frame=(a,e,n,t,i=null)=>{rn(n),n=n[0];const o=a.options,r={embed:on(n,o,"embed"),explicit:on(n,o,"explicit"),requireAll:on(n,o,"requireAll")};a.link.hasOwnProperty(a.graph)||(a.link[a.graph]={});const s=a.link[a.graph],u=function(a,e,n,t){const i={};for(const o of e){const e=a.graphMap[a.graph][o];sn(a,e,n,t)&&(i[o]=e)}return i}(a,e,n,r),l=Object.keys(u).sort();for(const c of l){const l=u[c];if(null===i?a.uniqueEmbeds={[a.graph]:{}}:a.uniqueEmbeds[a.graph]=a.uniqueEmbeds[a.graph]||{},"@link"===r.embed&&c in s){cn(t,i,s[c]);continue}const d={"@id":c};if(0===c.indexOf("_:")&&O.addValue(a.bnodeMap,c,d,{propertyIsArray:!0}),s[c]=d,("@first"===r.embed||"@last"===r.embed)&&a.is11)throw new T("Invalid JSON-LD syntax; invalid value of @embed.","jsonld.SyntaxError",{code:"invalid @embed value",frame:n});if(a.embedded||!a.uniqueEmbeds[a.graph].hasOwnProperty(c))if(!a.embedded||"@never"!==r.embed&&!tn(l,a.graph,a.subjectStack))if(!a.embedded||"@first"!=r.embed&&"@once"!=r.embed||!a.uniqueEmbeds[a.graph].hasOwnProperty(c)){if("@last"===r.embed&&c in a.uniqueEmbeds[a.graph]&&un(a,c),a.uniqueEmbeds[a.graph][c]={parent:t,property:i},a.subjectStack.push({subject:l,graph:a.graph}),c in a.graphMap){let e=!1,t=null;"@graph"in n?(t=n["@graph"][0],e=!("@merged"===c||"@default"===c),N.isObject(t)||(t={})):(e="@merged"!==a.graph,t={}),e&&an.frame({...a,graph:c,embedded:!1},Object.keys(a.graphMap[c]).sort(),[t],d,"@graph")}"@included"in n&&an.frame({...a,embedded:!1},e,n["@included"],d,"@included");for(const e of Object.keys(l).sort())if($e(e)){if(d[e]=O.clone(l[e]),"@type"===e)for(const e of l["@type"])0===e.indexOf("_:")&&O.addValue(a.bnodeMap,e,d,{propertyIsArray:!0})}else if(!r.explicit||e in n)for(const t of l[e]){const i=e in n?n[e]:nn(r);if(K.isList(t)){const i=n[e]&&n[e][0]&&n[e][0]["@list"]?n[e][0]["@list"]:nn(r),o={"@list":[]};cn(d,e,o);const s=t["@list"];for(const e of s)K.isSubjectReference(e)?an.frame({...a,embedded:!0},[e["@id"]],i,o,"@list"):cn(o,"@list",O.clone(e))}else K.isSubjectReference(t)?an.frame({...a,embedded:!0},[t["@id"]],i,d,e):gn(i[0],t)&&cn(d,e,O.clone(t))}for(const a of Object.keys(n).sort()){if("@type"===a){if(!N.isObject(n[a][0])||!("@default"in n[a][0]))continue}else if($e(a))continue;const e=n[a][0]||{};if(!on(e,o,"omitDefault")&&!(a in d)){let n="@null";"@default"in e&&(n=O.clone(e["@default"])),N.isArray(n)||(n=[n]),d[a]=[{"@preserve":n}]}}for(const e of Object.keys(n["@reverse"]||{}).sort()){const t=n["@reverse"][e];for(const n of Object.keys(a.subjects))O.getValues(a.subjects[n],e).some((a=>a["@id"]===c))&&(d["@reverse"]=d["@reverse"]||{},O.addValue(d["@reverse"],e,[],{propertyIsArray:!0}),an.frame({...a,embedded:!0},[n],t,d["@reverse"][e],i))}cn(t,i,d),a.subjectStack.pop()}else cn(t,i,d);else cn(t,i,d)}},an.cleanupNull=(a,e)=>{if(N.isArray(a))return a.map((a=>an.cleanupNull(a,e))).filter((a=>a));if("@null"===a)return null;if(N.isObject(a)){if("@id"in a){const n=a["@id"];if(e.link.hasOwnProperty(n)){const t=e.link[n].indexOf(a);if(-1!==t)return e.link[n][t];e.link[n].push(a)}else e.link[n]=[a]}for(const n in a)a[n]=an.cleanupNull(a[n],e)}return a};const{isArray:hn,isObject:mn,isString:pn,isUndefined:bn}=N,{isList:fn,isValue:yn,isGraph:kn,isSimpleGraph:vn,isSubjectReference:wn}=K,{expandIri:xn,getContextValue:Sn,isKeyword:Mn,process:jn,processingMode:An}=Pa,{removeBase:Nn,prependBase:Cn}=G,{addValue:Kn,asArray:Tn,compareShortestLeast:Ln}=O,Bn={};var zn=Bn;function Pn(a,e,n){if("@nest"!==xn(a,e,{vocab:!0},n))throw new T("JSON-LD compact error; nested property must have an @nest value resolving to @nest.","jsonld.SyntaxError",{code:"invalid @nest value"})}Bn.compact=async({activeCtx:a,activeProperty:e=null,element:n,options:t={},compactionMap:i=(()=>{})})=>{if(hn(n)){let o=[];for(let r=0;r<n.length;++r){let s=await Bn.compact({activeCtx:a,activeProperty:e,element:n[r],options:t,compactionMap:i});null===s&&(s=await i({unmappedValue:n[r],activeCtx:a,activeProperty:e,parent:n,index:r,options:t}),void 0===s)||o.push(s)}return t.compactArrays&&1===o.length&&0===(Sn(a,e,"@container")||[]).length&&(o=o[0]),o}const o=Sn(a,e,"@context");if(bn(o)||(a=await jn({activeCtx:a,localCtx:o,propagate:!0,overrideProtected:!0,options:t})),mn(n)){if(t.link&&"@id"in n&&t.link.hasOwnProperty(n["@id"])){const a=t.link[n["@id"]];for(let e=0;e<a.length;++e)if(a[e].expanded===n)return a[e].compacted}if(yn(n)||wn(n)){const i=Bn.compactValue({activeCtx:a,activeProperty:e,value:n,options:t});return t.link&&wn(n)&&(t.link.hasOwnProperty(n["@id"])||(t.link[n["@id"]]=[]),t.link[n["@id"]].push({expanded:n,compacted:i})),i}if(fn(n)&&(Sn(a,e,"@container")||[]).includes("@list"))return Bn.compact({activeCtx:a,activeProperty:e,element:n["@list"],options:t,compactionMap:i});const o="@reverse"===e,r={},s=a;yn(n)||wn(n)||(a=a.revertToPreviousContext());const u=Sn(s,e,"@context");bn(u)||(a=await jn({activeCtx:a,localCtx:u,propagate:!0,overrideProtected:!0,options:t})),t.link&&"@id"in n&&(t.link.hasOwnProperty(n["@id"])||(t.link[n["@id"]]=[]),t.link[n["@id"]].push({expanded:n,compacted:r}));let l=n["@type"]||[];l.length>1&&(l=Array.from(l).sort());const c=a;for(const e of l){const n=Bn.compactIri({activeCtx:c,iri:e,relativeTo:{vocab:!0}}),i=Sn(s,n,"@context");bn(i)||(a=await jn({activeCtx:a,localCtx:i,options:t,propagate:!1}))}const d=Object.keys(n).sort();for(const u of d){const l=n[u];if("@id"!==u)if("@type"!==u)if("@reverse"!==u)if("@preserve"!==u)if("@index"!==u)if("@graph"!==u&&"@list"!==u&&"@included"!==u&&Mn(u)){const e=Bn.compactIri({activeCtx:a,iri:u,relativeTo:{vocab:!0}});Kn(r,e,l)}else{if(!hn(l))throw new T("JSON-LD expansion error; expanded value must be an array.","jsonld.SyntaxError");if(0===l.length){const e=Bn.compactIri({activeCtx:a,iri:u,value:l,relativeTo:{vocab:!0},reverse:o}),n=a.mappings.has(e)?a.mappings.get(e)["@nest"]:null;let i=r;n&&(Pn(a,n,t),mn(r[n])||(r[n]={}),i=r[n]),Kn(i,e,l,{propertyIsArray:!0})}for(const e of l){const n=Bn.compactIri({activeCtx:a,iri:u,value:e,relativeTo:{vocab:!0},reverse:o}),s=a.mappings.has(n)?a.mappings.get(n)["@nest"]:null;let l=r;s&&(Pn(a,s,t),mn(r[s])||(r[s]={}),l=r[s]);const c=Sn(a,n,"@container")||[],d=kn(e),g=fn(e);let h;g?h=e["@list"]:d&&(h=e["@graph"]);let m=await Bn.compact({activeCtx:a,activeProperty:n,element:g||d?h:e,options:t,compactionMap:i});if(g){if(hn(m)||(m=[m]),c.includes("@list")){Kn(l,n,m,{valueIsArray:!0,allowDuplicate:!0});continue}m={[Bn.compactIri({activeCtx:a,iri:"@list",relativeTo:{vocab:!0}})]:m},"@index"in e&&(m[Bn.compactIri({activeCtx:a,iri:"@index",relativeTo:{vocab:!0}})]=e["@index"])}if(d)if(c.includes("@graph")&&(c.includes("@id")||c.includes("@index")&&vn(e))){let i;l.hasOwnProperty(n)?i=l[n]:l[n]=i={};const o=(c.includes("@id")?e["@id"]:e["@index"])||Bn.compactIri({activeCtx:a,iri:"@none",relativeTo:{vocab:!0}});Kn(i,o,m,{propertyIsArray:!t.compactArrays||c.includes("@set")})}else c.includes("@graph")&&vn(e)?(hn(m)&&m.length>1&&(m={"@included":m}),Kn(l,n,m,{propertyIsArray:!t.compactArrays||c.includes("@set")})):(hn(m)&&1===m.length&&t.compactArrays&&(m=m[0]),m={[Bn.compactIri({activeCtx:a,iri:"@graph",relativeTo:{vocab:!0}})]:m},"@id"in e&&(m[Bn.compactIri({activeCtx:a,iri:"@id",relativeTo:{vocab:!0}})]=e["@id"]),"@index"in e&&(m[Bn.compactIri({activeCtx:a,iri:"@index",relativeTo:{vocab:!0}})]=e["@index"]),Kn(l,n,m,{propertyIsArray:!t.compactArrays||c.includes("@set")}));else if(c.includes("@language")||c.includes("@index")||c.includes("@id")||c.includes("@type")){let o,r;if(l.hasOwnProperty(n)?o=l[n]:l[n]=o={},c.includes("@language"))yn(m)&&(m=m["@value"]),r=e["@language"];else if(c.includes("@index")){const t=Sn(a,n,"@index")||"@index",i=Bn.compactIri({activeCtx:a,iri:t,relativeTo:{vocab:!0}});if("@index"===t)r=e["@index"],delete m[i];else{let a;if([r,...a]=Tn(m[t]||[]),pn(r))switch(a.length){case 0:delete m[t];break;case 1:m[t]=a[0];break;default:m[t]=a}else r=null}}else if(c.includes("@id")){const e=Bn.compactIri({activeCtx:a,iri:"@id",relativeTo:{vocab:!0}});r=m[e],delete m[e]}else if(c.includes("@type")){const o=Bn.compactIri({activeCtx:a,iri:"@type",relativeTo:{vocab:!0}});let s;switch([r,...s]=Tn(m[o]||[]),s.length){case 0:delete m[o];break;case 1:m[o]=s[0];break;default:m[o]=s}1===Object.keys(m).length&&"@id"in e&&(m=await Bn.compact({activeCtx:a,activeProperty:n,element:{"@id":e["@id"]},options:t,compactionMap:i}))}r||(r=Bn.compactIri({activeCtx:a,iri:"@none",relativeTo:{vocab:!0}})),Kn(o,r,m,{propertyIsArray:c.includes("@set")})}else{const a=!t.compactArrays||c.includes("@set")||c.includes("@list")||hn(m)&&0===m.length||"@list"===u||"@graph"===u;Kn(l,n,m,{propertyIsArray:a})}}}else{if((Sn(a,e,"@container")||[]).includes("@index"))continue;const n=Bn.compactIri({activeCtx:a,iri:u,relativeTo:{vocab:!0}});Kn(r,n,l)}else{const n=await Bn.compact({activeCtx:a,activeProperty:e,element:l,options:t,compactionMap:i});hn(n)&&0===n.length||Kn(r,u,n)}else{const e=await Bn.compact({activeCtx:a,activeProperty:"@reverse",element:l,options:t,compactionMap:i});for(const n in e)if(a.mappings.has(n)&&a.mappings.get(n).reverse){const i=e[n],o=(Sn(a,n,"@container")||[]).includes("@set")||!t.compactArrays;Kn(r,n,i,{propertyIsArray:o}),delete e[n]}if(Object.keys(e).length>0){const n=Bn.compactIri({activeCtx:a,iri:u,relativeTo:{vocab:!0}});Kn(r,n,e)}}else{let e=Tn(l).map((a=>Bn.compactIri({activeCtx:s,iri:a,relativeTo:{vocab:!0}})));1===e.length&&(e=e[0]);const n=Bn.compactIri({activeCtx:a,iri:"@type",relativeTo:{vocab:!0}}),t=(Sn(a,n,"@container")||[]).includes("@set")&&An(a,1.1)||hn(e)&&0===l.length;Kn(r,n,e,{propertyIsArray:t})}else{let e=Tn(l).map((e=>Bn.compactIri({activeCtx:a,iri:e,relativeTo:{vocab:!1},base:t.base})));1===e.length&&(e=e[0]),r[Bn.compactIri({activeCtx:a,iri:"@id",relativeTo:{vocab:!0}})]=e}}return r}return n},Bn.compactIri=({activeCtx:a,iri:e,value:n=null,relativeTo:t={vocab:!1},reverse:i=!1,base:o=null})=>{if(null===e)return e;a.isPropertyTermScoped&&a.previousContext&&(a=a.previousContext);const r=a.getInverse();if(Mn(e)&&e in r&&"@none"in r[e]&&"@type"in r[e]["@none"]&&"@none"in r[e]["@none"]["@type"])return r[e]["@none"]["@type"]["@none"];if(t.vocab&&e in r){const t=a["@language"]||"@none",o=[];mn(n)&&"@index"in n&&!("@graph"in n)&&o.push("@index","@index@set"),mn(n)&&"@preserve"in n&&(n=n["@preserve"][0]),kn(n)?("@index"in n&&o.push("@graph@index","@graph@index@set","@index","@index@set"),"@id"in n&&o.push("@graph@id","@graph@id@set"),o.push("@graph","@graph@set","@set"),"@index"in n||o.push("@graph@index","@graph@index@set","@index","@index@set"),"@id"in n||o.push("@graph@id","@graph@id@set")):mn(n)&&!yn(n)&&o.push("@id","@id@set","@type","@set@type");let r="@language",s="@null";if(i)r="@type",s="@reverse",o.push("@set");else if(fn(n)){"@index"in n||o.push("@list");const a=n["@list"];if(0===a.length)r="@any",s="@none";else{let e=0===a.length?t:null,n=null;for(let t=0;t<a.length;++t){const i=a[t];let o="@none",r="@none";if(yn(i)?"@direction"in i?o=`${(i["@language"]||"").toLowerCase()}_${i["@direction"]}`:"@language"in i?o=i["@language"].toLowerCase():"@type"in i?r=i["@type"]:o="@null":r="@id",null===e?e=o:o!==e&&yn(i)&&(e="@none"),null===n?n=r:r!==n&&(n="@none"),"@none"===e&&"@none"===n)break}e=e||"@none",n=n||"@none","@none"!==n?(r="@type",s=n):s=e}}else{if(yn(n))if("@language"in n&&!("@index"in n)){o.push("@language","@language@set"),s=n["@language"];const a=n["@direction"];a&&(s=`${s}_${a}`)}else"@direction"in n&&!("@index"in n)?s=`_${n["@direction"]}`:"@type"in n&&(r="@type",s=n["@type"]);else r="@type",s="@id";o.push("@set")}o.push("@none"),mn(n)&&!("@index"in n)&&o.push("@index","@index@set"),yn(n)&&1===Object.keys(n).length&&o.push("@language","@language@set");const u=function(a,e,n,t,i,o){null===o&&(o="@null");const r=[];if(("@id"===o||"@reverse"===o)&&mn(n)&&"@id"in n){"@reverse"===o&&r.push("@reverse");const e=Bn.compactIri({activeCtx:a,iri:n["@id"],relativeTo:{vocab:!0}});a.mappings.has(e)&&a.mappings.get(e)&&a.mappings.get(e)["@id"]===n["@id"]?r.push.apply(r,["@vocab","@id"]):r.push.apply(r,["@id","@vocab"])}else{r.push(o);const a=r.find((a=>a.includes("_")));a&&r.push(a.replace(/^[^_]+_/,"_"))}r.push("@none");const s=a.inverse[e];for(const a of t){if(!(a in s))continue;const e=s[a][i];for(const a of r)if(a in e)return e[a]}return null}(a,e,n,o,r,s);if(null!==u)return u}if(t.vocab&&"@vocab"in a){const n=a["@vocab"];if(0===e.indexOf(n)&&e!==n){const t=e.substr(n.length);if(!a.mappings.has(t))return t}}let s=null;const u=[];let l=a.fastCurieMap;const c=e.length-1;for(let a=0;a<c&&e[a]in l;++a)l=l[e[a]],""in l&&u.push(l[""][0]);for(let t=u.length-1;t>=0;--t){const i=u[t],o=i.terms;for(const t of o){const o=t+":"+e.substr(i.iri.length);a.mappings.get(t)._prefix&&(!a.mappings.has(o)||null===n&&a.mappings.get(o)["@id"]===e)&&(null===s||Ln(o,s)<0)&&(s=o)}}if(null!==s)return s;for(const[n,t]of a.mappings)if(t&&t._prefix&&e.startsWith(n+":"))throw new T(`Absolute IRI "${e}" confused with prefix "${n}".`,"jsonld.SyntaxError",{code:"IRI confused with prefix",context:a});return t.vocab?e:"@base"in a?a["@base"]?Nn(Cn(o,a["@base"]),e):e:Nn(o,e)},Bn.compactValue=({activeCtx:a,activeProperty:e,value:n,options:t})=>{if(yn(n)){const t=Sn(a,e,"@type"),i=Sn(a,e,"@language"),o=Sn(a,e,"@direction"),r=Sn(a,e,"@container")||[],s="@index"in n&&!r.includes("@index");if(!s&&"@none"!==t){if(n["@type"]===t)return n["@value"];if("@language"in n&&n["@language"]===i&&"@direction"in n&&n["@direction"]===o)return n["@value"];if("@language"in n&&n["@language"]===i)return n["@value"];if("@direction"in n&&n["@direction"]===o)return n["@value"]}const u=Object.keys(n).length,l=1===u||2===u&&"@index"in n&&!s,c="@language"in a,d=pn(n["@value"]),g=a.mappings.has(e)&&null===a.mappings.get(e)["@language"];if(l&&"@none"!==t&&(!c||!d||g))return n["@value"];const h={};return s&&(h[Bn.compactIri({activeCtx:a,iri:"@index",relativeTo:{vocab:!0}})]=n["@index"]),"@type"in n?h[Bn.compactIri({activeCtx:a,iri:"@type",relativeTo:{vocab:!0}})]=Bn.compactIri({activeCtx:a,iri:n["@type"],relativeTo:{vocab:!0}}):"@language"in n&&(h[Bn.compactIri({activeCtx:a,iri:"@language",relativeTo:{vocab:!0}})]=n["@language"]),"@direction"in n&&(h[Bn.compactIri({activeCtx:a,iri:"@direction",relativeTo:{vocab:!0}})]=n["@direction"]),h[Bn.compactIri({activeCtx:a,iri:"@value",relativeTo:{vocab:!0}})]=n["@value"],h}const i=xn(a,e,{vocab:!0},t),o=Sn(a,e,"@type"),r=Bn.compactIri({activeCtx:a,iri:n["@id"],relativeTo:{vocab:"@vocab"===o},base:t.base});return"@id"===o||"@vocab"===o||"@graph"===i?r:{[Bn.compactIri({activeCtx:a,iri:"@id",relativeTo:{vocab:!0}})]:r}};var Dn=class{constructor(){this._requests={}}wrapLoader(a){const e=this;return e._loader=a,function(){return e.add.apply(e,arguments)}}async add(a){let e=this._requests[a];if(e)return Promise.resolve(e);e=this._requests[a]=this._loader(a);try{return await e}finally{delete this._requests[a]}}};const{parseLinkHeader:In,buildHeaders:On}=O,{LINK_HEADER_CONTEXT:qn}=ye,{prependBase:En}=G;var Gn=({secure:a,strictSSL:e=!0,maxRedirects:n=-1,request:t,headers:i={}}={strictSSL:!0,maxRedirects:-1,headers:{}})=>{i=On(i),t=t||x;const o=x;return(new Dn).wrapLoader((function(a){return r(a,[])}));async function r(s,u){if(0!==s.indexOf("http:")&&0!==s.indexOf("https:"))throw new T('URL could not be dereferenced; only "http" and "https" URLs are supported.',"jsonld.InvalidUrl",{code:"loading document failed",url:s});if(a&&0!==s.indexOf("https"))throw new T('URL could not be dereferenced; secure mode is enabled and the URL\'s scheme is not "https".',"jsonld.InvalidUrl",{code:"loading document failed",url:s});let l,c=null;if(null!==c)return c;let d=null;try{l=await function(a,e){return new Promise(((n,t)=>{a(e,((a,e,i)=>{a?t(a):n({res:e,body:i})}))}))}(t,{url:s,headers:i,strictSSL:e,followRedirect:!1})}catch(a){throw new T("URL could not be dereferenced, an error occurred.","jsonld.LoadDocumentError",{code:"loading document failed",url:s,cause:a})}const{res:g,body:h}=l;c={contextUrl:null,documentUrl:s,document:h||null};const m=o.STATUS_CODES[g.statusCode];if(g.statusCode>=400)throw new T(`URL "${s}" could not be dereferenced: ${m}`,"jsonld.InvalidUrl",{code:"loading document failed",url:s,httpStatusCode:g.statusCode});if(g.headers.link&&"application/ld+json"!==g.headers["content-type"]){const a=In(g.headers.link),e=a[qn];if(Array.isArray(e))throw new T("URL could not be dereferenced, it has more than one associated HTTP Link Header.","jsonld.InvalidUrl",{code:"multiple context link headers",url:s});e&&(c.contextUrl=e.target),d=a.alternate,d&&"application/ld+json"==d.type&&!(g.headers["content-type"]||"").match(/^application\/(\w*\+)?json$/)&&(g.headers.location=En(s,d.target))}if((d||g.statusCode>=300&&g.statusCode<400)&&g.headers.location){if(u.length===n)throw new T("URL could not be dereferenced; there were too many redirects.","jsonld.TooManyRedirects",{code:"loading document failed",url:s,httpStatusCode:g.statusCode,redirects:u});if(-1!==u.indexOf(s))throw new T("URL could not be dereferenced; infinite redirection was detected.","jsonld.InfiniteRedirectDetected",{code:"recursive context inclusion",url:s,httpStatusCode:g.statusCode,redirects:u});return u.push(s),r(g.headers.location,u)}return u.push(s),c}};const{parseLinkHeader:Rn,buildHeaders:Wn}=O,{LINK_HEADER_CONTEXT:Hn}=ye,{prependBase:_n}=G,Fn=/(^|(\r\n))link:/i;var Un=({secure:a,headers:e={},xhr:n}={headers:{}})=>(e=Wn(e),(new Dn).wrapLoader((async function t(i){if(0!==i.indexOf("http:")&&0!==i.indexOf("https:"))throw new T('URL could not be dereferenced; only "http" and "https" URLs are supported.',"jsonld.InvalidUrl",{code:"loading document failed",url:i});if(a&&0!==i.indexOf("https"))throw new T('URL could not be dereferenced; secure mode is enabled and the URL\'s scheme is not "https".',"jsonld.InvalidUrl",{code:"loading document failed",url:i});let o;try{o=await function(a,e,n){const t=new(a=a||XMLHttpRequest);return new Promise(((a,i)=>{t.onload=()=>a(t),t.onerror=a=>i(a),t.open("GET",e,!0);for(const a in n)t.setRequestHeader(a,n[a]);t.send()}))}(n,i,e)}catch(a){throw new T("URL could not be dereferenced, an error occurred.","jsonld.LoadDocumentError",{code:"loading document failed",url:i,cause:a})}if(o.status>=400)throw new T("URL could not be dereferenced: "+o.statusText,"jsonld.LoadDocumentError",{code:"loading document failed",url:i,httpStatusCode:o.status});let r={contextUrl:null,documentUrl:i,document:o.response},s=null;const u=o.getResponseHeader("Content-Type");let l;if(Fn.test(o.getAllResponseHeaders())&&(l=o.getResponseHeader("Link")),l&&"application/ld+json"!==u){const a=Rn(l),e=a[Hn];if(Array.isArray(e))throw new T("URL could not be dereferenced, it has more than one associated HTTP Link Header.","jsonld.InvalidUrl",{code:"multiple context link headers",url:i});e&&(r.contextUrl=e.target),s=a.alternate,s&&"application/ld+json"==s.type&&!(u||"").match(/^application\/(\w*\+)?json$/)&&(r=await t(_n(i,s.target)))}return r})));
/**
     * A JavaScript implementation of the JSON-LD API.
     * @author Dave Longley
     * @license BSD 3-Clause License
     */const Yn=O.IdentifierIssuer,{expand:Jn}=te,{flatten:Vn}=pe,{fromRDF:Zn}=Le,{toRDF:$n}=Je,{frameMergedOrDefault:Qn,cleanupNull:Xn}=en,{isArray:at,isObject:et,isString:nt}=N,{isSubjectReference:tt}=K,{expandIri:it,getInitialContext:ot,process:rt,processingMode:st}=Pa,{compact:ut,compactIri:lt}=zn,{createNodeMap:ct,createMergedNodeMap:dt,mergeNodeMaps:gt}=de,ht="undefined"!=typeof process&&process.versions&&process.versions.node,mt=!ht&&("undefined"!=typeof window||"undefined"!=typeof self),pt=function(a){const e={},n=new da({max:100});function t(e,{documentLoader:n=a.documentLoader,...t}){return Object.assign({},{documentLoader:n},t,e)}return a.compact=async function(e,i,o){if(arguments.length<2)throw new TypeError("Could not compact, too few arguments.");if(null===i)throw new T("The compaction context must not be null.","jsonld.CompactError",{code:"invalid local context"});if(null===e)return null;let r;(o=t(o,{base:nt(e)?e:"",compactArrays:!0,compactToRelative:!0,graph:!1,skipExpansion:!1,link:!1,issuer:new Yn("_:b"),contextResolver:new ya({sharedCache:n})})).link&&(o.skipExpansion=!0),o.compactToRelative||delete o.base,r=o.skipExpansion?e:await a.expand(e,o);const s=await a.processContext(ot(o),i,o);let u=await ut({activeCtx:s,element:r,options:o,compactionMap:o.compactionMap});o.compactArrays&&!o.graph&&at(u)?1===u.length?u=u[0]:0===u.length&&(u={}):o.graph&&et(u)&&(u=[u]),et(i)&&"@context"in i&&(i=i["@context"]),i=O.clone(i),at(i)||(i=[i]);const l=i;i=[];for(let a=0;a<l.length;++a)(!et(l[a])||Object.keys(l[a]).length>0)&&i.push(l[a]);const c=i.length>0;if(1===i.length&&(i=i[0]),at(u)){const a=lt({activeCtx:s,iri:"@graph",relativeTo:{vocab:!0}}),e=u;u={},c&&(u["@context"]=i),u[a]=e}else if(et(u)&&c){const a=u;u={"@context":i};for(const e in a)u[e]=a[e]}return u},a.expand=async function(e,i){if(arguments.length<1)throw new TypeError("Could not expand, too few arguments.");!1===(i=t(i,{keepFreeFloatingNodes:!1,contextResolver:new ya({sharedCache:n})})).expansionMap&&(i.expansionMap=void 0);const o={},r=[];if("expandContext"in i){const a=O.clone(i.expandContext);et(a)&&"@context"in a?o.expandContext=a:o.expandContext={"@context":a},r.push(o.expandContext)}let s;if(nt(e)){const n=await a.get(e,i);s=n.documentUrl,o.input=n.document,n.contextUrl&&(o.remoteContext={"@context":n.contextUrl},r.push(o.remoteContext))}else o.input=O.clone(e);"base"in i||(i.base=s||"");let u=ot(i);for(const a of r)u=await rt({activeCtx:u,localCtx:a,options:i});let l=await Jn({activeCtx:u,element:o.input,options:i,expansionMap:i.expansionMap});return et(l)&&"@graph"in l&&1===Object.keys(l).length?l=l["@graph"]:null===l&&(l=[]),at(l)||(l=[l]),l},a.flatten=async function(e,i,o){if(arguments.length<1)return new TypeError("Could not flatten, too few arguments.");i="function"==typeof i?null:i||null,o=t(o,{base:nt(e)?e:"",contextResolver:new ya({sharedCache:n})});const r=await a.expand(e,o),s=Vn(r);if(null===i)return s;o.graph=!0,o.skipExpansion=!0;const u=await a.compact(s,i,o);return u},a.frame=async function(e,i,o){if(arguments.length<2)throw new TypeError("Could not frame, too few arguments.");if(o=t(o,{base:nt(e)?e:"",embed:"@once",explicit:!1,requireAll:!1,omitDefault:!1,bnodesToClear:[],contextResolver:new ya({sharedCache:n})}),nt(i)){const e=await a.get(i,o);if(i=e.document,e.contextUrl){let a=i["@context"];a?at(a)?a.push(e.contextUrl):a=[a,e.contextUrl]:a=e.contextUrl,i["@context"]=a}}const r=i&&i["@context"]||{},s=await a.processContext(ot(o),r,o);o.hasOwnProperty("omitGraph")||(o.omitGraph=st(s,1.1)),o.hasOwnProperty("pruneBlankNodeIdentifiers")||(o.pruneBlankNodeIdentifiers=st(s,1.1));const u=await a.expand(e,o),l={...o};l.isFrame=!0,l.keepFreeFloatingNodes=!0;const c=await a.expand(i,l),d=Object.keys(i).map((a=>it(s,a,{vocab:!0})));l.merged=!d.includes("@graph"),l.is11=st(s,1.1);const g=Qn(u,c,l);l.graph=!o.omitGraph,l.skipExpansion=!0,l.link={},l.framing=!0;let h=await a.compact(g,r,l);return l.link={},h=Xn(h,l),h},a.link=async function(e,n,t){const i={};return n&&(i["@context"]=n),i["@embed"]="@link",a.frame(e,i,t)},a.normalize=a.canonize=async function(e,i){if(arguments.length<1)throw new TypeError("Could not canonize, too few arguments.");if("inputFormat"in(i=t(i,{base:nt(e)?e:"",algorithm:"URDNA2015",skipExpansion:!1,contextResolver:new ya({sharedCache:n})}))){if("application/n-quads"!==i.inputFormat&&"application/nquads"!==i.inputFormat)throw new T("Unknown canonicalization input format.","jsonld.CanonizeError");const a=wa.parse(e);return j.canonize(a,i)}const o={...i};delete o.format,o.produceGeneralizedRdf=!1;const r=await a.toRDF(e,o);return j.canonize(r,i)},a.fromRDF=async function(a,n){if(arguments.length<1)throw new TypeError("Could not convert from RDF, too few arguments.");n=t(n,{format:nt(a)?"application/n-quads":void 0});const{format:i}=n;let{rdfParser:o}=n;if(i){if(o=o||e[i],!o)throw new T("Unknown input format.","jsonld.UnknownFormat",{format:i})}else o=()=>a;const r=await o(a);return Zn(r,n)},a.toRDF=async function(e,i){if(arguments.length<1)throw new TypeError("Could not convert to RDF, too few arguments.");let o;o=(i=t(i,{base:nt(e)?e:"",skipExpansion:!1,contextResolver:new ya({sharedCache:n})})).skipExpansion?e:await a.expand(e,i);const r=$n(o,i);if(i.format){if("application/n-quads"===i.format||"application/nquads"===i.format)return await wa.serialize(r);throw new T("Unknown output format.","jsonld.UnknownFormat",{format:i.format})}return r},a.createNodeMap=async function(e,i){if(arguments.length<1)throw new TypeError("Could not create node map, too few arguments.");i=t(i,{base:nt(e)?e:"",contextResolver:new ya({sharedCache:n})});const o=await a.expand(e,i);return dt(o,i)},a.merge=async function(e,i,o){if(arguments.length<1)throw new TypeError("Could not merge, too few arguments.");if(!at(e))throw new TypeError('Could not merge, "docs" must be an array.');i="function"==typeof i?null:i||null,o=t(o,{contextResolver:new ya({sharedCache:n})});const r=await Promise.all(e.map((e=>{const n={...o};return a.expand(e,n)})));let s=!0;"mergeNodes"in o&&(s=o.mergeNodes);const u=o.issuer||new Yn("_:b"),l={"@default":{}};for(let a=0;a<r.length;++a){const e=O.relabelBlankNodes(r[a],{issuer:new Yn("_:b"+a+"-")}),n=s||0===a?l:{"@default":{}};if(ct(e,n,"@default",u),n!==l)for(const a in n){const e=n[a];if(!(a in l)){l[a]=e;continue}const t=l[a];for(const a in e)a in t||(t[a]=e[a])}}const c=gt(l),d=[],g=Object.keys(c).sort();for(let a=0;a<g.length;++a){const e=c[g[a]];tt(e)||d.push(e)}if(null===i)return d;o.graph=!0,o.skipExpansion=!0;const h=await a.compact(d,i,o);return h},Object.defineProperty(a,"documentLoader",{get:()=>a._documentLoader,set:e=>a._documentLoader=e}),a.documentLoader=async a=>{throw new T("Could not retrieve a JSON-LD document from the URL. URL dereferencing not implemented.","jsonld.LoadDocumentError",{code:"loading document failed",url:a})},a.get=async function(e,n){let t;t="function"==typeof n.documentLoader?n.documentLoader:a.documentLoader;const i=await t(e);try{if(!i.document)throw new T("No remote document found at the given URL.","jsonld.NullRemoteDocument");nt(i.document)&&(i.document=JSON.parse(i.document))}catch(e){throw new T("Could not retrieve a JSON-LD document from the URL.","jsonld.LoadDocumentError",{code:"loading document failed",cause:e,remoteDoc:i})}return i},a.processContext=async function(a,e,i){return i=t(i,{base:"",contextResolver:new ya({sharedCache:n})}),null===e?ot(i):(e=O.clone(e),et(e)&&"@context"in e||(e={"@context":e}),rt({activeCtx:a,localCtx:e,options:i}))},a.getContextValue=Pa.getContextValue,a.documentLoaders={},a.documentLoaders.node=Gn,a.documentLoaders.xhr=Un,a.useDocumentLoader=function(e){if(!(e in a.documentLoaders))throw new T('Unknown document loader type: "'+e+'"',"jsonld.UnknownDocumentLoader",{type:e});a.documentLoader=a.documentLoaders[e].apply(a,Array.prototype.slice.call(arguments,1))},a.registerRDFParser=function(a,n){e[a]=n},a.unregisterRDFParser=function(a){delete e[a]},a.registerRDFParser("application/n-quads",wa.parse),a.registerRDFParser("application/nquads",wa.parse),a.url=G,a.util=O,Object.assign(a,O),a.promises=a,a.RequestQueue=Dn,a.JsonLdProcessor=(a=>{class e{toString(){return"[object JsonLdProcessor]"}}return Object.defineProperty(e,"prototype",{writable:!1,enumerable:!1}),Object.defineProperty(e.prototype,"constructor",{writable:!0,enumerable:!1,configurable:!0,value:e}),e.compact=function(e,n){return arguments.length<2?Promise.reject(new TypeError("Could not compact, too few arguments.")):a.compact(e,n)},e.expand=function(e){return arguments.length<1?Promise.reject(new TypeError("Could not expand, too few arguments.")):a.expand(e)},e.flatten=function(e){return arguments.length<1?Promise.reject(new TypeError("Could not flatten, too few arguments.")):a.flatten(e)},e})(a),mt&&void 0===i.JsonLdProcessor&&Object.defineProperty(i,"JsonLdProcessor",{writable:!0,enumerable:!1,configurable:!0,value:a.JsonLdProcessor}),ht?a.useDocumentLoader("node"):"undefined"!=typeof XMLHttpRequest&&a.useDocumentLoader("xhr"),a},bt=function(){return pt((function(){return bt()}))};pt(bt);const ft=Object.assign({expand:a=>a,compact:(a,e)=>a},bt),yt=a=>a.split(/\:|\/|\,|\#/).pop(),kt=(a,e,n={},t=null)=>{if("object"!=typeof a)return a;const i=a=>{if(a.toString().includes(":")){const n=a.toString().split(":");(null==e?void 0:e[n[0]])&&(a=a.toString().replace(n[0]+":",e[n[0]]))}return a};return new Proxy(a,{get(a,o,r){var s,u;if("_proxyType"===o)return"JsonLdProxy";if("$"===(o=i(o))&&!("$"in n))return a;if("_alias"===o)return t;if("_"===o&&!("_"in n)){const i=a=>{var e,n;return Array.isArray(a)?i(a[0]):null!==(n=null!==(e=null==a?void 0:a["@id"])&&void 0!==e?e:null==a?void 0:a["@value"])&&void 0!==n?n:a};return kt(i(a),e,n,t)}if("isProxy"===o)return!0;for(const[e,t]of Object.entries(n))if(o===e)return t(a);if("*"===o[0]){const e=o.toString().substr(1);for(const n of Object.keys(a))yt(n)===e&&(o=n)}const l=!Reflect.has({},o)&&!Reflect.has([],o)&&Reflect.has(a,o);if(t&&!o.toString().includes(":")&&!Reflect.has({},o)&&!Reflect.has([],o)){const r=i(t+":"+o.toString());if(!Reflect.has({},r)&&!Reflect.has([],r)&&Reflect.has(a,r)&&Reflect.has(a,r))return kt(a[r],e,n,t)}if((null===(u=null===(s=a[o])||void 0===s?void 0:s[0])||void 0===u?void 0:u["@list"])&&l)return kt(a[o][0]["@list"],e,n,t);if(l&&a[o])return kt(a[o],e,n,t);if(["filter"].includes(o.toString())){const i=Reflect.get(a,o,r);return(...o)=>i.apply(a.map((a=>kt(a,e,n,t))),o)}return Reflect.get(a,o,r)},set:(a,e,n)=>(a[e=i(e)]=n,!0)})};var vt=a=>({get:e=>a.get(e),set:(e,n)=>(a.set(e,n),n)});const wt=/([^\s\\>"'=]+)\s*=\s*(['"]?)$/,xt=/^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i,St=/<[a-z][^>]+$/i,Mt=/>[^<>]*$/,jt=/<([a-z]+[a-z0-9:._-]*)([^>]*?)(\/>)/gi,At=/\s+$/,Nt=(a,e)=>0<e--&&(St.test(a[e])||!Mt.test(a[e])&&Nt(a,e)),Ct=(a,e,n)=>xt.test(e)?a:`<${e}${n.replace(At,"")}></${e}>`;const{isArray:Kt}=Array,{indexOf:Tt,slice:Lt}=[];var Bt=Kt,zt=Tt,Pt=Lt,Dt={isArray:Bt,indexOf:zt,slice:Pt};const{slice:It}=Dt;var Ot=(a,e)=>111===a.nodeType?1/e<0?e?(({firstChild:a,lastChild:e})=>{const n=document.createRange();return n.setStartAfter(a),n.setEndAfter(e),n.deleteContents(),a})(a):a.lastChild:e?a.valueOf():a.firstChild:a;var qt=a=>{const{childNodes:e}=a,{length:n}=e;if(n<2)return n?e[0]:a;const t=It.call(e,0);return{ELEMENT_NODE:1,nodeType:111,firstChild:t[0],lastChild:t[n-1],valueOf(){if(e.length!==n){let e=0;for(;e<n;)a.appendChild(t[e++])}return a}}};const{isArray:Et}=Dt;var Gt=a=>e=>{for(const n in e){const t="role"===n?n:`aria-${n}`,i=e[n];null==i?a.removeAttribute(t):a.setAttribute(t,i)}};var Rt=(a,e)=>{let n,t=!0;const i=document.createAttributeNS(null,e);return e=>{if(n!==e)if(n=e,null==n)t||(a.removeAttributeNode(i),t=!0);else{const n=e;null==n?(t||a.removeAttributeNode(i),t=!0):(i.value=n,t&&(a.setAttributeNodeNS(i),t=!1))}}};var Wt=(a,e,n)=>t=>{n!==!!t&&((n=!!t)?a.setAttribute(e,""):a.removeAttribute(e))};var Ht=(a,e)=>{let n,t,i=e.slice(2);return!(e in a)&&(t=e.toLowerCase())in a&&(i=t.slice(2)),e=>{const t=Et(e)?e:[e,!1];n!==t[0]&&(n&&a.removeEventListener(i,n,t[1]),(n=t[0])&&a.addEventListener(i,n,t[1]))}};var _t=a=>{let e;return n=>{e!==n&&(e=n,"function"==typeof n?n(a):n.current=a)}};var Ft=(a,e)=>"dataset"===e?(({dataset:a})=>e=>{for(const n in e){const t=e[n];null==t?delete a[n]:a[n]=t}})(a):n=>{a[e]=n};var Ut=a=>{let e;return n=>{e!=n&&(e=n,a.textContent=null==n?"":n)}};const Yt=({childNodes:a},e)=>a[e],Jt=(a,e,n)=>((a,e,n,t,i)=>{const o=n.length;let r=e.length,s=o,u=0,l=0,c=null;for(;u<r||l<s;)if(r===u){const e=s<o?l?t(n[l-1],-0).nextSibling:t(n[s-l],0):i;for(;l<s;)a.insertBefore(t(n[l++],1),e)}else if(s===l)for(;u<r;)c&&c.has(e[u])||a.removeChild(t(e[u],-1)),u++;else if(e[u]===n[l])u++,l++;else if(e[r-1]===n[s-1])r--,s--;else if(e[u]===n[s-1]&&n[l]===e[r-1]){const i=t(e[--r],-1).nextSibling;a.insertBefore(t(n[l++],1),t(e[u++],-1).nextSibling),a.insertBefore(t(n[--s],1),i),e[r]=n[s]}else{if(!c){c=new Map;let a=l;for(;a<s;)c.set(n[a],a++)}if(c.has(e[u])){const i=c.get(e[u]);if(l<i&&i<s){let o=u,d=1;for(;++o<r&&o<s&&c.get(e[o])===i+d;)d++;if(d>i-l){const o=t(e[u],0);for(;l<i;)a.insertBefore(t(n[l++],1),o)}else a.replaceChild(t(n[l++],1),t(e[u++],-1))}else u++}else a.removeChild(t(e[u++],-1))}return n})(a.parentNode,e,n,Ot,a);function Vt(a){const{type:e,path:n}=a,t=n.reduceRight(Yt,this);return"node"===e?(a=>{let e,n,t=[];const i=o=>{switch(typeof o){case"string":case"number":case"boolean":e!==o&&(e=o,n||(n=document.createTextNode("")),n.data=o,t=Jt(a,t,[n]));break;case"object":case"undefined":if(null==o){e!=o&&(e=o,t=Jt(a,t,[]));break}if(Bt(o)){e=o,0===o.length?t=Jt(a,t,[]):"object"==typeof o[0]?t=Jt(a,t,o):i(String(o));break}e!==o&&"ELEMENT_NODE"in o&&(e=o,t=Jt(a,t,11===o.nodeType?Pt.call(o.childNodes):[o]));break;case"function":i(o(a))}};return i})(t):"attr"===e?((a,e)=>{switch(e[0]){case"?":return Wt(a,e.slice(1),!1);case".":return Ft(a,e.slice(1));case"@":return Ht(a,"on"+e.slice(1));case"o":if("n"===e[1])return Ht(a,e)}switch(e){case"ref":return _t(a);case"aria":return Gt(a)}return Rt(a,e)})(t,a.name):Ut(t)}
/*! (c) Andrea Giammarchi - ISC */var Zt=function(a){var e="fragment",n="template",t="content"in o(n)?function(a){var e=o(n);return e.innerHTML=a,e.content}:function(a){var t=o(e),r=o(n),s=null;if(/^[^\S]*?<(col(?:group)?|t(?:head|body|foot|r|d|h))/i.test(a)){var u=RegExp.$1;r.innerHTML="<table>"+a+"</table>",s=r.querySelectorAll(u)}else r.innerHTML=a,s=r.childNodes;return i(t,s),t};return function(a,e){return("svg"===e?r:t)(a)};function i(a,e){for(var n=e.length;n--;)a.appendChild(e[0])}function o(n){return n===e?a.createDocumentFragment():a.createElementNS("http://www.w3.org/1999/xhtml",n)}function r(a){var n=o(e),t=o("div");return t.innerHTML='<svg xmlns="http://www.w3.org/2000/svg">'+a+"</svg>",i(n,t.firstChild.childNodes),n}}(document),$t=Zt;const Qt=1!=document.importNode.length,Xt=Qt?(a,e,n)=>document.importNode($t(a,e,n),!0):$t,ai=Qt?a=>document.createTreeWalker(a,129,null,!1):a=>document.createTreeWalker(a,129),ei=a=>{const e=[];let{parentNode:n}=a;for(;n;)e.push(zt.call(n.childNodes,a)),n=(a=n).parentNode;return e},ni="isµ",ti=vt(new WeakMap),ii=/^(?:plaintext|script|style|textarea|title|xmp)$/i,oi=(a,e)=>{const n=((a,e,n)=>{const t=[],{length:i}=a;for(let n=1;n<i;n++){const i=a[n-1];t.push(wt.test(i)&&Nt(a,n)?i.replace(wt,((a,t,i)=>`${e}${n-1}=${i||'"'}${t}${i?"":'"'}`)):`${i}\x3c!--${e}${n-1}--\x3e`)}t.push(a[i-1]);const o=t.join("").trim();return n?o:o.replace(jt,Ct)})(e,ni,"svg"===a),t=Xt(n,a),i=ai(t),o=[],r=e.length-1;let s=0,u=`isµ${s}`;for(;s<r;){const a=i.nextNode();if(!a)throw`bad template: ${n}`;if(8===a.nodeType)a.data===u&&(o.push({type:"node",path:ei(a)}),u="isµ"+ ++s);else{for(;a.hasAttribute(u);)o.push({type:"attr",path:ei(a),name:a.getAttribute(u)}),a.removeAttribute(u),u="isµ"+ ++s;ii.test(a.tagName)&&a.textContent.trim()===`\x3c!--${u}--\x3e`&&(a.textContent="",o.push({type:"text",path:ei(a)}),u="isµ"+ ++s)}}return{content:t,nodes:o}},ri=(a,e)=>{const{content:n,nodes:t}=ti.get(e)||ti.set(e,oi(a,e)),i=document.importNode(n,!0);return{content:i,updates:t.map(Vt,i)}},si=(a,{type:e,template:n,values:t})=>{const{length:i}=t;ui(a,t,i);let{entry:o}=a;o&&o.template===n&&o.type===e||(a.entry=o=((a,e)=>{const{content:n,updates:t}=ri(a,e);return{type:a,template:e,content:n,updates:t,wire:null}})(e,n));const{content:r,updates:s,wire:u}=o;for(let a=0;a<i;a++)s[a](t[a]);return u||(o.wire=qt(r))},ui=({stack:a},e,n)=>{for(let t=0;t<n;t++){const n=e[t];n instanceof li?e[t]=si(a[t]||(a[t]={stack:[],entry:null,wire:null}),n):Bt(n)?ui(a[t]||(a[t]={stack:[],entry:null,wire:null}),n,n.length):a[t]=null}n<a.length&&a.splice(n)};function li(a,e,n){this.type=a,this.template=e,this.values=n}const{create:ci,defineProperties:di}=Object,gi=a=>{const e=vt(new WeakMap);return di(((e,...n)=>new li(a,e,n)),{for:{value(n,t){const i=e.get(n)||e.set(n,ci(null));return i[t]||(i[t]=(e=>(n,...t)=>si(e,{type:a,template:n,values:t}))({stack:[],entry:null,wire:null}))}},node:{value:(e,...n)=>si({stack:[],entry:null,wire:null},{type:a,template:e,values:n}).valueOf()}})},hi=vt(new WeakMap),mi=gi("html"),pi=gi("svg");class bi extends li{constructor(a,e=[],n=[]){super(a,e,n);const t=a,i=e;this.text=t,this.template=[t],this.values=[],this.context=i,this.type="html"}toString(){return this.text}}function fi(a,e,n=!1){let t=Math.max(a.length,e.length),i="";for(let o=0;o<t;o++){let t="";if("object"==typeof e[o]){let a=Object.keys(e[o]);t=n?"{"+a[0]+"}":e[o][a[0]]}else"string"==typeof e[o]&&(t=e[o]);i+=a[o]+t}return i}const yi=[["aa","Afar"],["ab","Abkhazian"],["ae","Avestan"],["af","Afrikaans"],["ak","Akan"],["am","Amharic"],["an","Aragonese"],["ar","Arabic"],["as","Assamese"],["av","Avaric"],["ay","Aymara"],["az","Azerbaijani"],["ba","Bashkir"],["be","Belarusian"],["bg","Bulgarian"],["bh","Bihari languages"],["bi","Bislama"],["bm","Bambara"],["bn","Bengali, Bangla"],["bo","Tibetan"],["br","Breton"],["bs","Bosnian"],["ca","Catalan, Valencian"],["ce","Chechen"],["ch","Chamorro"],["co","Corsican"],["cr","Cree"],["cs","Czech"],["cu","Church Slavic, Church Slavonic, Old Bulgarian, Old Church Slavonic, Old Slavonic"],["cv","Chuvash"],["cy","Welsh"],["da","Danish"],["de","German"],["dv","Dhivehi, Divehi, Maldivian"],["dz","Dzongkha"],["ee","Ewe"],["el","Modern Greek (1453-)"],["en","English"],["eo","Esperanto"],["es","Spanish, Castilian"],["et","Estonian"],["eu","Basque"],["fa","Persian"],["ff","Fulah"],["fi","Finnish"],["fj","Fijian"],["fo","Faroese"],["fr","French"],["fy","Western Frisian"],["ga","Irish"],["gd","Scottish Gaelic, Gaelic"],["gl","Galician"],["gn","Guarani"],["gu","Gujarati"],["gv","Manx"],["ha","Hausa"],["he","Hebrew"],["hi","Hindi"],["ho","Hiri Motu"],["hr","Croatian"],["ht","Haitian, Haitian Creole"],["hu","Hungarian"],["hy","Armenian"],["hz","Herero"],["ia","Interlingua (International Auxiliary Language Association)"],["id","Indonesian"],["ie","Interlingue, Occidental"],["ig","Igbo"],["ii","Sichuan Yi, Nuosu"],["ik","Inupiaq"],["in","Indonesian"],["io","Ido"],["is","Icelandic"],["it","Italian"],["iu","Inuktitut"],["iw","Hebrew"],["ja","Japanese"],["ji","Yiddish"],["jv","Javanese"],["jw","Javanese"],["ka","Georgian"],["kg","Kongo"],["ki","Kikuyu, Gikuyu"],["kj","Kuanyama, Kwanyama"],["kk","Kazakh"],["kl","Kalaallisut, Greenlandic"],["km","Khmer, Central Khmer"],["kn","Kannada"],["ko","Korean"],["kr","Kanuri"],["ks","Kashmiri"],["ku","Kurdish"],["kv","Komi"],["kw","Cornish"],["ky","Kirghiz, Kyrgyz"],["la","Latin"],["lb","Luxembourgish, Letzeburgesch"],["lg","Ganda, Luganda"],["li","Limburgan, Limburger, Limburgish"],["ln","Lingala"],["lo","Lao"],["lt","Lithuanian"],["lu","Luba-Katanga"],["lv","Latvian"],["mg","Malagasy"],["mh","Marshallese"],["mi","Maori"],["mk","Macedonian"],["ml","Malayalam"],["mn","Mongolian"],["mo","Moldavian, Moldovan"],["mr","Marathi"],["ms","Malay (macrolanguage)"],["mt","Maltese"],["my","Burmese"],["na","Nauru"],["nb","Norwegian Bokmål"],["nd","North Ndebele"],["ne","Nepali (macrolanguage)"],["ng","Ndonga"],["nl","Dutch, Flemish"],["nn","Norwegian Nynorsk"],["no","Norwegian"],["nr","South Ndebele"],["nv","Navajo, Navaho"],["ny","Nyanja, Chewa, Chichewa"],["oc","Occitan (post 1500)"],["oj","Ojibwa"],["om","Oromo"],["or","Oriya (macrolanguage), Odia (macrolanguage)"],["os","Ossetian, Ossetic"],["pa","Panjabi, Punjabi"],["pi","Pali"],["pl","Polish"],["ps","Pushto, Pashto"],["pt","Portuguese"],["qu","Quechua"],["rm","Romansh"],["rn","Rundi"],["ro","Romanian, Moldavian, Moldovan"],["ru","Russian"],["rw","Kinyarwanda"],["sa","Sanskrit"],["sc","Sardinian"],["sd","Sindhi"],["se","Northern Sami"],["sg","Sango"],["sh","Serbo-Croatian"],["si","Sinhala, Sinhalese"],["sk","Slovak"],["sl","Slovenian"],["sm","Samoan"],["sn","Shona"],["so","Somali"],["sq","Albanian"],["sr","Serbian"],["ss","Swati"],["st","Southern Sotho"],["su","Sundanese"],["sv","Swedish"],["sw","Swahili (macrolanguage)"],["ta","Tamil"],["te","Telugu"],["tg","Tajik"],["th","Thai"],["ti","Tigrinya"],["tk","Turkmen"],["tl","Tagalog"],["tn","Tswana"],["to","Tonga (Tonga Islands)"],["tr","Turkish"],["ts","Tsonga"],["tt","Tatar"],["tw","Twi"],["ty","Tahitian"],["ug","Uighur, Uyghur"],["uk","Ukrainian"],["ur","Urdu"],["uz","Uzbek"],["ve","Venda"],["vi","Vietnamese"],["vo","Volapük"],["wa","Walloon"],["wo","Wolof"],["xh","Xhosa"],["yi","Yiddish"],["yo","Yoruba"],["za","Zhuang, Chuang"],["zh","Chinese"],["zu","Zulu"],["aaa","Ghotuo"],["aab","Alumu-Tesu"],["aac","Ari"],["aad","Amal"],["aae","Arbëreshë Albanian"],["aaf","Aranadan"],["aag","Ambrak"],["aah","Abu' Arapesh"],["aai","Arifama-Miniafia"],["aak","Ankave"],["aal","Afade"],["aam","Aramanik"],["aan","Anambé"],["aao","Algerian Saharan Arabic"],["aap","Pará Arára"],["aaq","Eastern Abnaki"],["aas","Aasáx"],["aat","Arvanitika Albanian"],["aau","Abau"],["aav","Austro-Asiatic languages"],["aaw","Solong"],["aax","Mandobo Atas"],["aaz","Amarasi"],["aba","Abé"],["abb","Bankon"],["abc","Ambala Ayta"],["abd","Manide"],["abe","Western Abnaki"],["abf","Abai Sungai"],["abg","Abaga"],["abh","Tajiki Arabic"],["abi","Abidji"],["abj","Aka-Bea"],["abl","Lampung Nyo"],["abm","Abanyom"],["abn","Abua"],["abo","Abon"],["abp","Abellen Ayta"],["abq","Abaza"],["abr","Abron"],["abs","Ambonese Malay"],["abt","Ambulas"],["abu","Abure"],["abv","Baharna Arabic"],["abw","Pal"],["abx","Inabaknon"],["aby","Aneme Wake"],["abz","Abui"],["aca","Achagua"],["acb","Áncá"],["acd","Gikyode"],["ace","Achinese"],["acf","Saint Lucian Creole French"],["ach","Acoli"],["aci","Aka-Cari"],["ack","Aka-Kora"],["acl","Akar-Bale"],["acm","Mesopotamian Arabic"],["acn","Achang"],["acp","Eastern Acipa"],["acq","Ta'izzi-Adeni Arabic"],["acr","Achi"],["acs","Acroá"],["act","Achterhoeks"],["acu","Achuar-Shiwiar"],["acv","Achumawi"],["acw","Hijazi Arabic"],["acx","Omani Arabic"],["acy","Cypriot Arabic"],["acz","Acheron"],["ada","Adangme"],["adb","Atauran"],["add","Lidzonka, Dzodinka"],["ade","Adele"],["adf","Dhofari Arabic"],["adg","Andegerebinha"],["adh","Adhola"],["adi","Adi"],["adj","Adioukrou"],["adl","Galo"],["adn","Adang"],["ado","Abu"],["adp","Adap"],["adq","Adangbe"],["adr","Adonara"],["ads","Adamorobe Sign Language"],["adt","Adnyamathanha"],["adu","Aduge"],["adw","Amundava"],["adx","Amdo Tibetan"],["ady","Adyghe, Adygei"],["adz","Adzera"],["aea","Areba"],["aeb","Tunisian Arabic"],["aec","Saidi Arabic"],["aed","Argentine Sign Language"],["aee","Northeast Pashai, Northeast Pashayi"],["aek","Haeke"],["ael","Ambele"],["aem","Arem"],["aen","Armenian Sign Language"],["aeq","Aer"],["aer","Eastern Arrernte"],["aes","Alsea"],["aeu","Akeu"],["aew","Ambakich"],["aey","Amele"],["aez","Aeka"],["afa","Afro-Asiatic languages"],["afb","Gulf Arabic"],["afd","Andai"],["afe","Putukwam"],["afg","Afghan Sign Language"],["afh","Afrihili"],["afi","Akrukay, Chini"],["afk","Nanubae"],["afn","Defaka"],["afo","Eloyi"],["afp","Tapei"],["afs","Afro-Seminole Creole"],["aft","Afitti"],["afu","Awutu"],["afz","Obokuitai"],["aga","Aguano"],["agb","Legbo"],["agc","Agatu"],["agd","Agarabi"],["age","Angal"],["agf","Arguni"],["agg","Angor"],["agh","Ngelima"],["agi","Agariya"],["agj","Argobba"],["agk","Isarog Agta"],["agl","Fembe"],["agm","Angaataha"],["agn","Agutaynen"],["ago","Tainae"],["agp","Paranan"],["agq","Aghem"],["agr","Aguaruna"],["ags","Esimbi"],["agt","Central Cagayan Agta"],["agu","Aguacateco"],["agv","Remontado Dumagat"],["agw","Kahua"],["agx","Aghul"],["agy","Southern Alta"],["agz","Mt. Iriga Agta"],["aha","Ahanta"],["ahb","Axamb"],["ahg","Qimant"],["ahh","Aghu"],["ahi","Tiagbamrin Aizi"],["ahk","Akha"],["ahl","Igo"],["ahm","Mobumrin Aizi"],["ahn","Àhàn"],["aho","Ahom"],["ahp","Aproumu Aizi"],["ahr","Ahirani"],["ahs","Ashe"],["aht","Ahtena"],["aia","Arosi"],["aib","Ainu (China)"],["aic","Ainbai"],["aid","Alngith"],["aie","Amara"],["aif","Agi"],["aig","Antigua and Barbuda Creole English"],["aih","Ai-Cham"],["aii","Assyrian Neo-Aramaic"],["aij","Lishanid Noshan"],["aik","Ake"],["ail","Aimele"],["aim","Aimol"],["ain","Ainu (Japan)"],["aio","Aiton"],["aip","Burumakok"],["aiq","Aimaq"],["air","Airoran"],["ais","Nataoran Amis"],["ait","Arikem"],["aiw","Aari"],["aix","Aighon"],["aiy","Ali"],["aja","Aja (South Sudan)"],["ajg","Aja (Benin)"],["aji","Ajië"],["ajn","Andajin"],["ajp","South Levantine Arabic"],["ajt","Judeo-Tunisian Arabic"],["aju","Judeo-Moroccan Arabic"],["ajw","Ajawa"],["ajz","Amri Karbi"],["akb","Batak Angkola"],["akc","Mpur"],["akd","Ukpet-Ehom"],["ake","Akawaio"],["akf","Akpa"],["akg","Anakalangu"],["akh","Angal Heneng"],["aki","Aiome"],["akj","Aka-Jeru"],["akk","Akkadian"],["akl","Aklanon"],["akm","Aka-Bo"],["ako","Akurio"],["akp","Siwu"],["akq","Ak"],["akr","Araki"],["aks","Akaselem"],["akt","Akolet"],["aku","Akum"],["akv","Akhvakh"],["akw","Akwa"],["akx","Aka-Kede"],["aky","Aka-Kol"],["akz","Alabama"],["ala","Alago"],["alc","Qawasqar"],["ald","Alladian"],["ale","Aleut"],["alf","Alege"],["alg","Algonquian languages"],["alh","Alawa"],["ali","Amaimon"],["alj","Alangan"],["alk","Alak"],["all","Allar"],["alm","Amblong"],["aln","Gheg Albanian"],["alo","Larike-Wakasihu"],["alp","Alune"],["alq","Algonquin"],["alr","Alutor"],["als","Tosk Albanian"],["alt","Southern Altai"],["alu","'Are'are"],["alv","Atlantic-Congo languages"],["alw","Alaba-K’abeena, Wanbasana"],["alx","Amol"],["aly","Alyawarr"],["alz","Alur"],["ama","Amanayé"],["amb","Ambo"],["amc","Amahuaca"],["ame","Yanesha'"],["amf","Hamer-Banna"],["amg","Amurdak"],["ami","Amis"],["amj","Amdang"],["amk","Ambai"],["aml","War-Jaintia"],["amm","Ama (Papua New Guinea)"],["amn","Amanab"],["amo","Amo"],["amp","Alamblak"],["amq","Amahai"],["amr","Amarakaeri"],["ams","Southern Amami-Oshima"],["amt","Amto"],["amu","Guerrero Amuzgo"],["amv","Ambelau"],["amw","Western Neo-Aramaic"],["amx","Anmatyerre"],["amy","Ami"],["amz","Atampaya"],["ana","Andaqui"],["anb","Andoa"],["anc","Ngas"],["and","Ansus"],["ane","Xârâcùù"],["anf","Animere"],["ang","Old English (ca. 450-1100)"],["anh","Nend"],["ani","Andi"],["anj","Anor"],["ank","Goemai"],["anl","Anu-Hkongso Chin"],["anm","Anal"],["ann","Obolo"],["ano","Andoque"],["anp","Angika"],["anq","Jarawa (India)"],["anr","Andh"],["ans","Anserma"],["ant","Antakarinya, Antikarinya"],["anu","Anuak"],["anv","Denya"],["anw","Anaang"],["anx","Andra-Hus"],["any","Anyin"],["anz","Anem"],["aoa","Angolar"],["aob","Abom"],["aoc","Pemon"],["aod","Andarum"],["aoe","Angal Enen"],["aof","Bragat"],["aog","Angoram"],["aoh","Arma"],["aoi","Anindilyakwa"],["aoj","Mufian"],["aok","Arhö"],["aol","Alor"],["aom","Ömie"],["aon","Bumbita Arapesh"],["aor","Aore"],["aos","Taikat"],["aot","Atong (India), A'tong"],["aou","A'ou"],["aox","Atorada"],["aoz","Uab Meto"],["apa","Apache languages"],["apb","Sa'a"],["apc","North Levantine Arabic"],["apd","Sudanese Arabic"],["ape","Bukiyip"],["apf","Pahanan Agta"],["apg","Ampanang"],["aph","Athpariya"],["api","Apiaká"],["apj","Jicarilla Apache"],["apk","Kiowa Apache"],["apl","Lipan Apache"],["apm","Mescalero-Chiricahua Apache"],["apn","Apinayé"],["apo","Ambul"],["app","Apma"],["apq","A-Pucikwar"],["apr","Arop-Lokep"],["aps","Arop-Sissano"],["apt","Apatani"],["apu","Apurinã"],["apv","Alapmunte"],["apw","Western Apache"],["apx","Aputai"],["apy","Apalaí"],["apz","Safeyoka"],["aqa","Alacalufan languages"],["aqc","Archi"],["aqd","Ampari Dogon"],["aqg","Arigidi"],["aqk","Aninka"],["aql","Algic languages"],["aqm","Atohwaim"],["aqn","Northern Alta"],["aqp","Atakapa"],["aqr","Arhâ"],["aqt","Angaité"],["aqz","Akuntsu"],["arb","Standard Arabic"],["arc","Official Aramaic (700-300 BCE), Imperial Aramaic (700-300 BCE)"],["ard","Arabana"],["are","Western Arrarnta"],["arh","Arhuaco"],["ari","Arikara"],["arj","Arapaso"],["ark","Arikapú"],["arl","Arabela"],["arn","Mapudungun, Mapuche"],["aro","Araona"],["arp","Arapaho"],["arq","Algerian Arabic"],["arr","Karo (Brazil)"],["ars","Najdi Arabic"],["art","Artificial languages"],["aru","Aruá (Amazonas State), Arawá"],["arv","Arbore"],["arw","Arawak"],["arx","Aruá (Rodonia State)"],["ary","Moroccan Arabic"],["arz","Egyptian Arabic"],["asa","Asu (Tanzania)"],["asb","Assiniboine"],["asc","Casuarina Coast Asmat"],["asd","Asas"],["ase","American Sign Language"],["asf","Auslan, Australian Sign Language"],["asg","Cishingini"],["ash","Abishira"],["asi","Buruwai"],["asj","Sari"],["ask","Ashkun"],["asl","Asilulu"],["asn","Xingú Asuriní"],["aso","Dano"],["asp","Algerian Sign Language"],["asq","Austrian Sign Language"],["asr","Asuri"],["ass","Ipulo"],["ast","Asturian, Asturleonese, Bable, Leonese"],["asu","Tocantins Asurini"],["asv","Asoa"],["asw","Australian Aborigines Sign Language"],["asx","Muratayak"],["asy","Yaosakor Asmat"],["asz","As"],["ata","Pele-Ata"],["atb","Zaiwa"],["atc","Atsahuaca"],["atd","Ata Manobo"],["ate","Atemble"],["atg","Ivbie North-Okpela-Arhe"],["ath","Athapascan languages"],["ati","Attié"],["atj","Atikamekw"],["atk","Ati"],["atl","Mt. Iraya Agta"],["atm","Ata"],["atn","Ashtiani"],["ato","Atong (Cameroon)"],["atp","Pudtol Atta"],["atq","Aralle-Tabulahan"],["atr","Waimiri-Atroari"],["ats","Gros Ventre"],["att","Pamplona Atta"],["atu","Reel"],["atv","Northern Altai"],["atw","Atsugewi"],["atx","Arutani"],["aty","Aneityum"],["atz","Arta"],["aua","Asumboa"],["aub","Alugu"],["auc","Waorani"],["aud","Anuta"],["aue","ǂKxʼauǁʼein"],["auf","Arauan languages"],["aug","Aguna"],["auh","Aushi"],["aui","Anuki"],["auj","Awjilah"],["auk","Heyo"],["aul","Aulua"],["aum","Asu (Nigeria)"],["aun","Molmo One"],["auo","Auyokawa"],["aup","Makayam"],["auq","Anus, Korur"],["aur","Aruek"],["aus","Australian languages"],["aut","Austral"],["auu","Auye"],["auw","Awyi"],["aux","Aurá"],["auy","Awiyaana"],["auz","Uzbeki Arabic"],["avb","Avau"],["avd","Alviri-Vidari"],["avi","Avikam"],["avk","Kotava"],["avl","Eastern Egyptian Bedawi Arabic"],["avm","Angkamuthi"],["avn","Avatime"],["avo","Agavotaguerra"],["avs","Aushiri"],["avt","Au"],["avu","Avokaya"],["avv","Avá-Canoeiro"],["awa","Awadhi"],["awb","Awa (Papua New Guinea)"],["awc","Cicipu"],["awd","Arawakan languages"],["awe","Awetí"],["awg","Anguthimri"],["awh","Awbono"],["awi","Aekyom"],["awk","Awabakal"],["awm","Arawum"],["awn","Awngi"],["awo","Awak"],["awr","Awera"],["aws","South Awyu"],["awt","Araweté"],["awu","Central Awyu"],["awv","Jair Awyu"],["aww","Awun"],["awx","Awara"],["awy","Edera Awyu"],["axb","Abipon"],["axe","Ayerrerenge"],["axg","Mato Grosso Arára"],["axk","Yaka (Central African Republic)"],["axl","Lower Southern Aranda"],["axm","Middle Armenian"],["axx","Xârâgurè"],["aya","Awar"],["ayb","Ayizo Gbe"],["ayc","Southern Aymara"],["ayd","Ayabadhu"],["aye","Ayere"],["ayg","Ginyanga"],["ayh","Hadrami Arabic"],["ayi","Leyigha"],["ayk","Akuku"],["ayl","Libyan Arabic"],["ayn","Sanaani Arabic"],["ayo","Ayoreo"],["ayp","North Mesopotamian Arabic"],["ayq","Ayi (Papua New Guinea)"],["ayr","Central Aymara"],["ays","Sorsogon Ayta"],["ayt","Magbukun Ayta"],["ayu","Ayu"],["ayx","Ayi (China)"],["ayy","Tayabas Ayta"],["ayz","Mai Brat"],["aza","Azha"],["azb","South Azerbaijani"],["azc","Uto-Aztecan languages"],["azd","Eastern Durango Nahuatl"],["azg","San Pedro Amuzgos Amuzgo"],["azj","North Azerbaijani"],["azm","Ipalapa Amuzgo"],["azn","Western Durango Nahuatl"],["azo","Awing"],["azt","Faire Atta"],["azz","Highland Puebla Nahuatl"],["baa","Babatana"],["bab","Bainouk-Gunyuño"],["bac","Badui"],["bad","Banda languages"],["bae","Baré"],["baf","Nubaca"],["bag","Tuki"],["bah","Bahamas Creole English"],["bai","Bamileke languages"],["baj","Barakai"],["bal","Baluchi"],["ban","Balinese"],["bao","Waimaha"],["bap","Bantawa"],["bar","Bavarian"],["bas","Basa (Cameroon)"],["bat","Baltic languages"],["bau","Bada (Nigeria)"],["bav","Vengo"],["baw","Bambili-Bambui"],["bax","Bamun"],["bay","Batuley"],["baz","Tunen"],["bba","Baatonum"],["bbb","Barai"],["bbc","Batak Toba"],["bbd","Bau"],["bbe","Bangba"],["bbf","Baibai"],["bbg","Barama"],["bbh","Bugan"],["bbi","Barombi"],["bbj","Ghomálá'"],["bbk","Babanki"],["bbl","Bats"],["bbm","Babango"],["bbn","Uneapa"],["bbo","Northern Bobo Madaré, Konabéré"],["bbp","West Central Banda"],["bbq","Bamali"],["bbr","Girawa"],["bbs","Bakpinka"],["bbt","Mburku"],["bbu","Kulung (Nigeria)"],["bbv","Karnai"],["bbw","Baba"],["bbx","Bubia"],["bby","Befang"],["bbz","Babalia Creole Arabic"],["bca","Central Bai"],["bcb","Bainouk-Samik"],["bcc","Southern Balochi"],["bcd","North Babar"],["bce","Bamenyam"],["bcf","Bamu"],["bcg","Baga Pokur"],["bch","Bariai"],["bci","Baoulé"],["bcj","Bardi"],["bck","Bunuba"],["bcl","Central Bikol"],["bcm","Bannoni"],["bcn","Bali (Nigeria)"],["bco","Kaluli"],["bcp","Bali (Democratic Republic of Congo)"],["bcq","Bench"],["bcr","Babine"],["bcs","Kohumono"],["bct","Bendi"],["bcu","Awad Bing"],["bcv","Shoo-Minda-Nye"],["bcw","Bana"],["bcy","Bacama"],["bcz","Bainouk-Gunyaamolo"],["bda","Bayot"],["bdb","Basap"],["bdc","Emberá-Baudó"],["bdd","Bunama"],["bde","Bade"],["bdf","Biage"],["bdg","Bonggi"],["bdh","Baka (South Sudan)"],["bdi","Burun"],["bdj","Bai (South Sudan), Bai"],["bdk","Budukh"],["bdl","Indonesian Bajau"],["bdm","Buduma"],["bdn","Baldemu"],["bdo","Morom"],["bdp","Bende"],["bdq","Bahnar"],["bdr","West Coast Bajau"],["bds","Burunge"],["bdt","Bokoto"],["bdu","Oroko"],["bdv","Bodo Parja"],["bdw","Baham"],["bdx","Budong-Budong"],["bdy","Bandjalang"],["bdz","Badeshi"],["bea","Beaver"],["beb","Bebele"],["bec","Iceve-Maci"],["bed","Bedoanas"],["bee","Byangsi"],["bef","Benabena"],["beg","Belait"],["beh","Biali"],["bei","Bekati'"],["bej","Beja, Bedawiyet"],["bek","Bebeli"],["bem","Bemba (Zambia)"],["beo","Beami"],["bep","Besoa"],["beq","Beembe"],["ber","Berber languages"],["bes","Besme"],["bet","Guiberoua Béte"],["beu","Blagar"],["bev","Daloa Bété"],["bew","Betawi"],["bex","Jur Modo"],["bey","Beli (Papua New Guinea)"],["bez","Bena (Tanzania)"],["bfa","Bari"],["bfb","Pauri Bareli"],["bfc","Panyi Bai, Northern Bai"],["bfd","Bafut"],["bfe","Betaf, Tena"],["bff","Bofi"],["bfg","Busang Kayan"],["bfh","Blafe"],["bfi","British Sign Language"],["bfj","Bafanji"],["bfk","Ban Khor Sign Language"],["bfl","Banda-Ndélé"],["bfm","Mmen"],["bfn","Bunak"],["bfo","Malba Birifor"],["bfp","Beba"],["bfq","Badaga"],["bfr","Bazigar"],["bfs","Southern Bai"],["bft","Balti"],["bfu","Gahri"],["bfw","Bondo"],["bfx","Bantayanon"],["bfy","Bagheli"],["bfz","Mahasu Pahari"],["bga","Gwamhi-Wuri"],["bgb","Bobongko"],["bgc","Haryanvi"],["bgd","Rathwi Bareli"],["bge","Bauria"],["bgf","Bangandu"],["bgg","Bugun"],["bgi","Giangan"],["bgj","Bangolan"],["bgk","Bit, Buxinhua"],["bgl","Bo (Laos)"],["bgm","Baga Mboteni"],["bgn","Western Balochi"],["bgo","Baga Koga"],["bgp","Eastern Balochi"],["bgq","Bagri"],["bgr","Bawm Chin"],["bgs","Tagabawa"],["bgt","Bughotu"],["bgu","Mbongno"],["bgv","Warkay-Bipim"],["bgw","Bhatri"],["bgx","Balkan Gagauz Turkish"],["bgy","Benggoi"],["bgz","Banggai"],["bha","Bharia"],["bhb","Bhili"],["bhc","Biga"],["bhd","Bhadrawahi"],["bhe","Bhaya"],["bhf","Odiai"],["bhg","Binandere"],["bhh","Bukharic"],["bhi","Bhilali"],["bhj","Bahing"],["bhk","Albay Bicolano"],["bhl","Bimin"],["bhm","Bathari"],["bhn","Bohtan Neo-Aramaic"],["bho","Bhojpuri"],["bhp","Bima"],["bhq","Tukang Besi South"],["bhr","Bara Malagasy"],["bhs","Buwal"],["bht","Bhattiyali"],["bhu","Bhunjia"],["bhv","Bahau"],["bhw","Biak"],["bhx","Bhalay"],["bhy","Bhele"],["bhz","Bada (Indonesia)"],["bia","Badimaya"],["bib","Bissa, Bisa"],["bic","Bikaru"],["bid","Bidiyo"],["bie","Bepour"],["bif","Biafada"],["big","Biangai"],["bij","Vaghat-Ya-Bijim-Legeri"],["bik","Bikol"],["bil","Bile"],["bim","Bimoba"],["bin","Bini, Edo"],["bio","Nai"],["bip","Bila"],["biq","Bipi"],["bir","Bisorio"],["bit","Berinomo"],["biu","Biete"],["biv","Southern Birifor"],["biw","Kol (Cameroon)"],["bix","Bijori"],["biy","Birhor"],["biz","Baloi"],["bja","Budza"],["bjb","Banggarla"],["bjc","Bariji"],["bjd","Bandjigali"],["bje","Biao-Jiao Mien"],["bjf","Barzani Jewish Neo-Aramaic"],["bjg","Bidyogo"],["bjh","Bahinemo"],["bji","Burji"],["bjj","Kanauji"],["bjk","Barok"],["bjl","Bulu (Papua New Guinea)"],["bjm","Bajelani"],["bjn","Banjar"],["bjo","Mid-Southern Banda"],["bjp","Fanamaket"],["bjq","Southern Betsimisaraka Malagasy"],["bjr","Binumarien"],["bjs","Bajan"],["bjt","Balanta-Ganja"],["bju","Busuu"],["bjv","Bedjond"],["bjw","Bakwé"],["bjx","Banao Itneg"],["bjy","Bayali"],["bjz","Baruga"],["bka","Kyak"],["bkb","Finallig"],["bkc","Baka (Cameroon)"],["bkd","Binukid, Talaandig"],["bkf","Beeke"],["bkg","Buraka"],["bkh","Bakoko"],["bki","Baki"],["bkj","Pande"],["bkk","Brokskat"],["bkl","Berik"],["bkm","Kom (Cameroon)"],["bkn","Bukitan"],["bko","Kwa'"],["bkp","Boko (Democratic Republic of Congo)"],["bkq","Bakairí"],["bkr","Bakumpai"],["bks","Northern Sorsoganon"],["bkt","Boloki"],["bku","Buhid"],["bkv","Bekwarra"],["bkw","Bekwel"],["bkx","Baikeno"],["bky","Bokyi"],["bkz","Bungku"],["bla","Siksika"],["blb","Bilua"],["blc","Bella Coola"],["bld","Bolango"],["ble","Balanta-Kentohe"],["blf","Buol"],["blg","Balau"],["blh","Kuwaa"],["bli","Bolia"],["blj","Bolongan"],["blk","Pa'o Karen, Pa'O"],["bll","Biloxi"],["blm","Beli (South Sudan)"],["bln","Southern Catanduanes Bikol"],["blo","Anii"],["blp","Blablanga"],["blq","Baluan-Pam"],["blr","Blang"],["bls","Balaesang"],["blt","Tai Dam"],["blv","Kibala, Bolo"],["blw","Balangao"],["blx","Mag-Indi Ayta"],["bly","Notre"],["blz","Balantak"],["bma","Lame"],["bmb","Bembe"],["bmc","Biem"],["bmd","Baga Manduri"],["bme","Limassa"],["bmf","Bom-Kim"],["bmg","Bamwe"],["bmh","Kein"],["bmi","Bagirmi"],["bmj","Bote-Majhi"],["bmk","Ghayavi"],["bml","Bomboli"],["bmm","Northern Betsimisaraka Malagasy"],["bmn","Bina (Papua New Guinea)"],["bmo","Bambalang"],["bmp","Bulgebi"],["bmq","Bomu"],["bmr","Muinane"],["bms","Bilma Kanuri"],["bmt","Biao Mon"],["bmu","Somba-Siawari"],["bmv","Bum"],["bmw","Bomwali"],["bmx","Baimak"],["bmy","Bemba (Democratic Republic of Congo)"],["bmz","Baramu"],["bna","Bonerate"],["bnb","Bookan"],["bnc","Bontok"],["bnd","Banda (Indonesia)"],["bne","Bintauna"],["bnf","Masiwang"],["bng","Benga"],["bni","Bangi"],["bnj","Eastern Tawbuid"],["bnk","Bierebo"],["bnl","Boon"],["bnm","Batanga"],["bnn","Bunun"],["bno","Bantoanon"],["bnp","Bola"],["bnq","Bantik"],["bnr","Butmas-Tur"],["bns","Bundeli"],["bnt","Bantu languages"],["bnu","Bentong"],["bnv","Bonerif, Beneraf, Edwas"],["bnw","Bisis"],["bnx","Bangubangu"],["bny","Bintulu"],["bnz","Beezen"],["boa","Bora"],["bob","Aweer"],["boe","Mundabli"],["bof","Bolon"],["bog","Bamako Sign Language"],["boh","Boma"],["boi","Barbareño"],["boj","Anjam"],["bok","Bonjo"],["bol","Bole"],["bom","Berom"],["bon","Bine"],["boo","Tiemacèwè Bozo"],["bop","Bonkiman"],["boq","Bogaya"],["bor","Borôro"],["bot","Bongo"],["bou","Bondei"],["bov","Tuwuli"],["bow","Rema"],["box","Buamu"],["boy","Bodo (Central African Republic)"],["boz","Tiéyaxo Bozo"],["bpa","Daakaka"],["bpb","Barbacoas"],["bpd","Banda-Banda"],["bpe","Bauni"],["bpg","Bonggo"],["bph","Botlikh"],["bpi","Bagupi"],["bpj","Binji"],["bpk","Orowe, 'Ôrôê"],["bpl","Broome Pearling Lugger Pidgin"],["bpm","Biyom"],["bpn","Dzao Min"],["bpo","Anasi"],["bpp","Kaure"],["bpq","Banda Malay"],["bpr","Koronadal Blaan"],["bps","Sarangani Blaan"],["bpt","Barrow Point"],["bpu","Bongu"],["bpv","Bian Marind"],["bpw","Bo (Papua New Guinea)"],["bpx","Palya Bareli"],["bpy","Bishnupriya"],["bpz","Bilba"],["bqa","Tchumbuli"],["bqb","Bagusa"],["bqc","Boko (Benin), Boo"],["bqd","Bung"],["bqf","Baga Kaloum"],["bqg","Bago-Kusuntu"],["bqh","Baima"],["bqi","Bakhtiari"],["bqj","Bandial"],["bqk","Banda-Mbrès"],["bql","Bilakura"],["bqm","Wumboko"],["bqn","Bulgarian Sign Language"],["bqo","Balo"],["bqp","Busa"],["bqq","Biritai"],["bqr","Burusu"],["bqs","Bosngun"],["bqt","Bamukumbit"],["bqu","Boguru"],["bqv","Koro Wachi, Begbere-Ejar"],["bqw","Buru (Nigeria)"],["bqx","Baangi"],["bqy","Bengkala Sign Language"],["bqz","Bakaka"],["bra","Braj"],["brb","Lave"],["brc","Berbice Creole Dutch"],["brd","Baraamu"],["brf","Bira"],["brg","Baure"],["brh","Brahui"],["bri","Mokpwe"],["brj","Bieria"],["brk","Birked"],["brl","Birwa"],["brm","Barambu"],["brn","Boruca"],["bro","Brokkat"],["brp","Barapasi"],["brq","Breri"],["brr","Birao"],["brs","Baras"],["brt","Bitare"],["bru","Eastern Bru"],["brv","Western Bru"],["brw","Bellari"],["brx","Bodo (India)"],["bry","Burui"],["brz","Bilbil"],["bsa","Abinomn"],["bsb","Brunei Bisaya"],["bsc","Bassari, Oniyan"],["bse","Wushi"],["bsf","Bauchi"],["bsg","Bashkardi"],["bsh","Kati"],["bsi","Bassossi"],["bsj","Bangwinji"],["bsk","Burushaski"],["bsl","Basa-Gumna"],["bsm","Busami"],["bsn","Barasana-Eduria"],["bso","Buso"],["bsp","Baga Sitemu"],["bsq","Bassa"],["bsr","Bassa-Kontagora"],["bss","Akoose"],["bst","Basketo"],["bsu","Bahonsuai"],["bsv","Baga Sobané"],["bsw","Baiso"],["bsx","Yangkam"],["bsy","Sabah Bisaya"],["bta","Bata"],["btb","Beti (Cameroon)"],["btc","Bati (Cameroon)"],["btd","Batak Dairi"],["bte","Gamo-Ningi"],["btf","Birgit"],["btg","Gagnoa Bété"],["bth","Biatah Bidayuh"],["bti","Burate"],["btj","Bacanese Malay"],["btk","Batak languages"],["btl","Bhatola"],["btm","Batak Mandailing"],["btn","Ratagnon"],["bto","Rinconada Bikol"],["btp","Budibud"],["btq","Batek"],["btr","Baetora"],["bts","Batak Simalungun"],["btt","Bete-Bendi"],["btu","Batu"],["btv","Bateri"],["btw","Butuanon"],["btx","Batak Karo"],["bty","Bobot"],["btz","Batak Alas-Kluet"],["bua","Buriat"],["bub","Bua"],["buc","Bushi"],["bud","Ntcham"],["bue","Beothuk"],["buf","Bushoong"],["bug","Buginese"],["buh","Younuo Bunu"],["bui","Bongili"],["buj","Basa-Gurmana"],["buk","Bugawac"],["bum","Bulu (Cameroon)"],["bun","Sherbro"],["buo","Terei"],["bup","Busoa"],["buq","Brem"],["bus","Bokobaru"],["but","Bungain"],["buu","Budu"],["buv","Bun"],["buw","Bubi"],["bux","Boghom"],["buy","Bullom So"],["buz","Bukwen"],["bva","Barein"],["bvb","Bube"],["bvc","Baelelea"],["bvd","Baeggu"],["bve","Berau Malay"],["bvf","Boor"],["bvg","Bonkeng"],["bvh","Bure"],["bvi","Belanda Viri"],["bvj","Baan"],["bvk","Bukat"],["bvl","Bolivian Sign Language"],["bvm","Bamunka"],["bvn","Buna"],["bvo","Bolgo"],["bvp","Bumang"],["bvq","Birri"],["bvr","Burarra"],["bvt","Bati (Indonesia)"],["bvu","Bukit Malay"],["bvv","Baniva"],["bvw","Boga"],["bvx","Dibole"],["bvy","Baybayanon"],["bvz","Bauzi"],["bwa","Bwatoo"],["bwb","Namosi-Naitasiri-Serua"],["bwc","Bwile"],["bwd","Bwaidoka"],["bwe","Bwe Karen"],["bwf","Boselewa"],["bwg","Barwe"],["bwh","Bishuo"],["bwi","Baniwa"],["bwj","Láá Láá Bwamu"],["bwk","Bauwaki"],["bwl","Bwela"],["bwm","Biwat"],["bwn","Wunai Bunu"],["bwo","Boro (Ethiopia), Borna (Ethiopia)"],["bwp","Mandobo Bawah"],["bwq","Southern Bobo Madaré"],["bwr","Bura-Pabir"],["bws","Bomboma"],["bwt","Bafaw-Balong"],["bwu","Buli (Ghana)"],["bww","Bwa"],["bwx","Bu-Nao Bunu"],["bwy","Cwi Bwamu"],["bwz","Bwisi"],["bxa","Tairaha"],["bxb","Belanda Bor"],["bxc","Molengue"],["bxd","Pela"],["bxe","Birale"],["bxf","Bilur, Minigir"],["bxg","Bangala"],["bxh","Buhutu"],["bxi","Pirlatapa"],["bxj","Bayungu"],["bxk","Bukusu, Lubukusu"],["bxl","Jalkunan"],["bxm","Mongolia Buriat"],["bxn","Burduna"],["bxo","Barikanchi"],["bxp","Bebil"],["bxq","Beele"],["bxr","Russia Buriat"],["bxs","Busam"],["bxu","China Buriat"],["bxv","Berakou"],["bxw","Bankagooma"],["bxx","Borna (Democratic Republic of Congo)"],["bxz","Binahari"],["bya","Batak"],["byb","Bikya"],["byc","Ubaghara"],["byd","Benyadu'"],["bye","Pouye"],["byf","Bete"],["byg","Baygo"],["byh","Bhujel"],["byi","Buyu"],["byj","Bina (Nigeria)"],["byk","Biao"],["byl","Bayono"],["bym","Bidjara"],["byn","Bilin, Blin"],["byo","Biyo"],["byp","Bumaji"],["byq","Basay"],["byr","Baruya, Yipma"],["bys","Burak"],["byt","Berti"],["byv","Medumba"],["byw","Belhariya"],["byx","Qaqet"],["byy","Buya"],["byz","Banaro"],["bza","Bandi"],["bzb","Andio"],["bzc","Southern Betsimisaraka Malagasy"],["bzd","Bribri"],["bze","Jenaama Bozo"],["bzf","Boikin"],["bzg","Babuza"],["bzh","Mapos Buang"],["bzi","Bisu"],["bzj","Belize Kriol English"],["bzk","Nicaragua Creole English"],["bzl","Boano (Sulawesi)"],["bzm","Bolondo"],["bzn","Boano (Maluku)"],["bzo","Bozaba"],["bzp","Kemberano"],["bzq","Buli (Indonesia)"],["bzr","Biri"],["bzs","Brazilian Sign Language"],["bzt","Brithenig"],["bzu","Burmeso"],["bzv","Naami"],["bzw","Basa (Nigeria)"],["bzx","Kɛlɛngaxo Bozo"],["bzy","Obanliku"],["bzz","Evant"],["caa","Chortí"],["cab","Garifuna"],["cac","Chuj"],["cad","Caddo"],["cae","Lehar, Laalaa"],["caf","Southern Carrier"],["cag","Nivaclé"],["cah","Cahuarano"],["cai","Central American Indian languages"],["caj","Chané"],["cak","Kaqchikel, Cakchiquel"],["cal","Carolinian"],["cam","Cemuhî"],["can","Chambri"],["cao","Chácobo"],["cap","Chipaya"],["caq","Car Nicobarese"],["car","Galibi Carib"],["cas","Tsimané"],["cau","Caucasian languages"],["cav","Cavineña"],["caw","Callawalla"],["cax","Chiquitano"],["cay","Cayuga"],["caz","Canichana"],["cba","Chibchan languages"],["cbb","Cabiyarí"],["cbc","Carapana"],["cbd","Carijona"],["cbe","Chipiajes"],["cbg","Chimila"],["cbh","Cagua"],["cbi","Chachi"],["cbj","Ede Cabe"],["cbk","Chavacano"],["cbl","Bualkhaw Chin"],["cbn","Nyahkur"],["cbo","Izora"],["cbq","Tsucuba, Cuba"],["cbr","Cashibo-Cacataibo"],["cbs","Cashinahua"],["cbt","Chayahuita"],["cbu","Candoshi-Shapra"],["cbv","Cacua"],["cbw","Kinabalian"],["cby","Carabayo"],["cca","Cauca"],["ccc","Chamicuro"],["ccd","Cafundo Creole"],["cce","Chopi"],["ccg","Samba Daka"],["cch","Atsam"],["ccj","Kasanga"],["ccl","Cutchi-Swahili"],["ccm","Malaccan Creole Malay"],["ccn","North Caucasian languages"],["cco","Comaltepec Chinantec"],["ccp","Chakma"],["ccq","Chaungtha"],["ccr","Cacaopera"],["ccs","South Caucasian languages"],["cda","Choni"],["cdc","Chadic languages"],["cdd","Caddoan languages"],["cde","Chenchu"],["cdf","Chiru"],["cdg","Chamari"],["cdh","Chambeali"],["cdi","Chodri"],["cdj","Churahi"],["cdm","Chepang"],["cdn","Chaudangsi"],["cdo","Min Dong Chinese"],["cdr","Cinda-Regi-Tiyal"],["cds","Chadian Sign Language"],["cdy","Chadong"],["cdz","Koda"],["cea","Lower Chehalis"],["ceb","Cebuano"],["ceg","Chamacoco"],["cek","Eastern Khumi Chin"],["cel","Celtic languages"],["cen","Cen"],["cet","Centúúm"],["cey","Ekai Chin"],["cfa","Dijim-Bwilim"],["cfd","Cara"],["cfg","Como Karim"],["cfm","Falam Chin"],["cga","Changriwa"],["cgc","Kagayanen"],["cgg","Chiga"],["cgk","Chocangacakha"],["chb","Chibcha"],["chc","Catawba"],["chd","Highland Oaxaca Chontal"],["chf","Tabasco Chontal"],["chg","Chagatai"],["chh","Chinook"],["chj","Ojitlán Chinantec"],["chk","Chuukese"],["chl","Cahuilla"],["chm","Mari (Russia)"],["chn","Chinook jargon"],["cho","Choctaw"],["chp","Chipewyan, Dene Suline"],["chq","Quiotepec Chinantec"],["chr","Cherokee"],["cht","Cholón"],["chw","Chuwabu"],["chx","Chantyal"],["chy","Cheyenne"],["chz","Ozumacín Chinantec"],["cia","Cia-Cia"],["cib","Ci Gbe"],["cic","Chickasaw"],["cid","Chimariko"],["cie","Cineni"],["cih","Chinali"],["cik","Chitkuli Kinnauri"],["cim","Cimbrian"],["cin","Cinta Larga"],["cip","Chiapanec"],["cir","Tiri, Haméa, Méa"],["ciw","Chippewa"],["ciy","Chaima"],["cja","Western Cham"],["cje","Chru"],["cjh","Upper Chehalis"],["cji","Chamalal"],["cjk","Chokwe"],["cjm","Eastern Cham"],["cjn","Chenapian"],["cjo","Ashéninka Pajonal"],["cjp","Cabécar"],["cjr","Chorotega"],["cjs","Shor"],["cjv","Chuave"],["cjy","Jinyu Chinese"],["cka","Khumi Awa Chin"],["ckb","Central Kurdish"],["ckh","Chak"],["ckl","Cibak"],["ckm","Chakavian"],["ckn","Kaang Chin"],["cko","Anufo"],["ckq","Kajakse"],["ckr","Kairak"],["cks","Tayo"],["ckt","Chukot"],["cku","Koasati"],["ckv","Kavalan"],["ckx","Caka"],["cky","Cakfem-Mushere"],["ckz","Cakchiquel-Quiché Mixed Language"],["cla","Ron"],["clc","Chilcotin"],["cld","Chaldean Neo-Aramaic"],["cle","Lealao Chinantec"],["clh","Chilisso"],["cli","Chakali"],["clj","Laitu Chin"],["clk","Idu-Mishmi"],["cll","Chala"],["clm","Clallam"],["clo","Lowland Oaxaca Chontal"],["clt","Lautu Chin"],["clu","Caluyanun"],["clw","Chulym"],["cly","Eastern Highland Chatino"],["cma","Maa"],["cmc","Chamic languages"],["cme","Cerma"],["cmg","Classical Mongolian"],["cmi","Emberá-Chamí"],["cmk","Chimakum"],["cml","Campalagian"],["cmm","Michigamea"],["cmn","Mandarin Chinese"],["cmo","Central Mnong"],["cmr","Mro-Khimi Chin"],["cms","Messapic"],["cmt","Camtho"],["cna","Changthang"],["cnb","Chinbon Chin"],["cnc","Côông"],["cng","Northern Qiang"],["cnh","Hakha Chin, Haka Chin"],["cni","Asháninka"],["cnk","Khumi Chin"],["cnl","Lalana Chinantec"],["cno","Con"],["cnp","Northern Ping Chinese, Northern Pinghua"],["cnr","Montenegrin"],["cns","Central Asmat"],["cnt","Tepetotutla Chinantec"],["cnu","Chenoua"],["cnw","Ngawn Chin"],["cnx","Middle Cornish"],["coa","Cocos Islands Malay"],["cob","Chicomuceltec"],["coc","Cocopa"],["cod","Cocama-Cocamilla"],["coe","Koreguaje"],["cof","Colorado"],["cog","Chong"],["coh","Chonyi-Dzihana-Kauma, Chichonyi-Chidzihana-Chikauma"],["coj","Cochimi"],["cok","Santa Teresa Cora"],["col","Columbia-Wenatchi"],["com","Comanche"],["con","Cofán"],["coo","Comox"],["cop","Coptic"],["coq","Coquille"],["cot","Caquinte"],["cou","Wamey"],["cov","Cao Miao"],["cow","Cowlitz"],["cox","Nanti"],["coy","Coyaima"],["coz","Chochotec"],["cpa","Palantla Chinantec"],["cpb","Ucayali-Yurúa Ashéninka"],["cpc","Ajyíninka Apurucayali"],["cpe","English-based creoles and pidgins"],["cpf","French-based creoles and pidgins"],["cpg","Cappadocian Greek"],["cpi","Chinese Pidgin English"],["cpn","Cherepon"],["cpo","Kpeego"],["cpp","Portuguese-based creoles and pidgins"],["cps","Capiznon"],["cpu","Pichis Ashéninka"],["cpx","Pu-Xian Chinese"],["cpy","South Ucayali Ashéninka"],["cqd","Chuanqiandian Cluster Miao"],["cqu","Chilean Quechua"],["cra","Chara"],["crb","Island Carib"],["crc","Lonwolwol"],["crd","Coeur d'Alene"],["crf","Caramanta"],["crg","Michif"],["crh","Crimean Tatar, Crimean Turkish"],["cri","Sãotomense"],["crj","Southern East Cree"],["crk","Plains Cree"],["crl","Northern East Cree"],["crm","Moose Cree"],["crn","El Nayar Cora"],["cro","Crow"],["crp","Creoles and pidgins"],["crq","Iyo'wujwa Chorote"],["crr","Carolina Algonquian"],["crs","Seselwa Creole French"],["crt","Iyojwa'ja Chorote"],["crv","Chaura"],["crw","Chrau"],["crx","Carrier"],["cry","Cori"],["crz","Cruzeño"],["csa","Chiltepec Chinantec"],["csb","Kashubian"],["csc","Catalan Sign Language, Lengua de señas catalana, Llengua de Signes Catalana"],["csd","Chiangmai Sign Language"],["cse","Czech Sign Language"],["csf","Cuba Sign Language"],["csg","Chilean Sign Language"],["csh","Asho Chin"],["csi","Coast Miwok"],["csj","Songlai Chin"],["csk","Jola-Kasa"],["csl","Chinese Sign Language"],["csm","Central Sierra Miwok"],["csn","Colombian Sign Language"],["cso","Sochiapam Chinantec, Sochiapan Chinantec"],["csp","Southern Ping Chinese, Southern Pinghua"],["csq","Croatia Sign Language"],["csr","Costa Rican Sign Language"],["css","Southern Ohlone"],["cst","Northern Ohlone"],["csu","Central Sudanic languages"],["csv","Sumtu Chin"],["csw","Swampy Cree"],["csx","Cambodian Sign Language"],["csy","Siyin Chin"],["csz","Coos"],["cta","Tataltepec Chatino"],["ctc","Chetco"],["ctd","Tedim Chin"],["cte","Tepinapa Chinantec"],["ctg","Chittagonian"],["cth","Thaiphum Chin"],["ctl","Tlacoatzintepec Chinantec"],["ctm","Chitimacha"],["ctn","Chhintange"],["cto","Emberá-Catío"],["ctp","Western Highland Chatino"],["cts","Northern Catanduanes Bikol"],["ctt","Wayanad Chetti"],["ctu","Chol"],["cty","Moundadan Chetty"],["ctz","Zacatepec Chatino"],["cua","Cua"],["cub","Cubeo"],["cuc","Usila Chinantec"],["cug","Chungmboko, Cung"],["cuh","Chuka, Gichuka"],["cui","Cuiba"],["cuj","Mashco Piro"],["cuk","San Blas Kuna"],["cul","Culina, Kulina"],["cum","Cumeral"],["cuo","Cumanagoto"],["cup","Cupeño"],["cuq","Cun"],["cur","Chhulung"],["cus","Cushitic languages"],["cut","Teutila Cuicatec"],["cuu","Tai Ya"],["cuv","Cuvok"],["cuw","Chukwa"],["cux","Tepeuxila Cuicatec"],["cuy","Cuitlatec"],["cvg","Chug"],["cvn","Valle Nacional Chinantec"],["cwa","Kabwa"],["cwb","Maindo"],["cwd","Woods Cree"],["cwe","Kwere"],["cwg","Chewong, Cheq Wong"],["cwt","Kuwaataay"],["cya","Nopala Chatino"],["cyb","Cayubaba"],["cyo","Cuyonon"],["czh","Huizhou Chinese"],["czk","Knaanic"],["czn","Zenzontepec Chatino"],["czo","Min Zhong Chinese"],["czt","Zotung Chin"],["daa","Dangaléat"],["dac","Dambi"],["dad","Marik"],["dae","Duupa"],["daf","Dan"],["dag","Dagbani"],["dah","Gwahatike"],["dai","Day"],["daj","Dar Fur Daju"],["dak","Dakota"],["dal","Dahalo"],["dam","Damakawa"],["dao","Daai Chin"],["dap","Nisi (India)"],["daq","Dandami Maria"],["dar","Dargwa"],["das","Daho-Doo"],["dau","Dar Sila Daju"],["dav","Taita, Dawida"],["daw","Davawenyo"],["dax","Dayi"],["day","Land Dayak languages"],["daz","Dao"],["dba","Bangime"],["dbb","Deno"],["dbd","Dadiya"],["dbe","Dabe"],["dbf","Edopi"],["dbg","Dogul Dom Dogon"],["dbi","Doka"],["dbj","Ida'an"],["dbl","Dyirbal"],["dbm","Duguri"],["dbn","Duriankere"],["dbo","Dulbu"],["dbp","Duwai"],["dbq","Daba"],["dbr","Dabarre"],["dbt","Ben Tey Dogon"],["dbu","Bondum Dom Dogon"],["dbv","Dungu"],["dbw","Bankan Tey Dogon"],["dby","Dibiyaso"],["dcc","Deccan"],["dcr","Negerhollands"],["dda","Dadi Dadi"],["ddd","Dongotono"],["dde","Doondo"],["ddg","Fataluku"],["ddi","West Goodenough"],["ddj","Jaru"],["ddn","Dendi (Benin)"],["ddo","Dido"],["ddr","Dhudhuroa"],["dds","Donno So Dogon"],["ddw","Dawera-Daweloor"],["dec","Dagik"],["ded","Dedua"],["dee","Dewoin"],["def","Dezfuli"],["deg","Degema"],["deh","Dehwari"],["dei","Demisa"],["dek","Dek"],["del","Delaware"],["dem","Dem"],["den","Slave (Athapascan)"],["dep","Pidgin Delaware"],["deq","Dendi (Central African Republic)"],["der","Deori"],["des","Desano"],["dev","Domung"],["dez","Dengese"],["dga","Southern Dagaare"],["dgb","Bunoge Dogon"],["dgc","Casiguran Dumagat Agta"],["dgd","Dagaari Dioula"],["dge","Degenan"],["dgg","Doga"],["dgh","Dghwede"],["dgi","Northern Dagara"],["dgk","Dagba"],["dgl","Andaandi, Dongolawi"],["dgn","Dagoman"],["dgo","Dogri (individual language)"],["dgr","Dogrib, Tłı̨chǫ"],["dgs","Dogoso"],["dgt","Ndra'ngith"],["dgu","Degaru"],["dgw","Daungwurrung"],["dgx","Doghoro"],["dgz","Daga"],["dha","Dhanwar (India)"],["dhd","Dhundari"],["dhg","Dhangu-Djangu, Dhangu, Djangu"],["dhi","Dhimal"],["dhl","Dhalandji"],["dhm","Zemba"],["dhn","Dhanki"],["dho","Dhodia"],["dhr","Dhargari"],["dhs","Dhaiso"],["dhu","Dhurga"],["dhv","Dehu, Drehu"],["dhw","Dhanwar (Nepal)"],["dhx","Dhungaloo"],["dia","Dia"],["dib","South Central Dinka"],["dic","Lakota Dida"],["did","Didinga"],["dif","Dieri, Diyari"],["dig","Digo, Chidigo"],["dih","Kumiai"],["dii","Dimbong"],["dij","Dai"],["dik","Southwestern Dinka"],["dil","Dilling"],["dim","Dime"],["din","Dinka"],["dio","Dibo"],["dip","Northeastern Dinka"],["diq","Dimli (individual language)"],["dir","Dirim"],["dis","Dimasa"],["dit","Dirari"],["diu","Diriku"],["diw","Northwestern Dinka"],["dix","Dixon Reef"],["diy","Diuwe"],["diz","Ding"],["dja","Djadjawurrung"],["djb","Djinba"],["djc","Dar Daju Daju"],["djd","Djamindjung, Ngaliwurru"],["dje","Zarma"],["djf","Djangun"],["dji","Djinang"],["djj","Djeebbana"],["djk","Eastern Maroon Creole, Businenge Tongo, Nenge"],["djl","Djiwarli"],["djm","Jamsay Dogon"],["djn","Jawoyn, Djauan"],["djo","Jangkang"],["djr","Djambarrpuyngu"],["dju","Kapriman"],["djw","Djawi"],["dka","Dakpakha"],["dkg","Kadung"],["dkk","Dakka"],["dkl","Kolum So Dogon"],["dkr","Kuijau"],["dks","Southeastern Dinka"],["dkx","Mazagway"],["dlg","Dolgan"],["dlk","Dahalik"],["dlm","Dalmatian"],["dln","Darlong"],["dma","Duma"],["dmb","Mombo Dogon"],["dmc","Gavak"],["dmd","Madhi Madhi"],["dme","Dugwor"],["dmf","Medefaidrin"],["dmg","Upper Kinabatangan"],["dmk","Domaaki"],["dml","Dameli"],["dmm","Dama"],["dmn","Mande languages"],["dmo","Kemedzung"],["dmr","East Damar"],["dms","Dampelas"],["dmu","Dubu, Tebi"],["dmv","Dumpas"],["dmw","Mudburra"],["dmx","Dema"],["dmy","Demta, Sowari"],["dna","Upper Grand Valley Dani"],["dnd","Daonda"],["dne","Ndendeule"],["dng","Dungan"],["dni","Lower Grand Valley Dani"],["dnj","Dan"],["dnk","Dengka"],["dnn","Dzùùngoo"],["dno","Ndrulo, Northern Lendu"],["dnr","Danaru"],["dnt","Mid Grand Valley Dani"],["dnu","Danau"],["dnv","Danu"],["dnw","Western Dani"],["dny","Dení"],["doa","Dom"],["dob","Dobu"],["doc","Northern Dong"],["doe","Doe"],["dof","Domu"],["doh","Dong"],["doi","Dogri (macrolanguage)"],["dok","Dondo"],["dol","Doso"],["don","Toura (Papua New Guinea)"],["doo","Dongo"],["dop","Lukpa"],["doq","Dominican Sign Language"],["dor","Dori'o"],["dos","Dogosé"],["dot","Dass"],["dov","Dombe"],["dow","Doyayo"],["dox","Bussa"],["doy","Dompo"],["doz","Dorze"],["dpp","Papar"],["dra","Dravidian languages"],["drb","Dair"],["drc","Minderico"],["drd","Darmiya"],["dre","Dolpo"],["drg","Rungus"],["drh","Darkhat"],["dri","C'Lela"],["drl","Paakantyi"],["drn","West Damar"],["dro","Daro-Matu Melanau"],["drq","Dura"],["drr","Dororo"],["drs","Gedeo"],["drt","Drents"],["dru","Rukai"],["drw","Darwazi"],["dry","Darai"],["dsb","Lower Sorbian"],["dse","Dutch Sign Language"],["dsh","Daasanach"],["dsi","Disa"],["dsl","Danish Sign Language"],["dsn","Dusner"],["dso","Desiya"],["dsq","Tadaksahak"],["dta","Daur"],["dtb","Labuk-Kinabatangan Kadazan"],["dtd","Ditidaht"],["dth","Adithinngithigh"],["dti","Ana Tinga Dogon"],["dtk","Tene Kan Dogon"],["dtm","Tomo Kan Dogon"],["dtn","Daatsʼíin"],["dto","Tommo So Dogon"],["dtp","Kadazan Dusun, Central Dusun"],["dtr","Lotud"],["dts","Toro So Dogon"],["dtt","Toro Tegu Dogon"],["dtu","Tebul Ure Dogon"],["dty","Dotyali"],["dua","Duala"],["dub","Dubli"],["duc","Duna"],["dud","Hun-Saare"],["due","Umiray Dumaget Agta"],["duf","Dumbea, Drubea"],["dug","Duruma, Chiduruma"],["duh","Dungra Bhil"],["dui","Dumun"],["duj","Dhuwal"],["duk","Uyajitaya"],["dul","Alabat Island Agta"],["dum","Middle Dutch (ca. 1050-1350)"],["dun","Dusun Deyah"],["duo","Dupaninan Agta"],["dup","Duano"],["duq","Dusun Malang"],["dur","Dii"],["dus","Dumi"],["duu","Drung"],["duv","Duvle"],["duw","Dusun Witu"],["dux","Duungooma"],["duy","Dicamay Agta"],["duz","Duli-Gey"],["dva","Duau"],["dwa","Diri"],["dwk","Dawik Kui"],["dwl","Walo Kumbe Dogon"],["dwr","Dawro"],["dws","Dutton World Speedwords"],["dwu","Dhuwal"],["dww","Dawawa"],["dwy","Dhuwaya"],["dwz","Dewas Rai"],["dya","Dyan"],["dyb","Dyaberdyaber"],["dyd","Dyugun"],["dyg","Villa Viciosa Agta"],["dyi","Djimini Senoufo"],["dym","Yanda Dom Dogon"],["dyn","Dyangadi, Dhanggatti"],["dyo","Jola-Fonyi"],["dyu","Dyula"],["dyy","Djabugay, Dyaabugay"],["dza","Tunzu"],["dzd","Daza"],["dze","Djiwarli"],["dzg","Dazaga"],["dzl","Dzalakha"],["dzn","Dzando"],["eaa","Karenggapa"],["ebc","Beginci"],["ebg","Ebughu"],["ebk","Eastern Bontok"],["ebo","Teke-Ebo"],["ebr","Ebrié"],["ebu","Embu, Kiembu"],["ecr","Eteocretan"],["ecs","Ecuadorian Sign Language"],["ecy","Eteocypriot"],["eee","E"],["efa","Efai"],["efe","Efe"],["efi","Efik"],["ega","Ega"],["egl","Emilian"],["ego","Eggon"],["egx","Egyptian languages"],["egy","Egyptian (Ancient)"],["ehs","Miyakubo Sign Language"],["ehu","Ehueun"],["eip","Eipomek"],["eit","Eitiep"],["eiv","Askopan"],["eja","Ejamat"],["eka","Ekajuk"],["ekc","Eastern Karnic"],["eke","Ekit"],["ekg","Ekari"],["eki","Eki"],["ekk","Standard Estonian"],["ekl","Kol (Bangladesh), Kol"],["ekm","Elip"],["eko","Koti"],["ekp","Ekpeye"],["ekr","Yace"],["eky","Eastern Kayah"],["ele","Elepi"],["elh","El Hugeirat"],["eli","Nding"],["elk","Elkei"],["elm","Eleme"],["elo","El Molo"],["elp","Elpaputih"],["elu","Elu"],["elx","Elamite"],["ema","Emai-Iuleha-Ora"],["emb","Embaloh"],["eme","Emerillon"],["emg","Eastern Meohang"],["emi","Mussau-Emira"],["emk","Eastern Maninkakan"],["emm","Mamulique"],["emn","Eman"],["emo","Emok"],["emp","Northern Emberá"],["emq","Eastern Minyag"],["ems","Pacific Gulf Yupik"],["emu","Eastern Muria"],["emw","Emplawas"],["emx","Erromintxela"],["emy","Epigraphic Mayan"],["emz","Mbessa"],["ena","Apali"],["enb","Markweeta"],["enc","En"],["end","Ende"],["enf","Forest Enets"],["enh","Tundra Enets"],["enl","Enlhet"],["enm","Middle English (1100-1500)"],["enn","Engenni"],["eno","Enggano"],["enq","Enga"],["enr","Emumu, Emem"],["enu","Enu"],["env","Enwan (Edu State)"],["enw","Enwan (Akwa Ibom State)"],["enx","Enxet"],["eot","Beti (Côte d'Ivoire)"],["epi","Epie"],["era","Eravallan"],["erg","Sie"],["erh","Eruwa"],["eri","Ogea"],["erk","South Efate"],["ero","Horpa"],["err","Erre"],["ers","Ersu"],["ert","Eritai"],["erw","Erokwanas"],["ese","Ese Ejja"],["esg","Aheri Gondi"],["esh","Eshtehardi"],["esi","North Alaskan Inupiatun"],["esk","Northwest Alaska Inupiatun"],["esl","Egypt Sign Language"],["esm","Esuma"],["esn","Salvadoran Sign Language"],["eso","Estonian Sign Language"],["esq","Esselen"],["ess","Central Siberian Yupik"],["esu","Central Yupik"],["esx","Eskimo-Aleut languages"],["esy","Eskayan"],["etb","Etebi"],["etc","Etchemin"],["eth","Ethiopian Sign Language"],["etn","Eton (Vanuatu)"],["eto","Eton (Cameroon)"],["etr","Edolo"],["ets","Yekhee"],["ett","Etruscan"],["etu","Ejagham"],["etx","Eten"],["etz","Semimi"],["euq","Basque (family)"],["eve","Even"],["evh","Uvbie"],["evn","Evenki"],["ewo","Ewondo"],["ext","Extremaduran"],["eya","Eyak"],["eyo","Keiyo"],["eza","Ezaa"],["eze","Uzekwe"],["faa","Fasu"],["fab","Fa d'Ambu"],["fad","Wagi"],["faf","Fagani"],["fag","Finongan"],["fah","Baissa Fali"],["fai","Faiwol"],["faj","Faita"],["fak","Fang (Cameroon)"],["fal","South Fali"],["fam","Fam"],["fan","Fang (Equatorial Guinea)"],["fap","Paloor"],["far","Fataleka"],["fat","Fanti"],["fau","Fayu"],["fax","Fala"],["fay","Southwestern Fars"],["faz","Northwestern Fars"],["fbl","West Albay Bikol"],["fcs","Quebec Sign Language"],["fer","Feroge"],["ffi","Foia Foia"],["ffm","Maasina Fulfulde"],["fgr","Fongoro"],["fia","Nobiin"],["fie","Fyer"],["fif","Faifi"],["fil","Filipino, Pilipino"],["fip","Fipa"],["fir","Firan"],["fit","Tornedalen Finnish"],["fiu","Finno-Ugrian languages"],["fiw","Fiwaga"],["fkk","Kirya-Konzəl"],["fkv","Kven Finnish"],["fla","Kalispel-Pend d'Oreille"],["flh","Foau"],["fli","Fali"],["fll","North Fali"],["fln","Flinders Island"],["flr","Fuliiru"],["fly","Flaaitaal, Tsotsitaal"],["fmp","Fe'fe'"],["fmu","Far Western Muria"],["fnb","Fanbak"],["fng","Fanagalo"],["fni","Fania"],["fod","Foodo"],["foi","Foi"],["fom","Foma"],["fon","Fon"],["for","Fore"],["fos","Siraya"],["fox","Formosan languages"],["fpe","Fernando Po Creole English"],["fqs","Fas"],["frc","Cajun French"],["frd","Fordata"],["frk","Frankish"],["frm","Middle French (ca. 1400-1600)"],["fro","Old French (842-ca. 1400)"],["frp","Arpitan, Francoprovençal"],["frq","Forak"],["frr","Northern Frisian"],["frs","Eastern Frisian"],["frt","Fortsenal"],["fse","Finnish Sign Language"],["fsl","French Sign Language"],["fss","Finland-Swedish Sign Language, finlandssvenskt teckenspråk, suomenruotsalainen viittomakieli"],["fub","Adamawa Fulfulde"],["fuc","Pulaar"],["fud","East Futuna"],["fue","Borgu Fulfulde"],["fuf","Pular"],["fuh","Western Niger Fulfulde"],["fui","Bagirmi Fulfulde"],["fuj","Ko"],["fum","Fum"],["fun","Fulniô"],["fuq","Central-Eastern Niger Fulfulde"],["fur","Friulian"],["fut","Futuna-Aniwa"],["fuu","Furu"],["fuv","Nigerian Fulfulde"],["fuy","Fuyug"],["fvr","Fur"],["fwa","Fwâi"],["fwe","Fwe"],["gaa","Ga"],["gab","Gabri"],["gac","Mixed Great Andamanese"],["gad","Gaddang"],["gae","Guarequena"],["gaf","Gende"],["gag","Gagauz"],["gah","Alekano"],["gai","Borei"],["gaj","Gadsup"],["gak","Gamkonora"],["gal","Galolen"],["gam","Kandawo"],["gan","Gan Chinese"],["gao","Gants"],["gap","Gal"],["gaq","Gata'"],["gar","Galeya"],["gas","Adiwasi Garasia"],["gat","Kenati"],["gau","Mudhili Gadaba"],["gav","Gabutamon"],["gaw","Nobonob"],["gax","Borana-Arsi-Guji Oromo"],["gay","Gayo"],["gaz","West Central Oromo"],["gba","Gbaya (Central African Republic)"],["gbb","Kaytetye"],["gbc","Garawa"],["gbd","Karajarri"],["gbe","Niksek"],["gbf","Gaikundi"],["gbg","Gbanziri"],["gbh","Defi Gbe"],["gbi","Galela"],["gbj","Bodo Gadaba"],["gbk","Gaddi"],["gbl","Gamit"],["gbm","Garhwali"],["gbn","Mo'da"],["gbo","Northern Grebo"],["gbp","Gbaya-Bossangoa"],["gbq","Gbaya-Bozoum"],["gbr","Gbagyi"],["gbs","Gbesi Gbe"],["gbu","Gagadu"],["gbv","Gbanu"],["gbw","Gabi-Gabi"],["gbx","Eastern Xwla Gbe"],["gby","Gbari"],["gbz","Zoroastrian Dari"],["gcc","Mali"],["gcd","Ganggalida"],["gce","Galice"],["gcf","Guadeloupean Creole French"],["gcl","Grenadian Creole English"],["gcn","Gaina"],["gcr","Guianese Creole French"],["gct","Colonia Tovar German"],["gda","Gade Lohar"],["gdb","Pottangi Ollar Gadaba"],["gdc","Gugu Badhun"],["gdd","Gedaged"],["gde","Gude"],["gdf","Guduf-Gava"],["gdg","Ga'dang"],["gdh","Gadjerawang, Gajirrabeng"],["gdi","Gundi"],["gdj","Gurdjar"],["gdk","Gadang"],["gdl","Dirasha"],["gdm","Laal"],["gdn","Umanakaina"],["gdo","Ghodoberi"],["gdq","Mehri"],["gdr","Wipi"],["gds","Ghandruk Sign Language"],["gdt","Kungardutyi"],["gdu","Gudu"],["gdx","Godwari"],["gea","Geruma"],["geb","Kire"],["gec","Gboloo Grebo"],["ged","Gade"],["gef","Gerai"],["geg","Gengle"],["geh","Hutterite German, Hutterisch"],["gei","Gebe"],["gej","Gen"],["gek","Ywom"],["gel","ut-Ma'in"],["gem","Germanic languages"],["geq","Geme"],["ges","Geser-Gorom"],["gev","Eviya"],["gew","Gera"],["gex","Garre"],["gey","Enya"],["gez","Geez"],["gfk","Patpatar"],["gft","Gafat"],["gfx","Mangetti Dune ǃXung"],["gga","Gao"],["ggb","Gbii"],["ggd","Gugadj"],["gge","Gurr-goni"],["ggg","Gurgula"],["ggk","Kungarakany"],["ggl","Ganglau"],["ggn","Eastern Gurung"],["ggo","Southern Gondi"],["ggr","Aghu Tharnggalu"],["ggt","Gitua"],["ggu","Gagu, Gban"],["ggw","Gogodala"],["gha","Ghadamès"],["ghc","Hiberno-Scottish Gaelic"],["ghe","Southern Ghale"],["ghh","Northern Ghale"],["ghk","Geko Karen"],["ghl","Ghulfan"],["ghn","Ghanongga"],["gho","Ghomara"],["ghr","Ghera"],["ghs","Guhu-Samane"],["ght","Kuke, Kutang Ghale"],["gia","Kija"],["gib","Gibanawa"],["gic","Gail"],["gid","Gidar"],["gie","Gaɓogbo, Guébie"],["gig","Goaria"],["gih","Githabul"],["gii","Girirra"],["gil","Gilbertese"],["gim","Gimi (Eastern Highlands)"],["gin","Hinukh"],["gio","Gelao"],["gip","Gimi (West New Britain)"],["giq","Green Gelao"],["gir","Red Gelao"],["gis","North Giziga"],["git","Gitxsan"],["giu","Mulao"],["giw","White Gelao"],["gix","Gilima"],["giy","Giyug"],["giz","South Giziga"],["gji","Geji"],["gjk","Kachi Koli"],["gjm","Gunditjmara"],["gjn","Gonja"],["gjr","Gurindji Kriol"],["gju","Gujari"],["gka","Guya"],["gkd","Magɨ (Madang Province)"],["gke","Ndai"],["gkn","Gokana"],["gko","Kok-Nar"],["gkp","Guinea Kpelle"],["gku","ǂUngkue"],["glb","Belning"],["glc","Bon Gula"],["gld","Nanai"],["glh","Northwest Pashai, Northwest Pashayi"],["gli","Guliguli"],["glj","Gula Iro"],["glk","Gilaki"],["gll","Garlali"],["glo","Galambu"],["glr","Glaro-Twabo"],["glu","Gula (Chad)"],["glw","Glavda"],["gly","Gule"],["gma","Gambera"],["gmb","Gula'alaa"],["gmd","Mághdì"],["gme","East Germanic languages"],["gmg","Magɨyi"],["gmh","Middle High German (ca. 1050-1500)"],["gml","Middle Low German"],["gmm","Gbaya-Mbodomo"],["gmn","Gimnime"],["gmq","North Germanic languages"],["gmr","Mirning, Mirniny"],["gmu","Gumalu"],["gmv","Gamo"],["gmw","West Germanic languages"],["gmx","Magoma"],["gmy","Mycenaean Greek"],["gmz","Mgbolizhia"],["gna","Kaansa"],["gnb","Gangte"],["gnc","Guanche"],["gnd","Zulgo-Gemzek"],["gne","Ganang"],["gng","Ngangam"],["gnh","Lere"],["gni","Gooniyandi"],["gnj","Ngen"],["gnk","ǁGana"],["gnl","Gangulu"],["gnm","Ginuman"],["gnn","Gumatj"],["gno","Northern Gondi"],["gnq","Gana"],["gnr","Gureng Gureng"],["gnt","Guntai"],["gnu","Gnau"],["gnw","Western Bolivian Guaraní"],["gnz","Ganzi"],["goa","Guro"],["gob","Playero"],["goc","Gorakor"],["god","Godié"],["goe","Gongduk"],["gof","Gofa"],["gog","Gogo"],["goh","Old High German (ca. 750-1050)"],["goi","Gobasi"],["goj","Gowlan"],["gok","Gowli"],["gol","Gola"],["gom","Goan Konkani"],["gon","Gondi"],["goo","Gone Dau"],["gop","Yeretuar"],["goq","Gorap"],["gor","Gorontalo"],["gos","Gronings"],["got","Gothic"],["gou","Gavar"],["gow","Gorowa"],["gox","Gobu"],["goy","Goundo"],["goz","Gozarkhani"],["gpa","Gupa-Abawa"],["gpe","Ghanaian Pidgin English"],["gpn","Taiap"],["gqa","Ga'anda"],["gqi","Guiqiong"],["gqn","Guana (Brazil)"],["gqr","Gor"],["gqu","Qau"],["gra","Rajput Garasia"],["grb","Grebo"],["grc","Ancient Greek (to 1453)"],["grd","Guruntum-Mbaaru"],["grg","Madi"],["grh","Gbiri-Niragu"],["gri","Ghari"],["grj","Southern Grebo"],["grk","Greek languages"],["grm","Kota Marudu Talantang"],["gro","Groma"],["grq","Gorovu"],["grr","Taznatit"],["grs","Gresi"],["grt","Garo"],["gru","Kistane"],["grv","Central Grebo"],["grw","Gweda"],["grx","Guriaso"],["gry","Barclayville Grebo"],["grz","Guramalum"],["gse","Ghanaian Sign Language"],["gsg","German Sign Language"],["gsl","Gusilay"],["gsm","Guatemalan Sign Language"],["gsn","Nema, Gusan"],["gso","Southwest Gbaya"],["gsp","Wasembo"],["gss","Greek Sign Language"],["gsw","Swiss German, Alemannic, Alsatian"],["gta","Guató"],["gti","Gbati-ri"],["gtu","Aghu-Tharnggala"],["gua","Shiki"],["gub","Guajajára"],["guc","Wayuu"],["gud","Yocoboué Dida"],["gue","Gurindji"],["guf","Gupapuyngu"],["gug","Paraguayan Guaraní"],["guh","Guahibo"],["gui","Eastern Bolivian Guaraní"],["guk","Gumuz"],["gul","Sea Island Creole English"],["gum","Guambiano"],["gun","Mbyá Guaraní"],["guo","Guayabero"],["gup","Gunwinggu"],["guq","Aché"],["gur","Farefare"],["gus","Guinean Sign Language"],["gut","Maléku Jaíka"],["guu","Yanomamö"],["guv","Gey"],["guw","Gun"],["gux","Gourmanchéma"],["guz","Gusii, Ekegusii"],["gva","Guana (Paraguay)"],["gvc","Guanano"],["gve","Duwet"],["gvf","Golin"],["gvj","Guajá"],["gvl","Gulay"],["gvm","Gurmana"],["gvn","Kuku-Yalanji"],["gvo","Gavião Do Jiparaná"],["gvp","Pará Gavião"],["gvr","Gurung"],["gvs","Gumawana"],["gvy","Guyani"],["gwa","Mbato"],["gwb","Gwa"],["gwc","Gawri, Kalami"],["gwd","Gawwada"],["gwe","Gweno"],["gwf","Gowro"],["gwg","Moo"],["gwi","Gwichʼin"],["gwj","ǀGwi"],["gwm","Awngthim"],["gwn","Gwandara"],["gwr","Gwere"],["gwt","Gawar-Bati"],["gwu","Guwamu"],["gww","Kwini"],["gwx","Gua"],["gxx","Wè Southern"],["gya","Northwest Gbaya"],["gyb","Garus"],["gyd","Kayardild"],["gye","Gyem"],["gyf","Gungabula"],["gyg","Gbayi"],["gyi","Gyele"],["gyl","Gayil"],["gym","Ngäbere"],["gyn","Guyanese Creole English"],["gyo","Gyalsumdo"],["gyr","Guarayu"],["gyy","Gunya"],["gyz","Geji, Gyaazi"],["gza","Ganza"],["gzi","Gazi"],["gzn","Gane"],["haa","Han"],["hab","Hanoi Sign Language"],["hac","Gurani"],["had","Hatam"],["hae","Eastern Oromo"],["haf","Haiphong Sign Language"],["hag","Hanga"],["hah","Hahon"],["hai","Haida"],["haj","Hajong"],["hak","Hakka Chinese"],["hal","Halang"],["ham","Hewa"],["han","Hangaza"],["hao","Hakö"],["hap","Hupla"],["haq","Ha"],["har","Harari"],["has","Haisla"],["hav","Havu"],["haw","Hawaiian"],["hax","Southern Haida"],["hay","Haya"],["haz","Hazaragi"],["hba","Hamba"],["hbb","Huba"],["hbn","Heiban"],["hbo","Ancient Hebrew"],["hbu","Habu"],["hca","Andaman Creole Hindi"],["hch","Huichol"],["hdn","Northern Haida"],["hds","Honduras Sign Language"],["hdy","Hadiyya"],["hea","Northern Qiandong Miao"],["hed","Herdé"],["heg","Helong"],["heh","Hehe"],["hei","Heiltsuk"],["hem","Hemba"],["hgm","Haiǁom"],["hgw","Haigwai"],["hhi","Hoia Hoia"],["hhr","Kerak"],["hhy","Hoyahoya"],["hia","Lamang"],["hib","Hibito"],["hid","Hidatsa"],["hif","Fiji Hindi"],["hig","Kamwe"],["hih","Pamosu"],["hii","Hinduri"],["hij","Hijuk"],["hik","Seit-Kaitetu"],["hil","Hiligaynon"],["him","Himachali languages, Western Pahari languages"],["hio","Tsoa"],["hir","Himarimã"],["hit","Hittite"],["hiw","Hiw"],["hix","Hixkaryána"],["hji","Haji"],["hka","Kahe"],["hke","Hunde"],["hkh","Khah, Poguli"],["hkk","Hunjara-Kaina Ke"],["hkn","Mel-Khaonh"],["hks","Hong Kong Sign Language, Heung Kong Sau Yue"],["hla","Halia"],["hlb","Halbi"],["hld","Halang Doan"],["hle","Hlersu"],["hlt","Matu Chin"],["hlu","Hieroglyphic Luwian"],["hma","Southern Mashan Hmong, Southern Mashan Miao"],["hmb","Humburi Senni Songhay"],["hmc","Central Huishui Hmong, Central Huishui Miao"],["hmd","Large Flowery Miao, A-hmaos, Da-Hua Miao"],["hme","Eastern Huishui Hmong, Eastern Huishui Miao"],["hmf","Hmong Don"],["hmg","Southwestern Guiyang Hmong"],["hmh","Southwestern Huishui Hmong, Southwestern Huishui Miao"],["hmi","Northern Huishui Hmong, Northern Huishui Miao"],["hmj","Ge, Gejia"],["hmk","Maek"],["hml","Luopohe Hmong, Luopohe Miao"],["hmm","Central Mashan Hmong, Central Mashan Miao"],["hmn","Hmong, Mong"],["hmp","Northern Mashan Hmong, Northern Mashan Miao"],["hmq","Eastern Qiandong Miao"],["hmr","Hmar"],["hms","Southern Qiandong Miao"],["hmt","Hamtai"],["hmu","Hamap"],["hmv","Hmong Dô"],["hmw","Western Mashan Hmong, Western Mashan Miao"],["hmx","Hmong-Mien languages"],["hmy","Southern Guiyang Hmong, Southern Guiyang Miao"],["hmz","Hmong Shua, Sinicized Miao"],["hna","Mina (Cameroon)"],["hnd","Southern Hindko"],["hne","Chhattisgarhi"],["hng","Hungu"],["hnh","ǁAni"],["hni","Hani"],["hnj","Hmong Njua, Mong Leng, Mong Njua"],["hnn","Hanunoo"],["hno","Northern Hindko"],["hns","Caribbean Hindustani"],["hnu","Hung"],["hoa","Hoava"],["hob","Mari (Madang Province)"],["hoc","Ho"],["hod","Holma"],["hoe","Horom"],["hoh","Hobyót"],["hoi","Holikachuk"],["hoj","Hadothi, Haroti"],["hok","Hokan languages"],["hol","Holu"],["hom","Homa"],["hoo","Holoholo"],["hop","Hopi"],["hor","Horo"],["hos","Ho Chi Minh City Sign Language"],["hot","Hote, Malê"],["hov","Hovongan"],["how","Honi"],["hoy","Holiya"],["hoz","Hozo"],["hpo","Hpon"],["hps","Hawai'i Sign Language (HSL), Hawai'i Pidgin Sign Language"],["hra","Hrangkhol"],["hrc","Niwer Mil"],["hre","Hre"],["hrk","Haruku"],["hrm","Horned Miao"],["hro","Haroi"],["hrp","Nhirrpi"],["hrr","Horuru"],["hrt","Hértevin"],["hru","Hruso"],["hrw","Warwar Feni"],["hrx","Hunsrik"],["hrz","Harzani"],["hsb","Upper Sorbian"],["hsh","Hungarian Sign Language"],["hsl","Hausa Sign Language"],["hsn","Xiang Chinese"],["hss","Harsusi"],["hti","Hoti"],["hto","Minica Huitoto"],["hts","Hadza"],["htu","Hitu"],["htx","Middle Hittite"],["hub","Huambisa"],["huc","ǂHua, ǂʼAmkhoe"],["hud","Huaulu"],["hue","San Francisco Del Mar Huave"],["huf","Humene"],["hug","Huachipaeri"],["huh","Huilliche"],["hui","Huli"],["huj","Northern Guiyang Hmong, Northern Guiyang Miao"],["huk","Hulung"],["hul","Hula"],["hum","Hungana"],["huo","Hu"],["hup","Hupa"],["huq","Tsat"],["hur","Halkomelem"],["hus","Huastec"],["hut","Humla"],["huu","Murui Huitoto"],["huv","San Mateo Del Mar Huave"],["huw","Hukumina"],["hux","Nüpode Huitoto"],["huy","Hulaulá"],["huz","Hunzib"],["hvc","Haitian Vodoun Culture Language"],["hve","San Dionisio Del Mar Huave"],["hvk","Haveke"],["hvn","Sabu"],["hvv","Santa María Del Mar Huave"],["hwa","Wané"],["hwc","Hawai'i Creole English, Hawai'i Pidgin"],["hwo","Hwana"],["hya","Hya"],["hyw","Western Armenian"],["hyx","Armenian (family)"],["iai","Iaai"],["ian","Iatmul"],["iap","Iapama"],["iar","Purari"],["iba","Iban"],["ibb","Ibibio"],["ibd","Iwaidja"],["ibe","Akpes"],["ibg","Ibanag"],["ibh","Bih"],["ibi","Ibilo"],["ibl","Ibaloi"],["ibm","Agoi"],["ibn","Ibino"],["ibr","Ibuoro"],["ibu","Ibu"],["iby","Ibani"],["ica","Ede Ica"],["ich","Etkywan"],["icl","Icelandic Sign Language"],["icr","Islander Creole English"],["ida","Idakho-Isukha-Tiriki, Luidakho-Luisukha-Lutirichi"],["idb","Indo-Portuguese"],["idc","Idon, Ajiya"],["idd","Ede Idaca"],["ide","Idere"],["idi","Idi"],["idr","Indri"],["ids","Idesa"],["idt","Idaté"],["idu","Idoma"],["ifa","Amganad Ifugao"],["ifb","Batad Ifugao, Ayangan Ifugao"],["ife","Ifè"],["iff","Ifo"],["ifk","Tuwali Ifugao"],["ifm","Teke-Fuumu"],["ifu","Mayoyao Ifugao"],["ify","Keley-I Kallahan"],["igb","Ebira"],["ige","Igede"],["igg","Igana"],["igl","Igala"],["igm","Kanggape"],["ign","Ignaciano"],["igo","Isebe"],["igs","Interglossa"],["igw","Igwe"],["ihb","Iha Based Pidgin"],["ihi","Ihievbe"],["ihp","Iha"],["ihw","Bidhawal"],["iin","Thiin"],["iir","Indo-Iranian languages"],["ijc","Izon"],["ije","Biseni"],["ijj","Ede Ije"],["ijn","Kalabari"],["ijo","Ijo languages"],["ijs","Southeast Ijo"],["ike","Eastern Canadian Inuktitut"],["iki","Iko"],["ikk","Ika"],["ikl","Ikulu"],["iko","Olulumo-Ikom"],["ikp","Ikpeshi"],["ikr","Ikaranggal"],["iks","Inuit Sign Language"],["ikt","Inuinnaqtun, Western Canadian Inuktitut"],["ikv","Iku-Gora-Ankwa"],["ikw","Ikwere"],["ikx","Ik"],["ikz","Ikizu"],["ila","Ile Ape"],["ilb","Ila"],["ilg","Garig-Ilgar"],["ili","Ili Turki"],["ilk","Ilongot"],["ill","Iranun"],["ilm","Iranun (Malaysia)"],["ilo","Iloko"],["ilp","Iranun (Philippines)"],["ils","International Sign"],["ilu","Ili'uun"],["ilv","Ilue"],["ilw","Talur"],["ima","Mala Malasar"],["ime","Imeraguen"],["imi","Anamgura"],["iml","Miluk"],["imn","Imonda"],["imo","Imbongu"],["imr","Imroing"],["ims","Marsian"],["imy","Milyan"],["inb","Inga"],["inc","Indic languages"],["ine","Indo-European languages"],["ing","Degexit'an"],["inh","Ingush"],["inj","Jungle Inga"],["inl","Indonesian Sign Language"],["inm","Minaean"],["inn","Isinai"],["ino","Inoke-Yate"],["inp","Iñapari"],["ins","Indian Sign Language"],["int","Intha"],["inz","Ineseño"],["ior","Inor"],["iou","Tuma-Irumu"],["iow","Iowa-Oto"],["ipi","Ipili"],["ipo","Ipiko"],["iqu","Iquito"],["iqw","Ikwo"],["ira","Iranian languages"],["ire","Iresim"],["irh","Irarutu"],["iri","Rigwe, Irigwe"],["irk","Iraqw"],["irn","Irántxe"],["iro","Iroquoian languages"],["irr","Ir"],["iru","Irula"],["irx","Kamberau"],["iry","Iraya"],["isa","Isabi"],["isc","Isconahua"],["isd","Isnag"],["ise","Italian Sign Language"],["isg","Irish Sign Language"],["ish","Esan"],["isi","Nkem-Nkum"],["isk","Ishkashimi"],["ism","Masimasi"],["isn","Isanzu"],["iso","Isoko"],["isr","Israeli Sign Language"],["ist","Istriot"],["isu","Isu (Menchum Division)"],["itb","Binongan Itneg"],["itc","Italic languages"],["itd","Southern Tidung"],["ite","Itene"],["iti","Inlaod Itneg"],["itk","Judeo-Italian"],["itl","Itelmen"],["itm","Itu Mbon Uzo"],["ito","Itonama"],["itr","Iteri"],["its","Isekiri"],["itt","Maeng Itneg"],["itv","Itawit"],["itw","Ito"],["itx","Itik"],["ity","Moyadan Itneg"],["itz","Itzá"],["ium","Iu Mien"],["ivb","Ibatan"],["ivv","Ivatan"],["iwk","I-Wak"],["iwm","Iwam"],["iwo","Iwur"],["iws","Sepik Iwam"],["ixc","Ixcatec"],["ixl","Ixil"],["iya","Iyayu"],["iyo","Mesaka"],["iyx","Yaka (Congo)"],["izh","Ingrian"],["izi","Izi-Ezaa-Ikwo-Mgbo"],["izr","Izere"],["izz","Izii"],["jaa","Jamamadí"],["jab","Hyam"],["jac","Popti', Jakalteko"],["jad","Jahanka"],["jae","Yabem"],["jaf","Jara"],["jah","Jah Hut"],["jaj","Zazao"],["jak","Jakun"],["jal","Yalahatan"],["jam","Jamaican Creole English"],["jan","Jandai"],["jao","Yanyuwa"],["jaq","Yaqay"],["jar","Jarawa (Nigeria)"],["jas","New Caledonian Javanese"],["jat","Jakati"],["jau","Yaur"],["jax","Jambi Malay"],["jay","Yan-nhangu, Nhangu"],["jaz","Jawe"],["jbe","Judeo-Berber"],["jbi","Badjiri"],["jbj","Arandai"],["jbk","Barikewa"],["jbm","Bijim"],["jbn","Nafusi"],["jbo","Lojban"],["jbr","Jofotek-Bromnya"],["jbt","Jabutí"],["jbu","Jukun Takum"],["jbw","Yawijibaya"],["jcs","Jamaican Country Sign Language"],["jct","Krymchak"],["jda","Jad"],["jdg","Jadgali"],["jdt","Judeo-Tat"],["jeb","Jebero"],["jee","Jerung"],["jeg","Jeng"],["jeh","Jeh"],["jei","Yei"],["jek","Jeri Kuo"],["jel","Yelmek"],["jen","Dza"],["jer","Jere"],["jet","Manem"],["jeu","Jonkor Bourmataguil"],["jgb","Ngbee"],["jge","Judeo-Georgian"],["jgk","Gwak"],["jgo","Ngomba"],["jhi","Jehai"],["jhs","Jhankot Sign Language"],["jia","Jina"],["jib","Jibu"],["jic","Tol"],["jid","Bu (Kaduna State)"],["jie","Jilbe"],["jig","Jingulu, Djingili"],["jih","sTodsde, Shangzhai"],["jii","Jiiddu"],["jil","Jilim"],["jim","Jimi (Cameroon)"],["jio","Jiamao"],["jiq","Guanyinqiao, Lavrung"],["jit","Jita"],["jiu","Youle Jinuo"],["jiv","Shuar"],["jiy","Buyuan Jinuo"],["jje","Jejueo"],["jjr","Bankal"],["jka","Kaera"],["jkm","Mobwa Karen"],["jko","Kubo"],["jkp","Paku Karen"],["jkr","Koro (India)"],["jks","Amami Koniya Sign Language"],["jku","Labir"],["jle","Ngile"],["jls","Jamaican Sign Language"],["jma","Dima"],["jmb","Zumbun"],["jmc","Machame"],["jmd","Yamdena"],["jmi","Jimi (Nigeria)"],["jml","Jumli"],["jmn","Makuri Naga"],["jmr","Kamara"],["jms","Mashi (Nigeria)"],["jmw","Mouwase"],["jmx","Western Juxtlahuaca Mixtec"],["jna","Jangshung"],["jnd","Jandavra"],["jng","Yangman"],["jni","Janji"],["jnj","Yemsa"],["jnl","Rawat"],["jns","Jaunsari"],["job","Joba"],["jod","Wojenaka"],["jog","Jogi"],["jor","Jorá"],["jos","Jordanian Sign Language"],["jow","Jowulu"],["jpa","Jewish Palestinian Aramaic"],["jpr","Judeo-Persian"],["jpx","Japanese (family)"],["jqr","Jaqaru"],["jra","Jarai"],["jrb","Judeo-Arabic"],["jrr","Jiru"],["jrt","Jakattoe"],["jru","Japrería"],["jsl","Japanese Sign Language"],["jua","Júma"],["jub","Wannu"],["juc","Jurchen"],["jud","Worodougou"],["juh","Hõne"],["jui","Ngadjuri"],["juk","Wapan"],["jul","Jirel"],["jum","Jumjum"],["jun","Juang"],["juo","Jiba"],["jup","Hupdë"],["jur","Jurúna"],["jus","Jumla Sign Language"],["jut","Jutish"],["juu","Ju"],["juw","Wãpha"],["juy","Juray"],["jvd","Javindo"],["jvn","Caribbean Javanese"],["jwi","Jwira-Pepesa"],["jya","Jiarong"],["jye","Judeo-Yemeni Arabic"],["jyy","Jaya"],["kaa","Kara-Kalpak, Karakalpak"],["kab","Kabyle"],["kac","Kachin, Jingpho"],["kad","Adara"],["kae","Ketangalan"],["kaf","Katso"],["kag","Kajaman"],["kah","Kara (Central African Republic)"],["kai","Karekare"],["kaj","Jju"],["kak","Kalanguya, Kayapa Kallahan"],["kam","Kamba (Kenya)"],["kao","Xaasongaxango"],["kap","Bezhta"],["kaq","Capanahua"],["kar","Karen languages"],["kav","Katukína"],["kaw","Kawi"],["kax","Kao"],["kay","Kamayurá"],["kba","Kalarko"],["kbb","Kaxuiâna"],["kbc","Kadiwéu"],["kbd","Kabardian"],["kbe","Kanju"],["kbf","Kakauhua"],["kbg","Khamba"],["kbh","Camsá"],["kbi","Kaptiau"],["kbj","Kari"],["kbk","Grass Koiari"],["kbl","Kanembu"],["kbm","Iwal"],["kbn","Kare (Central African Republic)"],["kbo","Keliko"],["kbp","Kabiyè"],["kbq","Kamano"],["kbr","Kafa"],["kbs","Kande"],["kbt","Abadi"],["kbu","Kabutra"],["kbv","Dera (Indonesia)"],["kbw","Kaiep"],["kbx","Ap Ma"],["kby","Manga Kanuri"],["kbz","Duhwa"],["kca","Khanty"],["kcb","Kawacha"],["kcc","Lubila"],["kcd","Ngkâlmpw Kanum"],["kce","Kaivi"],["kcf","Ukaan"],["kcg","Tyap"],["kch","Vono"],["kci","Kamantan"],["kcj","Kobiana"],["kck","Kalanga"],["kcl","Kela (Papua New Guinea), Kala"],["kcm","Gula (Central African Republic)"],["kcn","Nubi"],["kco","Kinalakna"],["kcp","Kanga"],["kcq","Kamo"],["kcr","Katla"],["kcs","Koenoem"],["kct","Kaian"],["kcu","Kami (Tanzania)"],["kcv","Kete"],["kcw","Kabwari"],["kcx","Kachama-Ganjule"],["kcy","Korandje"],["kcz","Konongo"],["kda","Worimi"],["kdc","Kutu"],["kdd","Yankunytjatjara"],["kde","Makonde"],["kdf","Mamusi"],["kdg","Seba"],["kdh","Tem"],["kdi","Kumam"],["kdj","Karamojong"],["kdk","Numèè, Kwényi"],["kdl","Tsikimba"],["kdm","Kagoma"],["kdn","Kunda"],["kdo","Kordofanian languages"],["kdp","Kaningdon-Nindem"],["kdq","Koch"],["kdr","Karaim"],["kdt","Kuy"],["kdu","Kadaru"],["kdv","Kado"],["kdw","Koneraw"],["kdx","Kam"],["kdy","Keder, Keijar"],["kdz","Kwaja"],["kea","Kabuverdianu"],["keb","Kélé"],["kec","Keiga"],["ked","Kerewe"],["kee","Eastern Keres"],["kef","Kpessi"],["keg","Tese"],["keh","Keak"],["kei","Kei"],["kej","Kadar"],["kek","Kekchí"],["kel","Kela (Democratic Republic of Congo)"],["kem","Kemak"],["ken","Kenyang"],["keo","Kakwa"],["kep","Kaikadi"],["keq","Kamar"],["ker","Kera"],["kes","Kugbo"],["ket","Ket"],["keu","Akebu"],["kev","Kanikkaran"],["kew","West Kewa"],["kex","Kukna"],["key","Kupia"],["kez","Kukele"],["kfa","Kodava"],["kfb","Northwestern Kolami"],["kfc","Konda-Dora"],["kfd","Korra Koraga"],["kfe","Kota (India)"],["kff","Koya"],["kfg","Kudiya"],["kfh","Kurichiya"],["kfi","Kannada Kurumba"],["kfj","Kemiehua"],["kfk","Kinnauri"],["kfl","Kung"],["kfm","Khunsari"],["kfn","Kuk"],["kfo","Koro (Côte d'Ivoire)"],["kfp","Korwa"],["kfq","Korku"],["kfr","Kachhi, Kutchi"],["kfs","Bilaspuri"],["kft","Kanjari"],["kfu","Katkari"],["kfv","Kurmukar"],["kfw","Kharam Naga"],["kfx","Kullu Pahari"],["kfy","Kumaoni"],["kfz","Koromfé"],["kga","Koyaga"],["kgb","Kawe"],["kgc","Kasseng"],["kgd","Kataang"],["kge","Komering"],["kgf","Kube"],["kgg","Kusunda"],["kgh","Upper Tanudan Kalinga"],["kgi","Selangor Sign Language"],["kgj","Gamale Kham"],["kgk","Kaiwá"],["kgl","Kunggari"],["kgm","Karipúna"],["kgn","Karingani"],["kgo","Krongo"],["kgp","Kaingang"],["kgq","Kamoro"],["kgr","Abun"],["kgs","Kumbainggar"],["kgt","Somyev"],["kgu","Kobol"],["kgv","Karas"],["kgw","Karon Dori"],["kgx","Kamaru"],["kgy","Kyerung"],["kha","Khasi"],["khb","Lü"],["khc","Tukang Besi North"],["khd","Bädi Kanum"],["khe","Korowai"],["khf","Khuen"],["khg","Khams Tibetan"],["khh","Kehu"],["khi","Khoisan languages"],["khj","Kuturmi"],["khk","Halh Mongolian"],["khl","Lusi"],["khn","Khandesi"],["kho","Khotanese, Sakan"],["khp","Kapori, Kapauri"],["khq","Koyra Chiini Songhay"],["khr","Kharia"],["khs","Kasua"],["kht","Khamti"],["khu","Nkhumbi"],["khv","Khvarshi"],["khw","Khowar"],["khx","Kanu"],["khy","Kele (Democratic Republic of Congo)"],["khz","Keapara"],["kia","Kim"],["kib","Koalib"],["kic","Kickapoo"],["kid","Koshin"],["kie","Kibet"],["kif","Eastern Parbate Kham"],["kig","Kimaama, Kimaghima"],["kih","Kilmeri"],["kii","Kitsai"],["kij","Kilivila"],["kil","Kariya"],["kim","Karagas"],["kio","Kiowa"],["kip","Sheshi Kham"],["kiq","Kosadle, Kosare"],["kis","Kis"],["kit","Agob"],["kiu","Kirmanjki (individual language)"],["kiv","Kimbu"],["kiw","Northeast Kiwai"],["kix","Khiamniungan Naga"],["kiy","Kirikiri"],["kiz","Kisi"],["kja","Mlap"],["kjb","Q'anjob'al, Kanjobal"],["kjc","Coastal Konjo"],["kjd","Southern Kiwai"],["kje","Kisar"],["kjf","Khalaj [Indo-Iranian]"],["kjg","Khmu"],["kjh","Khakas"],["kji","Zabana"],["kjj","Khinalugh"],["kjk","Highland Konjo"],["kjl","Western Parbate Kham"],["kjm","Kháng"],["kjn","Kunjen"],["kjo","Harijan Kinnauri"],["kjp","Pwo Eastern Karen"],["kjq","Western Keres"],["kjr","Kurudu"],["kjs","East Kewa"],["kjt","Phrae Pwo Karen"],["kju","Kashaya"],["kjv","Kaikavian Literary Language"],["kjx","Ramopa"],["kjy","Erave"],["kjz","Bumthangkha"],["kka","Kakanda"],["kkb","Kwerisa"],["kkc","Odoodee"],["kkd","Kinuku"],["kke","Kakabe"],["kkf","Kalaktang Monpa"],["kkg","Mabaka Valley Kalinga"],["kkh","Khün"],["kki","Kagulu"],["kkj","Kako"],["kkk","Kokota"],["kkl","Kosarek Yale"],["kkm","Kiong"],["kkn","Kon Keu"],["kko","Karko"],["kkp","Gugubera, Koko-Bera"],["kkq","Kaeku"],["kkr","Kir-Balar"],["kks","Giiwo"],["kkt","Koi"],["kku","Tumi"],["kkv","Kangean"],["kkw","Teke-Kukuya"],["kkx","Kohin"],["kky","Guugu Yimidhirr, Guguyimidjir"],["kkz","Kaska"],["kla","Klamath-Modoc"],["klb","Kiliwa"],["klc","Kolbila"],["kld","Gamilaraay"],["kle","Kulung (Nepal)"],["klf","Kendeje"],["klg","Tagakaulo"],["klh","Weliki"],["kli","Kalumpang"],["klj","Khalaj"],["klk","Kono (Nigeria)"],["kll","Kagan Kalagan"],["klm","Migum"],["kln","Kalenjin"],["klo","Kapya"],["klp","Kamasa"],["klq","Rumu"],["klr","Khaling"],["kls","Kalasha"],["klt","Nukna"],["klu","Klao"],["klv","Maskelynes"],["klw","Tado, Lindu"],["klx","Koluwawa"],["kly","Kalao"],["klz","Kabola"],["kma","Konni"],["kmb","Kimbundu"],["kmc","Southern Dong"],["kmd","Majukayang Kalinga"],["kme","Bakole"],["kmf","Kare (Papua New Guinea)"],["kmg","Kâte"],["kmh","Kalam"],["kmi","Kami (Nigeria)"],["kmj","Kumarbhag Paharia"],["kmk","Limos Kalinga"],["kml","Tanudan Kalinga"],["kmm","Kom (India)"],["kmn","Awtuw"],["kmo","Kwoma"],["kmp","Gimme"],["kmq","Kwama"],["kmr","Northern Kurdish"],["kms","Kamasau"],["kmt","Kemtuik"],["kmu","Kanite"],["kmv","Karipúna Creole French"],["kmw","Komo (Democratic Republic of Congo)"],["kmx","Waboda"],["kmy","Koma"],["kmz","Khorasani Turkish"],["kna","Dera (Nigeria)"],["knb","Lubuagan Kalinga"],["knc","Central Kanuri"],["knd","Konda"],["kne","Kankanaey"],["knf","Mankanya"],["kng","Koongo"],["kni","Kanufi"],["knj","Western Kanjobal"],["knk","Kuranko"],["knl","Keninjal"],["knm","Kanamarí"],["knn","Konkani (individual language)"],["kno","Kono (Sierra Leone)"],["knp","Kwanja"],["knq","Kintaq"],["knr","Kaningra"],["kns","Kensiu"],["knt","Panoan Katukína"],["knu","Kono (Guinea)"],["knv","Tabo"],["knw","Kung-Ekoka"],["knx","Kendayan, Salako"],["kny","Kanyok"],["knz","Kalamsé"],["koa","Konomala"],["koc","Kpati"],["kod","Kodi"],["koe","Kacipo-Bale Suri"],["kof","Kubi"],["kog","Cogui, Kogi"],["koh","Koyo"],["koi","Komi-Permyak"],["koj","Sara Dunjo"],["kok","Konkani (macrolanguage)"],["kol","Kol (Papua New Guinea)"],["koo","Konzo"],["kop","Waube"],["koq","Kota (Gabon)"],["kos","Kosraean"],["kot","Lagwan"],["kou","Koke"],["kov","Kudu-Camo"],["kow","Kugama"],["kox","Coxima"],["koy","Koyukon"],["koz","Korak"],["kpa","Kutto"],["kpb","Mullu Kurumba"],["kpc","Curripaco"],["kpd","Koba"],["kpe","Kpelle"],["kpf","Komba"],["kpg","Kapingamarangi"],["kph","Kplang"],["kpi","Kofei"],["kpj","Karajá"],["kpk","Kpan"],["kpl","Kpala"],["kpm","Koho"],["kpn","Kepkiriwát"],["kpo","Ikposo"],["kpp","Paku Karen"],["kpq","Korupun-Sela"],["kpr","Korafe-Yegha"],["kps","Tehit"],["kpt","Karata"],["kpu","Kafoa"],["kpv","Komi-Zyrian"],["kpw","Kobon"],["kpx","Mountain Koiali"],["kpy","Koryak"],["kpz","Kupsabiny"],["kqa","Mum"],["kqb","Kovai"],["kqc","Doromu-Koki"],["kqd","Koy Sanjaq Surat"],["kqe","Kalagan"],["kqf","Kakabai"],["kqg","Khe"],["kqh","Kisankasa"],["kqi","Koitabu"],["kqj","Koromira"],["kqk","Kotafon Gbe"],["kql","Kyenele"],["kqm","Khisa"],["kqn","Kaonde"],["kqo","Eastern Krahn"],["kqp","Kimré"],["kqq","Krenak"],["kqr","Kimaragang"],["kqs","Northern Kissi"],["kqt","Klias River Kadazan"],["kqu","Seroa"],["kqv","Okolod"],["kqw","Kandas"],["kqx","Mser"],["kqy","Koorete"],["kqz","Korana"],["kra","Kumhali"],["krb","Karkin"],["krc","Karachay-Balkar"],["krd","Kairui-Midiki"],["kre","Panará"],["krf","Koro (Vanuatu)"],["krh","Kurama"],["kri","Krio"],["krj","Kinaray-A"],["krk","Kerek"],["krl","Karelian"],["krm","Krim"],["krn","Sapo"],["kro","Kru languages"],["krp","Korop"],["krr","Krung"],["krs","Gbaya (Sudan)"],["krt","Tumari Kanuri"],["kru","Kurukh"],["krv","Kavet"],["krw","Western Krahn"],["krx","Karon"],["kry","Kryts"],["krz","Sota Kanum"],["ksa","Shuwa-Zamani"],["ksb","Shambala"],["ksc","Southern Kalinga"],["ksd","Kuanua"],["kse","Kuni"],["ksf","Bafia"],["ksg","Kusaghe"],["ksh","Kölsch"],["ksi","Krisa, I'saka"],["ksj","Uare"],["ksk","Kansa"],["ksl","Kumalu"],["ksm","Kumba"],["ksn","Kasiguranin"],["kso","Kofa"],["ksp","Kaba"],["ksq","Kwaami"],["ksr","Borong"],["kss","Southern Kisi"],["kst","Winyé"],["ksu","Khamyang"],["ksv","Kusu"],["ksw","S'gaw Karen"],["ksx","Kedang"],["ksy","Kharia Thar"],["ksz","Kodaku"],["kta","Katua"],["ktb","Kambaata"],["ktc","Kholok"],["ktd","Kokata, Kukatha"],["kte","Nubri"],["ktf","Kwami"],["ktg","Kalkutung"],["kth","Karanga"],["kti","North Muyu"],["ktj","Plapo Krumen"],["ktk","Kaniet"],["ktl","Koroshi"],["ktm","Kurti"],["ktn","Karitiâna"],["kto","Kuot"],["ktp","Kaduo"],["ktq","Katabaga"],["ktr","Kota Marudu Tinagas"],["kts","South Muyu"],["ktt","Ketum"],["ktu","Kituba (Democratic Republic of Congo)"],["ktv","Eastern Katu"],["ktw","Kato"],["ktx","Kaxararí"],["kty","Kango (Bas-Uélé District)"],["ktz","Juǀʼhoan, Juǀʼhoansi"],["kub","Kutep"],["kuc","Kwinsu"],["kud","'Auhelawa"],["kue","Kuman (Papua New Guinea)"],["kuf","Western Katu"],["kug","Kupa"],["kuh","Kushi"],["kui","Kuikúro-Kalapálo, Kalapalo"],["kuj","Kuria"],["kuk","Kepo'"],["kul","Kulere"],["kum","Kumyk"],["kun","Kunama"],["kuo","Kumukio"],["kup","Kunimaipa"],["kuq","Karipuna"],["kus","Kusaal"],["kut","Kutenai"],["kuu","Upper Kuskokwim"],["kuv","Kur"],["kuw","Kpagua"],["kux","Kukatja"],["kuy","Kuuku-Ya'u"],["kuz","Kunza"],["kva","Bagvalal"],["kvb","Kubu"],["kvc","Kove"],["kvd","Kui (Indonesia)"],["kve","Kalabakan"],["kvf","Kabalai"],["kvg","Kuni-Boazi"],["kvh","Komodo"],["kvi","Kwang"],["kvj","Psikye"],["kvk","Korean Sign Language"],["kvl","Kayaw"],["kvm","Kendem"],["kvn","Border Kuna"],["kvo","Dobel"],["kvp","Kompane"],["kvq","Geba Karen"],["kvr","Kerinci"],["kvs","Kunggara"],["kvt","Lahta Karen, Lahta"],["kvu","Yinbaw Karen"],["kvv","Kola"],["kvw","Wersing"],["kvx","Parkari Koli"],["kvy","Yintale Karen, Yintale"],["kvz","Tsakwambo, Tsaukambo"],["kwa","Dâw"],["kwb","Kwa"],["kwc","Likwala"],["kwd","Kwaio"],["kwe","Kwerba"],["kwf","Kwara'ae"],["kwg","Sara Kaba Deme"],["kwh","Kowiai"],["kwi","Awa-Cuaiquer"],["kwj","Kwanga"],["kwk","Kwakiutl"],["kwl","Kofyar"],["kwm","Kwambi"],["kwn","Kwangali"],["kwo","Kwomtari"],["kwp","Kodia"],["kwq","Kwak"],["kwr","Kwer"],["kws","Kwese"],["kwt","Kwesten"],["kwu","Kwakum"],["kwv","Sara Kaba Náà"],["kww","Kwinti"],["kwx","Khirwar"],["kwy","San Salvador Kongo"],["kwz","Kwadi"],["kxa","Kairiru"],["kxb","Krobu"],["kxc","Konso, Khonso"],["kxd","Brunei"],["kxe","Kakihum"],["kxf","Manumanaw Karen, Manumanaw"],["kxh","Karo (Ethiopia)"],["kxi","Keningau Murut"],["kxj","Kulfa"],["kxk","Zayein Karen"],["kxl","Nepali Kurux"],["kxm","Northern Khmer"],["kxn","Kanowit-Tanjong Melanau"],["kxo","Kanoé"],["kxp","Wadiyara Koli"],["kxq","Smärky Kanum"],["kxr","Koro (Papua New Guinea)"],["kxs","Kangjia"],["kxt","Koiwat"],["kxu","Kui (India)"],["kxv","Kuvi"],["kxw","Konai"],["kxx","Likuba"],["kxy","Kayong"],["kxz","Kerewo"],["kya","Kwaya"],["kyb","Butbut Kalinga"],["kyc","Kyaka"],["kyd","Karey"],["kye","Krache"],["kyf","Kouya"],["kyg","Keyagana"],["kyh","Karok"],["kyi","Kiput"],["kyj","Karao"],["kyk","Kamayo"],["kyl","Kalapuya"],["kym","Kpatili"],["kyn","Northern Binukidnon"],["kyo","Kelon"],["kyp","Kang"],["kyq","Kenga"],["kyr","Kuruáya"],["kys","Baram Kayan"],["kyt","Kayagar"],["kyu","Western Kayah"],["kyv","Kayort"],["kyw","Kudmali"],["kyx","Rapoisi"],["kyy","Kambaira"],["kyz","Kayabí"],["kza","Western Karaboro"],["kzb","Kaibobo"],["kzc","Bondoukou Kulango"],["kzd","Kadai"],["kze","Kosena"],["kzf","Da'a Kaili"],["kzg","Kikai"],["kzh","Kenuzi-Dongola"],["kzi","Kelabit"],["kzj","Coastal Kadazan"],["kzk","Kazukuru"],["kzl","Kayeli"],["kzm","Kais"],["kzn","Kokola"],["kzo","Kaningi"],["kzp","Kaidipang"],["kzq","Kaike"],["kzr","Karang"],["kzs","Sugut Dusun"],["kzt","Tambunan Dusun"],["kzu","Kayupulau"],["kzv","Komyandaret"],["kzw","Karirí-Xocó"],["kzx","Kamarian"],["kzy","Kango (Tshopo District)"],["kzz","Kalabra"],["laa","Southern Subanen"],["lab","Linear A"],["lac","Lacandon"],["lad","Ladino"],["lae","Pattani"],["laf","Lafofa"],["lag","Langi"],["lah","Lahnda"],["lai","Lambya"],["laj","Lango (Uganda)"],["lak","Laka (Nigeria)"],["lal","Lalia"],["lam","Lamba"],["lan","Laru"],["lap","Laka (Chad)"],["laq","Qabiao"],["lar","Larteh"],["las","Lama (Togo)"],["lau","Laba"],["law","Lauje"],["lax","Tiwa"],["lay","Lama Bai"],["laz","Aribwatsa"],["lba","Lui"],["lbb","Label"],["lbc","Lakkia"],["lbe","Lak"],["lbf","Tinani"],["lbg","Laopang"],["lbi","La'bi"],["lbj","Ladakhi"],["lbk","Central Bontok"],["lbl","Libon Bikol"],["lbm","Lodhi"],["lbn","Rmeet"],["lbo","Laven"],["lbq","Wampar"],["lbr","Lohorung"],["lbs","Libyan Sign Language"],["lbt","Lachi"],["lbu","Labu"],["lbv","Lavatbura-Lamusong"],["lbw","Tolaki"],["lbx","Lawangan"],["lby","Lamalama, Lamu-Lamu"],["lbz","Lardil"],["lcc","Legenyem"],["lcd","Lola"],["lce","Loncong, Sekak"],["lcf","Lubu"],["lch","Luchazi"],["lcl","Lisela"],["lcm","Tungag"],["lcp","Western Lawa"],["lcq","Luhu"],["lcs","Lisabata-Nuniali"],["lda","Kla-Dan"],["ldb","Dũya"],["ldd","Luri"],["ldg","Lenyima"],["ldh","Lamja-Dengsa-Tola"],["ldi","Laari"],["ldj","Lemoro"],["ldk","Leelau"],["ldl","Kaan"],["ldm","Landoma"],["ldn","Láadan"],["ldo","Loo"],["ldp","Tso"],["ldq","Lufu"],["lea","Lega-Shabunda"],["leb","Lala-Bisa"],["lec","Leco"],["led","Lendu"],["lee","Lyélé"],["lef","Lelemi"],["leg","Lengua"],["leh","Lenje"],["lei","Lemio"],["lej","Lengola"],["lek","Leipon"],["lel","Lele (Democratic Republic of Congo)"],["lem","Nomaande"],["len","Lenca"],["leo","Leti (Cameroon)"],["lep","Lepcha"],["leq","Lembena"],["ler","Lenkau"],["les","Lese"],["let","Lesing-Gelimi, Amio-Gelimi"],["leu","Kara (Papua New Guinea)"],["lev","Lamma"],["lew","Ledo Kaili"],["lex","Luang"],["ley","Lemolang"],["lez","Lezghian"],["lfa","Lefa"],["lfn","Lingua Franca Nova"],["lga","Lungga"],["lgb","Laghu"],["lgg","Lugbara"],["lgh","Laghuu"],["lgi","Lengilu"],["lgk","Lingarak, Neverver"],["lgl","Wala"],["lgm","Lega-Mwenga"],["lgn","T'apo, Opuuo"],["lgq","Logba"],["lgr","Lengo"],["lgt","Pahi"],["lgu","Longgu"],["lgz","Ligenza"],["lha","Laha (Viet Nam)"],["lhh","Laha (Indonesia)"],["lhi","Lahu Shi"],["lhl","Lahul Lohar"],["lhm","Lhomi"],["lhn","Lahanan"],["lhp","Lhokpu"],["lhs","Mlahsö"],["lht","Lo-Toga"],["lhu","Lahu"],["lia","West-Central Limba"],["lib","Likum"],["lic","Hlai"],["lid","Nyindrou"],["lie","Likila"],["lif","Limbu"],["lig","Ligbi"],["lih","Lihir"],["lii","Lingkhim"],["lij","Ligurian"],["lik","Lika"],["lil","Lillooet"],["lio","Liki"],["lip","Sekpele"],["liq","Libido"],["lir","Liberian English"],["lis","Lisu"],["liu","Logorik"],["liv","Liv"],["liw","Col"],["lix","Liabuku"],["liy","Banda-Bambari"],["liz","Libinza"],["lja","Golpa"],["lje","Rampi"],["lji","Laiyolo"],["ljl","Li'o"],["ljp","Lampung Api"],["ljw","Yirandali"],["ljx","Yuru"],["lka","Lakalei"],["lkb","Kabras, Lukabaras"],["lkc","Kucong"],["lkd","Lakondê"],["lke","Kenyi"],["lkh","Lakha"],["lki","Laki"],["lkj","Remun"],["lkl","Laeko-Libuat"],["lkm","Kalaamaya"],["lkn","Lakon, Vure"],["lko","Khayo, Olukhayo"],["lkr","Päri"],["lks","Kisa, Olushisa"],["lkt","Lakota"],["lku","Kungkari"],["lky","Lokoya"],["lla","Lala-Roba"],["llb","Lolo"],["llc","Lele (Guinea)"],["lld","Ladin"],["lle","Lele (Papua New Guinea)"],["llf","Hermit"],["llg","Lole"],["llh","Lamu"],["lli","Teke-Laali"],["llj","Ladji Ladji"],["llk","Lelak"],["lll","Lilau"],["llm","Lasalimu"],["lln","Lele (Chad)"],["llo","Khlor"],["llp","North Efate"],["llq","Lolak"],["lls","Lithuanian Sign Language"],["llu","Lau"],["llx","Lauan"],["lma","East Limba"],["lmb","Merei"],["lmc","Limilngan"],["lmd","Lumun"],["lme","Pévé"],["lmf","South Lembata"],["lmg","Lamogai"],["lmh","Lambichhong"],["lmi","Lombi"],["lmj","West Lembata"],["lmk","Lamkang"],["lml","Hano"],["lmm","Lamam"],["lmn","Lambadi"],["lmo","Lombard"],["lmp","Limbum"],["lmq","Lamatuka"],["lmr","Lamalera"],["lmu","Lamenu"],["lmv","Lomaiviti"],["lmw","Lake Miwok"],["lmx","Laimbue"],["lmy","Lamboya"],["lmz","Lumbee"],["lna","Langbashe"],["lnb","Mbalanhu"],["lnd","Lundayeh, Lun Bawang"],["lng","Langobardic"],["lnh","Lanoh"],["lni","Daantanai'"],["lnj","Leningitij"],["lnl","South Central Banda"],["lnm","Langam"],["lnn","Lorediakarkar"],["lno","Lango (South Sudan)"],["lns","Lamnso'"],["lnu","Longuda"],["lnw","Lanima"],["lnz","Lonzo"],["loa","Loloda"],["lob","Lobi"],["loc","Inonhan"],["loe","Saluan"],["lof","Logol"],["log","Logo"],["loh","Narim"],["loi","Loma (Côte d'Ivoire)"],["loj","Lou"],["lok","Loko"],["lol","Mongo"],["lom","Loma (Liberia)"],["lon","Malawi Lomwe"],["loo","Lombo"],["lop","Lopa"],["loq","Lobala"],["lor","Téén"],["los","Loniu"],["lot","Otuho"],["lou","Louisiana Creole"],["lov","Lopi"],["low","Tampias Lobu"],["lox","Loun"],["loy","Loke"],["loz","Lozi"],["lpa","Lelepa"],["lpe","Lepki"],["lpn","Long Phuri Naga"],["lpo","Lipo"],["lpx","Lopit"],["lra","Rara Bakati'"],["lrc","Northern Luri"],["lre","Laurentian"],["lrg","Laragia"],["lri","Marachi, Olumarachi"],["lrk","Loarki"],["lrl","Lari"],["lrm","Marama, Olumarama"],["lrn","Lorang"],["lro","Laro"],["lrr","Southern Yamphu"],["lrt","Larantuka Malay"],["lrv","Larevat"],["lrz","Lemerig"],["lsa","Lasgerdi"],["lsb","Burundian Sign Language, Langue des Signes Burundaise"],["lsd","Lishana Deni"],["lse","Lusengo"],["lsg","Lyons Sign Language"],["lsh","Lish"],["lsi","Lashi"],["lsl","Latvian Sign Language"],["lsm","Saamia, Olusamia"],["lsn","Tibetan Sign Language"],["lso","Laos Sign Language"],["lsp","Panamanian Sign Language, Lengua de Señas Panameñas"],["lsr","Aruop"],["lss","Lasi"],["lst","Trinidad and Tobago Sign Language"],["lsv","Sivia Sign Language"],["lsy","Mauritian Sign Language"],["ltc","Late Middle Chinese"],["ltg","Latgalian"],["lth","Thur"],["lti","Leti (Indonesia)"],["ltn","Latundê"],["lto","Tsotso, Olutsotso"],["lts","Tachoni, Lutachoni"],["ltu","Latu"],["lua","Luba-Lulua"],["luc","Aringa"],["lud","Ludian"],["lue","Luvale"],["luf","Laua"],["lui","Luiseno"],["luj","Luna"],["luk","Lunanakha"],["lul","Olu'bo"],["lum","Luimbi"],["lun","Lunda"],["luo","Luo (Kenya and Tanzania), Dholuo"],["lup","Lumbu"],["luq","Lucumi"],["lur","Laura"],["lus","Lushai"],["lut","Lushootseed"],["luu","Lumba-Yakkha"],["luv","Luwati"],["luw","Luo (Cameroon)"],["luy","Luyia, Oluluyia"],["luz","Southern Luri"],["lva","Maku'a"],["lvi","Lavi"],["lvk","Lavukaleve"],["lvs","Standard Latvian"],["lvu","Levuka"],["lwa","Lwalu"],["lwe","Lewo Eleng"],["lwg","Wanga, Oluwanga"],["lwh","White Lachi"],["lwl","Eastern Lawa"],["lwm","Laomian"],["lwo","Luwo"],["lws","Malawian Sign Language"],["lwt","Lewotobi"],["lwu","Lawu"],["lww","Lewo"],["lxm","Lakurumau"],["lya","Layakha"],["lyg","Lyngngam"],["lyn","Luyana"],["lzh","Literary Chinese"],["lzl","Litzlitz"],["lzn","Leinong Naga"],["lzz","Laz"],["maa","San Jerónimo Tecóatl Mazatec"],["mab","Yutanduchi Mixtec"],["mad","Madurese"],["mae","Bo-Rukul"],["maf","Mafa"],["mag","Magahi"],["mai","Maithili"],["maj","Jalapa De Díaz Mazatec"],["mak","Makasar"],["mam","Mam"],["man","Mandingo, Manding"],["map","Austronesian languages"],["maq","Chiquihuitlán Mazatec"],["mas","Masai"],["mat","San Francisco Matlatzinca"],["mau","Huautla Mazatec"],["mav","Sateré-Mawé"],["maw","Mampruli"],["max","North Moluccan Malay"],["maz","Central Mazahua"],["mba","Higaonon"],["mbb","Western Bukidnon Manobo"],["mbc","Macushi"],["mbd","Dibabawon Manobo"],["mbe","Molale"],["mbf","Baba Malay"],["mbh","Mangseng"],["mbi","Ilianen Manobo"],["mbj","Nadëb"],["mbk","Malol"],["mbl","Maxakalí"],["mbm","Ombamba"],["mbn","Macaguán"],["mbo","Mbo (Cameroon)"],["mbp","Malayo"],["mbq","Maisin"],["mbr","Nukak Makú"],["mbs","Sarangani Manobo"],["mbt","Matigsalug Manobo"],["mbu","Mbula-Bwazza"],["mbv","Mbulungish"],["mbw","Maring"],["mbx","Mari (East Sepik Province)"],["mby","Memoni"],["mbz","Amoltepec Mixtec"],["mca","Maca"],["mcb","Machiguenga"],["mcc","Bitur"],["mcd","Sharanahua"],["mce","Itundujia Mixtec"],["mcf","Matsés"],["mcg","Mapoyo"],["mch","Maquiritari"],["mci","Mese"],["mcj","Mvanip"],["mck","Mbunda"],["mcl","Macaguaje"],["mcm","Malaccan Creole Portuguese"],["mcn","Masana"],["mco","Coatlán Mixe"],["mcp","Makaa"],["mcq","Ese"],["mcr","Menya"],["mcs","Mambai"],["mct","Mengisa"],["mcu","Cameroon Mambila"],["mcv","Minanibai"],["mcw","Mawa (Chad)"],["mcx","Mpiemo"],["mcy","South Watut"],["mcz","Mawan"],["mda","Mada (Nigeria)"],["mdb","Morigi"],["mdc","Male (Papua New Guinea)"],["mdd","Mbum"],["mde","Maba (Chad)"],["mdf","Moksha"],["mdg","Massalat"],["mdh","Maguindanaon"],["mdi","Mamvu"],["mdj","Mangbetu"],["mdk","Mangbutu"],["mdl","Maltese Sign Language"],["mdm","Mayogo"],["mdn","Mbati"],["mdp","Mbala"],["mdq","Mbole"],["mdr","Mandar"],["mds","Maria (Papua New Guinea)"],["mdt","Mbere"],["mdu","Mboko"],["mdv","Santa Lucía Monteverde Mixtec"],["mdw","Mbosi"],["mdx","Dizin"],["mdy","Male (Ethiopia)"],["mdz","Suruí Do Pará"],["mea","Menka"],["meb","Ikobi"],["mec","Marra"],["med","Melpa"],["mee","Mengen"],["mef","Megam"],["meg","Mea"],["meh","Southwestern Tlaxiaco Mixtec"],["mei","Midob"],["mej","Meyah"],["mek","Mekeo"],["mel","Central Melanau"],["mem","Mangala"],["men","Mende (Sierra Leone)"],["meo","Kedah Malay"],["mep","Miriwoong"],["meq","Merey"],["mer","Meru"],["mes","Masmaje"],["met","Mato"],["meu","Motu"],["mev","Mano"],["mew","Maaka"],["mey","Hassaniyya"],["mez","Menominee"],["mfa","Pattani Malay"],["mfb","Bangka"],["mfc","Mba"],["mfd","Mendankwe-Nkwen"],["mfe","Morisyen"],["mff","Naki"],["mfg","Mogofin"],["mfh","Matal"],["mfi","Wandala"],["mfj","Mefele"],["mfk","North Mofu"],["mfl","Putai"],["mfm","Marghi South"],["mfn","Cross River Mbembe"],["mfo","Mbe"],["mfp","Makassar Malay"],["mfq","Moba"],["mfr","Marrithiyel"],["mfs","Mexican Sign Language"],["mft","Mokerang"],["mfu","Mbwela"],["mfv","Mandjak"],["mfw","Mulaha"],["mfx","Melo"],["mfy","Mayo"],["mfz","Mabaan"],["mga","Middle Irish (900-1200)"],["mgb","Mararit"],["mgc","Morokodo"],["mgd","Moru"],["mge","Mango"],["mgf","Maklew"],["mgg","Mpumpong"],["mgh","Makhuwa-Meetto"],["mgi","Lijili"],["mgj","Abureni"],["mgk","Mawes"],["mgl","Maleu-Kilenge"],["mgm","Mambae"],["mgn","Mbangi"],["mgo","Meta'"],["mgp","Eastern Magar"],["mgq","Malila"],["mgr","Mambwe-Lungu"],["mgs","Manda (Tanzania)"],["mgt","Mongol"],["mgu","Mailu"],["mgv","Matengo"],["mgw","Matumbi"],["mgx","Omati"],["mgy","Mbunga"],["mgz","Mbugwe"],["mha","Manda (India)"],["mhb","Mahongwe"],["mhc","Mocho"],["mhd","Mbugu"],["mhe","Besisi, Mah Meri"],["mhf","Mamaa"],["mhg","Margu"],["mhh","Maskoy Pidgin"],["mhi","Ma'di"],["mhj","Mogholi"],["mhk","Mungaka"],["mhl","Mauwake"],["mhm","Makhuwa-Moniga"],["mhn","Mócheno"],["mho","Mashi (Zambia)"],["mhp","Balinese Malay"],["mhq","Mandan"],["mhr","Eastern Mari"],["mhs","Buru (Indonesia)"],["mht","Mandahuaca"],["mhu","Digaro-Mishmi, Darang Deng"],["mhw","Mbukushu"],["mhx","Maru, Lhaovo"],["mhy","Ma'anyan"],["mhz","Mor (Mor Islands)"],["mia","Miami"],["mib","Atatláhuca Mixtec"],["mic","Mi'kmaq, Micmac"],["mid","Mandaic"],["mie","Ocotepec Mixtec"],["mif","Mofu-Gudur"],["mig","San Miguel El Grande Mixtec"],["mih","Chayuco Mixtec"],["mii","Chigmecatitlán Mixtec"],["mij","Abar, Mungbam"],["mik","Mikasuki"],["mil","Peñoles Mixtec"],["mim","Alacatlatzala Mixtec"],["min","Minangkabau"],["mio","Pinotepa Nacional Mixtec"],["mip","Apasco-Apoala Mixtec"],["miq","Mískito"],["mir","Isthmus Mixe"],["mis","Uncoded languages"],["mit","Southern Puebla Mixtec"],["miu","Cacaloxtepec Mixtec"],["miw","Akoye"],["mix","Mixtepec Mixtec"],["miy","Ayutla Mixtec"],["miz","Coatzospan Mixtec"],["mja","Mahei"],["mjb","Makalero"],["mjc","San Juan Colorado Mixtec"],["mjd","Northwest Maidu"],["mje","Muskum"],["mjg","Tu"],["mjh","Mwera (Nyasa)"],["mji","Kim Mun"],["mjj","Mawak"],["mjk","Matukar"],["mjl","Mandeali"],["mjm","Medebur"],["mjn","Ma (Papua New Guinea)"],["mjo","Malankuravan"],["mjp","Malapandaram"],["mjq","Malaryan"],["mjr","Malavedan"],["mjs","Miship"],["mjt","Sauria Paharia"],["mju","Manna-Dora"],["mjv","Mannan"],["mjw","Karbi"],["mjx","Mahali"],["mjy","Mahican"],["mjz","Majhi"],["mka","Mbre"],["mkb","Mal Paharia"],["mkc","Siliput"],["mke","Mawchi"],["mkf","Miya"],["mkg","Mak (China)"],["mkh","Mon-Khmer languages"],["mki","Dhatki"],["mkj","Mokilese"],["mkk","Byep"],["mkl","Mokole"],["mkm","Moklen"],["mkn","Kupang Malay"],["mko","Mingang Doso"],["mkp","Moikodi"],["mkq","Bay Miwok"],["mkr","Malas"],["mks","Silacayoapan Mixtec"],["mkt","Vamale"],["mku","Konyanka Maninka"],["mkv","Mafea"],["mkw","Kituba (Congo)"],["mkx","Kinamiging Manobo"],["mky","East Makian"],["mkz","Makasae"],["mla","Malo"],["mlb","Mbule"],["mlc","Cao Lan"],["mld","Malakhel"],["mle","Manambu"],["mlf","Mal"],["mlh","Mape"],["mli","Malimpung"],["mlj","Miltu"],["mlk","Ilwana, Kiwilwana"],["mll","Malua Bay"],["mlm","Mulam"],["mln","Malango"],["mlo","Mlomp"],["mlp","Bargam"],["mlq","Western Maninkakan"],["mlr","Vame"],["mls","Masalit"],["mlu","To'abaita"],["mlv","Motlav, Mwotlap"],["mlw","Moloko"],["mlx","Malfaxal, Naha'ai"],["mlz","Malaynon"],["mma","Mama"],["mmb","Momina"],["mmc","Michoacán Mazahua"],["mmd","Maonan"],["mme","Mae"],["mmf","Mundat"],["mmg","North Ambrym"],["mmh","Mehináku"],["mmi","Musar"],["mmj","Majhwar"],["mmk","Mukha-Dora"],["mml","Man Met"],["mmm","Maii"],["mmn","Mamanwa"],["mmo","Mangga Buang"],["mmp","Siawi"],["mmq","Musak"],["mmr","Western Xiangxi Miao"],["mmt","Malalamai"],["mmu","Mmaala"],["mmv","Miriti"],["mmw","Emae"],["mmx","Madak"],["mmy","Migaama"],["mmz","Mabaale"],["mna","Mbula"],["mnb","Muna"],["mnc","Manchu"],["mnd","Mondé"],["mne","Naba"],["mnf","Mundani"],["mng","Eastern Mnong"],["mnh","Mono (Democratic Republic of Congo)"],["mni","Manipuri"],["mnj","Munji"],["mnk","Mandinka"],["mnl","Tiale"],["mnm","Mapena"],["mnn","Southern Mnong"],["mno","Manobo languages"],["mnp","Min Bei Chinese"],["mnq","Minriq"],["mnr","Mono (USA)"],["mns","Mansi"],["mnt","Maykulan"],["mnu","Mer"],["mnv","Rennell-Bellona"],["mnw","Mon"],["mnx","Manikion"],["mny","Manyawa"],["mnz","Moni"],["moa","Mwan"],["moc","Mocoví"],["mod","Mobilian"],["moe","Innu, Montagnais"],["mof","Mohegan-Montauk-Narragansett"],["mog","Mongondow"],["moh","Mohawk"],["moi","Mboi"],["moj","Monzombo"],["mok","Morori"],["mom","Mangue"],["moo","Monom"],["mop","Mopán Maya"],["moq","Mor (Bomberai Peninsula)"],["mor","Moro"],["mos","Mossi"],["mot","Barí"],["mou","Mogum"],["mov","Mohave"],["mow","Moi (Congo)"],["mox","Molima"],["moy","Shekkacho"],["moz","Mukulu, Gergiko"],["mpa","Mpoto"],["mpb","Malak Malak, Mullukmulluk"],["mpc","Mangarrayi"],["mpd","Machinere"],["mpe","Majang"],["mpg","Marba"],["mph","Maung"],["mpi","Mpade"],["mpj","Martu Wangka, Wangkajunga"],["mpk","Mbara (Chad)"],["mpl","Middle Watut"],["mpm","Yosondúa Mixtec"],["mpn","Mindiri"],["mpo","Miu"],["mpp","Migabac"],["mpq","Matís"],["mpr","Vangunu"],["mps","Dadibi"],["mpt","Mian"],["mpu","Makuráp"],["mpv","Mungkip"],["mpw","Mapidian"],["mpx","Misima-Panaeati"],["mpy","Mapia"],["mpz","Mpi"],["mqa","Maba (Indonesia)"],["mqb","Mbuko"],["mqc","Mangole"],["mqe","Matepi"],["mqf","Momuna"],["mqg","Kota Bangun Kutai Malay"],["mqh","Tlazoyaltepec Mixtec"],["mqi","Mariri"],["mqj","Mamasa"],["mqk","Rajah Kabunsuwan Manobo"],["mql","Mbelime"],["mqm","South Marquesan"],["mqn","Moronene"],["mqo","Modole"],["mqp","Manipa"],["mqq","Minokok"],["mqr","Mander"],["mqs","West Makian"],["mqt","Mok"],["mqu","Mandari"],["mqv","Mosimo"],["mqw","Murupi"],["mqx","Mamuju"],["mqy","Manggarai"],["mqz","Pano"],["mra","Mlabri"],["mrb","Marino"],["mrc","Maricopa"],["mrd","Western Magar"],["mre","Martha's Vineyard Sign Language"],["mrf","Elseng"],["mrg","Mising"],["mrh","Mara Chin"],["mrj","Western Mari"],["mrk","Hmwaveke"],["mrl","Mortlockese"],["mrm","Merlav, Mwerlap"],["mrn","Cheke Holo"],["mro","Mru"],["mrp","Morouas"],["mrq","North Marquesan"],["mrr","Maria (India)"],["mrs","Maragus"],["mrt","Marghi Central"],["mru","Mono (Cameroon)"],["mrv","Mangareva"],["mrw","Maranao"],["mrx","Maremgi, Dineor"],["mry","Mandaya"],["mrz","Marind"],["msb","Masbatenyo"],["msc","Sankaran Maninka"],["msd","Yucatec Maya Sign Language"],["mse","Musey"],["msf","Mekwei"],["msg","Moraid"],["msh","Masikoro Malagasy"],["msi","Sabah Malay"],["msj","Ma (Democratic Republic of Congo)"],["msk","Mansaka"],["msl","Molof, Poule"],["msm","Agusan Manobo"],["msn","Vurës"],["mso","Mombum"],["msp","Maritsauá"],["msq","Caac"],["msr","Mongolian Sign Language"],["mss","West Masela"],["mst","Cataelano Mandaya"],["msu","Musom"],["msv","Maslam"],["msw","Mansoanka"],["msx","Moresada"],["msy","Aruamu"],["msz","Momare"],["mta","Cotabato Manobo"],["mtb","Anyin Morofo"],["mtc","Munit"],["mtd","Mualang"],["mte","Mono (Solomon Islands)"],["mtf","Murik (Papua New Guinea)"],["mtg","Una"],["mth","Munggui"],["mti","Maiwa (Papua New Guinea)"],["mtj","Moskona"],["mtk","Mbe'"],["mtl","Montol"],["mtm","Mator"],["mtn","Matagalpa"],["mto","Totontepec Mixe"],["mtp","Wichí Lhamtés Nocten"],["mtq","Muong"],["mtr","Mewari"],["mts","Yora"],["mtt","Mota"],["mtu","Tututepec Mixtec"],["mtv","Asaro'o"],["mtw","Southern Binukidnon"],["mtx","Tidaá Mixtec"],["mty","Nabi"],["mua","Mundang"],["mub","Mubi"],["muc","Ajumbu"],["mud","Mednyj Aleut"],["mue","Media Lengua"],["mug","Musgu"],["muh","Mündü"],["mui","Musi"],["muj","Mabire"],["muk","Mugom"],["mul","Multiple languages"],["mum","Maiwala"],["mun","Munda languages"],["muo","Nyong"],["mup","Malvi"],["muq","Eastern Xiangxi Miao"],["mur","Murle"],["mus","Creek"],["mut","Western Muria"],["muu","Yaaku"],["muv","Muthuvan"],["mux","Bo-Ung"],["muy","Muyang"],["muz","Mursi"],["mva","Manam"],["mvb","Mattole"],["mvd","Mamboru"],["mve","Marwari (Pakistan)"],["mvf","Peripheral Mongolian"],["mvg","Yucuañe Mixtec"],["mvh","Mulgi"],["mvi","Miyako"],["mvk","Mekmek"],["mvl","Mbara (Australia)"],["mvm","Muya"],["mvn","Minaveha"],["mvo","Marovo"],["mvp","Duri"],["mvq","Moere"],["mvr","Marau"],["mvs","Massep"],["mvt","Mpotovoro"],["mvu","Marfa"],["mvv","Tagal Murut"],["mvw","Machinga"],["mvx","Meoswar"],["mvy","Indus Kohistani"],["mvz","Mesqan"],["mwa","Mwatebu"],["mwb","Juwal"],["mwc","Are"],["mwd","Mudbura"],["mwe","Mwera (Chimwera)"],["mwf","Murrinh-Patha"],["mwg","Aiklep"],["mwh","Mouk-Aria"],["mwi","Labo, Ninde"],["mwj","Maligo"],["mwk","Kita Maninkakan"],["mwl","Mirandese"],["mwm","Sar"],["mwn","Nyamwanga"],["mwo","Central Maewo"],["mwp","Kala Lagaw Ya"],["mwq","Mün Chin"],["mwr","Marwari"],["mws","Mwimbi-Muthambi"],["mwt","Moken"],["mwu","Mittu"],["mwv","Mentawai"],["mww","Hmong Daw"],["mwx","Mediak"],["mwy","Mosiro"],["mwz","Moingi"],["mxa","Northwest Oaxaca Mixtec"],["mxb","Tezoatlán Mixtec"],["mxc","Manyika"],["mxd","Modang"],["mxe","Mele-Fila"],["mxf","Malgbe"],["mxg","Mbangala"],["mxh","Mvuba"],["mxi","Mozarabic"],["mxj","Miju-Mishmi, Geman Deng"],["mxk","Monumbo"],["mxl","Maxi Gbe"],["mxm","Meramera"],["mxn","Moi (Indonesia)"],["mxo","Mbowe"],["mxp","Tlahuitoltepec Mixe"],["mxq","Juquila Mixe"],["mxr","Murik (Malaysia)"],["mxs","Huitepec Mixtec"],["mxt","Jamiltepec Mixtec"],["mxu","Mada (Cameroon)"],["mxv","Metlatónoc Mixtec"],["mxw","Namo"],["mxx","Mahou, Mawukakan"],["mxy","Southeastern Nochixtlán Mixtec"],["mxz","Central Masela"],["myb","Mbay"],["myc","Mayeka"],["myd","Maramba"],["mye","Myene"],["myf","Bambassi"],["myg","Manta"],["myh","Makah"],["myi","Mina (India)"],["myj","Mangayat"],["myk","Mamara Senoufo"],["myl","Moma"],["mym","Me'en"],["myn","Mayan languages"],["myo","Anfillo"],["myp","Pirahã"],["myq","Forest Maninka"],["myr","Muniche"],["mys","Mesmes"],["myt","Sangab Mandaya"],["myu","Mundurukú"],["myv","Erzya"],["myw","Muyuw"],["myx","Masaaba"],["myy","Macuna"],["myz","Classical Mandaic"],["mza","Santa María Zacatepec Mixtec"],["mzb","Tumzabt"],["mzc","Madagascar Sign Language"],["mzd","Malimba"],["mze","Morawa"],["mzg","Monastic Sign Language"],["mzh","Wichí Lhamtés Güisnay"],["mzi","Ixcatlán Mazatec"],["mzj","Manya"],["mzk","Nigeria Mambila"],["mzl","Mazatlán Mixe"],["mzm","Mumuye"],["mzn","Mazanderani"],["mzo","Matipuhy"],["mzp","Movima"],["mzq","Mori Atas"],["mzr","Marúbo"],["mzs","Macanese"],["mzt","Mintil"],["mzu","Inapang"],["mzv","Manza"],["mzw","Deg"],["mzx","Mawayana"],["mzy","Mozambican Sign Language"],["mzz","Maiadomu"],["naa","Namla"],["nab","Southern Nambikuára"],["nac","Narak"],["nad","Nijadali"],["nae","Naka'ela"],["naf","Nabak"],["nag","Naga Pidgin"],["nah","Nahuatl languages"],["nai","North American Indian languages"],["naj","Nalu"],["nak","Nakanai"],["nal","Nalik"],["nam","Ngan'gityemerri"],["nan","Min Nan Chinese"],["nao","Naaba"],["nap","Neapolitan"],["naq","Khoekhoe, Nama (Namibia)"],["nar","Iguta"],["nas","Naasioi"],["nat","Ca̱hungwa̱rya̱, Hungworo"],["naw","Nawuri"],["nax","Nakwi"],["nay","Ngarrindjeri"],["naz","Coatepec Nahuatl"],["nba","Nyemba"],["nbb","Ndoe"],["nbc","Chang Naga"],["nbd","Ngbinda"],["nbe","Konyak Naga"],["nbf","Naxi"],["nbg","Nagarchal"],["nbh","Ngamo"],["nbi","Mao Naga"],["nbj","Ngarinyman"],["nbk","Nake"],["nbm","Ngbaka Ma'bo"],["nbn","Kuri"],["nbo","Nkukoli"],["nbp","Nnam"],["nbq","Nggem"],["nbr","Numana"],["nbs","Namibian Sign Language"],["nbt","Na"],["nbu","Rongmei Naga"],["nbv","Ngamambo"],["nbw","Southern Ngbandi"],["nbx","Ngura"],["nby","Ningera"],["nca","Iyo"],["ncb","Central Nicobarese"],["ncc","Ponam"],["ncd","Nachering"],["nce","Yale"],["ncf","Notsi"],["ncg","Nisga'a"],["nch","Central Huasteca Nahuatl"],["nci","Classical Nahuatl"],["ncj","Northern Puebla Nahuatl"],["nck","Na-kara"],["ncl","Michoacán Nahuatl"],["ncm","Nambo"],["ncn","Nauna"],["nco","Sibe"],["ncp","Ndaktup"],["ncq","Northern Katang"],["ncr","Ncane"],["ncs","Nicaraguan Sign Language"],["nct","Chothe Naga"],["ncu","Chumburung"],["ncx","Central Puebla Nahuatl"],["ncz","Natchez"],["nda","Ndasa"],["ndb","Kenswei Nsei"],["ndc","Ndau"],["ndd","Nde-Nsele-Nta"],["ndf","Nadruvian"],["ndg","Ndengereko"],["ndh","Ndali"],["ndi","Samba Leko"],["ndj","Ndamba"],["ndk","Ndaka"],["ndl","Ndolo"],["ndm","Ndam"],["ndn","Ngundi"],["ndp","Ndo"],["ndq","Ndombe"],["ndr","Ndoola"],["nds","Low German, Low Saxon"],["ndt","Ndunga"],["ndu","Dugun"],["ndv","Ndut"],["ndw","Ndobo"],["ndx","Nduga"],["ndy","Lutos"],["ndz","Ndogo"],["nea","Eastern Ngad'a"],["neb","Toura (Côte d'Ivoire)"],["nec","Nedebang"],["ned","Nde-Gbite"],["nee","Nêlêmwa-Nixumwak"],["nef","Nefamese"],["neg","Negidal"],["neh","Nyenkha"],["nei","Neo-Hittite"],["nej","Neko"],["nek","Neku"],["nem","Nemi"],["nen","Nengone"],["neo","Ná-Meo"],["neq","North Central Mixe"],["ner","Yahadian"],["nes","Bhoti Kinnauri"],["net","Nete"],["neu","Neo"],["nev","Nyaheun"],["new","Newari, Nepal Bhasa"],["nex","Neme"],["ney","Neyo"],["nez","Nez Perce"],["nfa","Dhao"],["nfd","Ahwai"],["nfl","Ayiwo, Äiwoo"],["nfr","Nafaanra"],["nfu","Mfumte"],["nga","Ngbaka"],["ngb","Northern Ngbandi"],["ngc","Ngombe (Democratic Republic of Congo)"],["ngd","Ngando (Central African Republic)"],["nge","Ngemba"],["ngf","Trans-New Guinea languages"],["ngg","Ngbaka Manza"],["ngh","Nǁng"],["ngi","Ngizim"],["ngj","Ngie"],["ngk","Dalabon"],["ngl","Lomwe"],["ngm","Ngatik Men's Creole"],["ngn","Ngwo"],["ngo","Ngoni"],["ngp","Ngulu"],["ngq","Ngurimi, Ngoreme"],["ngr","Engdewu"],["ngs","Gvoko"],["ngt","Kriang, Ngeq"],["ngu","Guerrero Nahuatl"],["ngv","Nagumi"],["ngw","Ngwaba"],["ngx","Nggwahyi"],["ngy","Tibea"],["ngz","Ngungwel"],["nha","Nhanda"],["nhb","Beng"],["nhc","Tabasco Nahuatl"],["nhd","Chiripá, Ava Guaraní"],["nhe","Eastern Huasteca Nahuatl"],["nhf","Nhuwala"],["nhg","Tetelcingo Nahuatl"],["nhh","Nahari"],["nhi","Zacatlán-Ahuacatlán-Tepetzintla Nahuatl"],["nhk","Isthmus-Cosoleacaque Nahuatl"],["nhm","Morelos Nahuatl"],["nhn","Central Nahuatl"],["nho","Takuu"],["nhp","Isthmus-Pajapan Nahuatl"],["nhq","Huaxcaleca Nahuatl"],["nhr","Naro"],["nht","Ometepec Nahuatl"],["nhu","Noone"],["nhv","Temascaltepec Nahuatl"],["nhw","Western Huasteca Nahuatl"],["nhx","Isthmus-Mecayapan Nahuatl"],["nhy","Northern Oaxaca Nahuatl"],["nhz","Santa María La Alta Nahuatl"],["nia","Nias"],["nib","Nakame"],["nic","Niger-Kordofanian languages"],["nid","Ngandi"],["nie","Niellim"],["nif","Nek"],["nig","Ngalakgan"],["nih","Nyiha (Tanzania)"],["nii","Nii"],["nij","Ngaju"],["nik","Southern Nicobarese"],["nil","Nila"],["nim","Nilamba"],["nin","Ninzo"],["nio","Nganasan"],["niq","Nandi"],["nir","Nimboran"],["nis","Nimi"],["nit","Southeastern Kolami"],["niu","Niuean"],["niv","Gilyak"],["niw","Nimo"],["nix","Hema"],["niy","Ngiti"],["niz","Ningil"],["nja","Nzanyi"],["njb","Nocte Naga"],["njd","Ndonde Hamba"],["njh","Lotha Naga"],["nji","Gudanji"],["njj","Njen"],["njl","Njalgulgule"],["njm","Angami Naga"],["njn","Liangmai Naga"],["njo","Ao Naga"],["njr","Njerep"],["njs","Nisa"],["njt","Ndyuka-Trio Pidgin"],["nju","Ngadjunmaya"],["njx","Kunyi"],["njy","Njyem"],["njz","Nyishi"],["nka","Nkoya"],["nkb","Khoibu Naga"],["nkc","Nkongho"],["nkd","Koireng"],["nke","Duke"],["nkf","Inpui Naga"],["nkg","Nekgini"],["nkh","Khezha Naga"],["nki","Thangal Naga"],["nkj","Nakai"],["nkk","Nokuku"],["nkm","Namat"],["nkn","Nkangala"],["nko","Nkonya"],["nkp","Niuatoputapu"],["nkq","Nkami"],["nkr","Nukuoro"],["nks","North Asmat"],["nkt","Nyika (Tanzania)"],["nku","Bouna Kulango"],["nkv","Nyika (Malawi and Zambia)"],["nkw","Nkutu"],["nkx","Nkoroo"],["nkz","Nkari"],["nla","Ngombale"],["nlc","Nalca"],["nle","East Nyala"],["nlg","Gela"],["nli","Grangali"],["nlj","Nyali"],["nlk","Ninia Yali"],["nll","Nihali"],["nlm","Mankiyali"],["nln","Durango Nahuatl"],["nlo","Ngul"],["nlq","Lao Naga"],["nlr","Ngarla"],["nlu","Nchumbulu"],["nlv","Orizaba Nahuatl"],["nlw","Walangama"],["nlx","Nahali"],["nly","Nyamal"],["nlz","Nalögo"],["nma","Maram Naga"],["nmb","Big Nambas, V'ënen Taut"],["nmc","Ngam"],["nmd","Ndumu"],["nme","Mzieme Naga"],["nmf","Tangkhul Naga (India)"],["nmg","Kwasio"],["nmh","Monsang Naga"],["nmi","Nyam"],["nmj","Ngombe (Central African Republic)"],["nmk","Namakura"],["nml","Ndemli"],["nmm","Manangba"],["nmn","ǃXóõ"],["nmo","Moyon Naga"],["nmp","Nimanbur"],["nmq","Nambya"],["nmr","Nimbari"],["nms","Letemboi"],["nmt","Namonuito"],["nmu","Northeast Maidu"],["nmv","Ngamini"],["nmw","Nimoa, Rifao"],["nmx","Nama (Papua New Guinea)"],["nmy","Namuyi"],["nmz","Nawdm"],["nna","Nyangumarta"],["nnb","Nande"],["nnc","Nancere"],["nnd","West Ambae"],["nne","Ngandyera"],["nnf","Ngaing"],["nng","Maring Naga"],["nnh","Ngiemboon"],["nni","North Nuaulu"],["nnj","Nyangatom"],["nnk","Nankina"],["nnl","Northern Rengma Naga"],["nnm","Namia"],["nnn","Ngete"],["nnp","Wancho Naga"],["nnq","Ngindo"],["nnr","Narungga"],["nns","Ningye"],["nnt","Nanticoke"],["nnu","Dwang"],["nnv","Nugunu (Australia)"],["nnw","Southern Nuni"],["nnx","Ngong"],["nny","Nyangga"],["nnz","Nda'nda'"],["noa","Woun Meu"],["noc","Nuk"],["nod","Northern Thai"],["noe","Nimadi"],["nof","Nomane"],["nog","Nogai"],["noh","Nomu"],["noi","Noiri"],["noj","Nonuya"],["nok","Nooksack"],["nol","Nomlaki"],["nom","Nocamán"],["non","Old Norse"],["noo","Nootka"],["nop","Numanggang"],["noq","Ngongo"],["nos","Eastern Nisu"],["not","Nomatsiguenga"],["nou","Ewage-Notu"],["nov","Novial"],["now","Nyambo"],["noy","Noy"],["noz","Nayi"],["npa","Nar Phu"],["npb","Nupbikha"],["npg","Ponyo-Gongwang Naga"],["nph","Phom Naga"],["npi","Nepali (individual language)"],["npl","Southeastern Puebla Nahuatl"],["npn","Mondropolon"],["npo","Pochuri Naga"],["nps","Nipsan"],["npu","Puimei Naga"],["npx","Noipx"],["npy","Napu"],["nqg","Southern Nago"],["nqk","Kura Ede Nago"],["nql","Ngendelengo"],["nqm","Ndom"],["nqn","Nen"],["nqo","N'Ko, N’Ko"],["nqq","Kyan-Karyaw Naga"],["nqt","Nteng"],["nqy","Akyaung Ari Naga"],["nra","Ngom"],["nrb","Nara"],["nrc","Noric"],["nre","Southern Rengma Naga"],["nrf","Jèrriais, Guernésiais"],["nrg","Narango"],["nri","Chokri Naga"],["nrk","Ngarla"],["nrl","Ngarluma"],["nrm","Narom"],["nrn","Norn"],["nrp","North Picene"],["nrr","Norra, Nora"],["nrt","Northern Kalapuya"],["nru","Narua"],["nrx","Ngurmbur"],["nrz","Lala"],["nsa","Sangtam Naga"],["nsb","Lower Nossob"],["nsc","Nshi"],["nsd","Southern Nisu"],["nse","Nsenga"],["nsf","Northwestern Nisu"],["nsg","Ngasa"],["nsh","Ngoshie"],["nsi","Nigerian Sign Language"],["nsk","Naskapi"],["nsl","Norwegian Sign Language"],["nsm","Sumi Naga"],["nsn","Nehan"],["nso","Pedi, Northern Sotho, Sepedi"],["nsp","Nepalese Sign Language"],["nsq","Northern Sierra Miwok"],["nsr","Maritime Sign Language"],["nss","Nali"],["nst","Tase Naga"],["nsu","Sierra Negra Nahuatl"],["nsv","Southwestern Nisu"],["nsw","Navut"],["nsx","Nsongo"],["nsy","Nasal"],["nsz","Nisenan"],["ntd","Northern Tidung"],["nte","Nathembo"],["ntg","Ngantangarra"],["nti","Natioro"],["ntj","Ngaanyatjarra"],["ntk","Ikoma-Nata-Isenye"],["ntm","Nateni"],["nto","Ntomba"],["ntp","Northern Tepehuan"],["ntr","Delo"],["nts","Natagaimas"],["ntu","Natügu"],["ntw","Nottoway"],["ntx","Tangkhul Naga (Myanmar)"],["nty","Mantsi"],["ntz","Natanzi"],["nua","Yuanga"],["nub","Nubian languages"],["nuc","Nukuini"],["nud","Ngala"],["nue","Ngundu"],["nuf","Nusu"],["nug","Nungali"],["nuh","Ndunda"],["nui","Ngumbi"],["nuj","Nyole"],["nuk","Nuu-chah-nulth, Nuuchahnulth"],["nul","Nusa Laut"],["num","Niuafo'ou"],["nun","Anong"],["nuo","Nguôn"],["nup","Nupe-Nupe-Tako"],["nuq","Nukumanu"],["nur","Nukuria"],["nus","Nuer"],["nut","Nung (Viet Nam)"],["nuu","Ngbundu"],["nuv","Northern Nuni"],["nuw","Nguluwan"],["nux","Mehek"],["nuy","Nunggubuyu"],["nuz","Tlamacazapa Nahuatl"],["nvh","Nasarian"],["nvm","Namiae"],["nvo","Nyokon"],["nwa","Nawathinehena"],["nwb","Nyabwa"],["nwc","Classical Newari, Classical Nepal Bhasa, Old Newari"],["nwe","Ngwe"],["nwg","Ngayawung"],["nwi","Southwest Tanna"],["nwm","Nyamusa-Molo"],["nwo","Nauo"],["nwr","Nawaru"],["nwx","Middle Newar"],["nwy","Nottoway-Meherrin"],["nxa","Nauete"],["nxd","Ngando (Democratic Republic of Congo)"],["nxe","Nage"],["nxg","Ngad'a"],["nxi","Nindi"],["nxk","Koki Naga"],["nxl","South Nuaulu"],["nxm","Numidian"],["nxn","Ngawun"],["nxo","Ndambomo"],["nxq","Naxi"],["nxr","Ninggerum"],["nxu","Narau"],["nxx","Nafri"],["nyb","Nyangbo"],["nyc","Nyanga-li"],["nyd","Nyore, Olunyole"],["nye","Nyengo"],["nyf","Giryama, Kigiryama"],["nyg","Nyindu"],["nyh","Nyikina"],["nyi","Ama (Sudan)"],["nyj","Nyanga"],["nyk","Nyaneka"],["nyl","Nyeu"],["nym","Nyamwezi"],["nyn","Nyankole"],["nyo","Nyoro"],["nyp","Nyang'i"],["nyq","Nayini"],["nyr","Nyiha (Malawi)"],["nys","Nyungar"],["nyt","Nyawaygi"],["nyu","Nyungwe"],["nyv","Nyulnyul"],["nyw","Nyaw"],["nyx","Nganyaywana"],["nyy","Nyakyusa-Ngonde"],["nza","Tigon Mbembe"],["nzb","Njebi"],["nzd","Nzadi"],["nzi","Nzima"],["nzk","Nzakara"],["nzm","Zeme Naga"],["nzs","New Zealand Sign Language"],["nzu","Teke-Nzikou"],["nzy","Nzakambay"],["nzz","Nanga Dama Dogon"],["oaa","Orok"],["oac","Oroch"],["oar","Old Aramaic (up to 700 BCE), Ancient Aramaic (up to 700 BCE)"],["oav","Old Avar"],["obi","Obispeño"],["obk","Southern Bontok"],["obl","Oblo"],["obm","Moabite"],["obo","Obo Manobo"],["obr","Old Burmese"],["obt","Old Breton"],["obu","Obulom"],["oca","Ocaina"],["och","Old Chinese"],["ocm","Old Cham"],["oco","Old Cornish"],["ocu","Atzingo Matlatzinca"],["oda","Odut"],["odk","Od"],["odt","Old Dutch"],["odu","Odual"],["ofo","Ofo"],["ofs","Old Frisian"],["ofu","Efutop"],["ogb","Ogbia"],["ogc","Ogbah"],["oge","Old Georgian"],["ogg","Ogbogolo"],["ogo","Khana"],["ogu","Ogbronuagum"],["oht","Old Hittite"],["ohu","Old Hungarian"],["oia","Oirata"],["oin","Inebu One"],["ojb","Northwestern Ojibwa"],["ojc","Central Ojibwa"],["ojg","Eastern Ojibwa"],["ojp","Old Japanese"],["ojs","Severn Ojibwa"],["ojv","Ontong Java"],["ojw","Western Ojibwa"],["oka","Okanagan"],["okb","Okobo"],["okc","Kobo"],["okd","Okodia"],["oke","Okpe (Southwestern Edo)"],["okg","Koko Babangk"],["okh","Koresh-e Rostam"],["oki","Okiek"],["okj","Oko-Juwoi"],["okk","Kwamtim One"],["okl","Old Kentish Sign Language"],["okm","Middle Korean (10th-16th cent.)"],["okn","Oki-No-Erabu"],["oko","Old Korean (3rd-9th cent.)"],["okr","Kirike"],["oks","Oko-Eni-Osayen"],["oku","Oku"],["okv","Orokaiva"],["okx","Okpe (Northwestern Edo)"],["okz","Old Khmer"],["ola","Walungge"],["old","Mochi"],["ole","Olekha"],["olk","Olkol"],["olm","Oloma"],["olo","Livvi"],["olr","Olrat"],["olt","Old Lithuanian"],["olu","Kuvale"],["oma","Omaha-Ponca"],["omb","East Ambae"],["omc","Mochica"],["ome","Omejes"],["omg","Omagua"],["omi","Omi"],["omk","Omok"],["oml","Ombo"],["omn","Minoan"],["omo","Utarmbung"],["omp","Old Manipuri"],["omq","Oto-Manguean languages"],["omr","Old Marathi"],["omt","Omotik"],["omu","Omurano"],["omv","Omotic languages"],["omw","South Tairora"],["omx","Old Mon"],["omy","Old Malay"],["ona","Ona"],["onb","Lingao"],["one","Oneida"],["ong","Olo"],["oni","Onin"],["onj","Onjob"],["onk","Kabore One"],["onn","Onobasulu"],["ono","Onondaga"],["onp","Sartang"],["onr","Northern One"],["ons","Ono"],["ont","Ontenu"],["onu","Unua"],["onw","Old Nubian"],["onx","Onin Based Pidgin"],["ood","Tohono O'odham"],["oog","Ong"],["oon","Önge"],["oor","Oorlams"],["oos","Old Ossetic"],["opa","Okpamheri"],["opk","Kopkaka"],["opm","Oksapmin"],["opo","Opao"],["opt","Opata"],["opy","Ofayé"],["ora","Oroha"],["orc","Orma"],["ore","Orejón"],["org","Oring"],["orh","Oroqen"],["orn","Orang Kanaq"],["oro","Orokolo"],["orr","Oruma"],["ors","Orang Seletar"],["ort","Adivasi Oriya"],["oru","Ormuri"],["orv","Old Russian"],["orw","Oro Win"],["orx","Oro"],["ory","Odia (individual language), Oriya (individual language)"],["orz","Ormu"],["osa","Osage"],["osc","Oscan"],["osi","Osing"],["osn","Old Sundanese"],["oso","Ososo"],["osp","Old Spanish"],["ost","Osatu"],["osu","Southern One"],["osx","Old Saxon"],["ota","Ottoman Turkish (1500-1928)"],["otb","Old Tibetan"],["otd","Ot Danum"],["ote","Mezquital Otomi"],["oti","Oti"],["otk","Old Turkish"],["otl","Tilapa Otomi"],["otm","Eastern Highland Otomi"],["otn","Tenango Otomi"],["oto","Otomian languages"],["otq","Querétaro Otomi"],["otr","Otoro"],["ots","Estado de México Otomi"],["ott","Temoaya Otomi"],["otu","Otuke"],["otw","Ottawa"],["otx","Texcatepec Otomi"],["oty","Old Tamil"],["otz","Ixtenco Otomi"],["oua","Tagargrent"],["oub","Glio-Oubi"],["oue","Oune"],["oui","Old Uighur"],["oum","Ouma"],["oun","ǃOǃung"],["ovd","Elfdalian, Övdalian"],["owi","Owiniga"],["owl","Old Welsh"],["oyb","Oy"],["oyd","Oyda"],["oym","Wayampi"],["oyy","Oya'oya"],["ozm","Koonzime"],["paa","Papuan languages"],["pab","Parecís"],["pac","Pacoh"],["pad","Paumarí"],["pae","Pagibete"],["paf","Paranawát"],["pag","Pangasinan"],["pah","Tenharim"],["pai","Pe"],["pak","Parakanã"],["pal","Pahlavi"],["pam","Pampanga, Kapampangan"],["pao","Northern Paiute"],["pap","Papiamento"],["paq","Parya"],["par","Panamint, Timbisha"],["pas","Papasena"],["pat","Papitalai"],["pau","Palauan"],["pav","Pakaásnovos"],["paw","Pawnee"],["pax","Pankararé"],["pay","Pech"],["paz","Pankararú"],["pbb","Páez"],["pbc","Patamona"],["pbe","Mezontla Popoloca"],["pbf","Coyotepec Popoloca"],["pbg","Paraujano"],["pbh","E'ñapa Woromaipu"],["pbi","Parkwa"],["pbl","Mak (Nigeria)"],["pbm","Puebla Mazatec"],["pbn","Kpasam"],["pbo","Papel"],["pbp","Badyara"],["pbr","Pangwa"],["pbs","Central Pame"],["pbt","Southern Pashto"],["pbu","Northern Pashto"],["pbv","Pnar"],["pby","Pyu (Papua New Guinea)"],["pbz","Palu"],["pca","Santa Inés Ahuatempan Popoloca"],["pcb","Pear"],["pcc","Bouyei"],["pcd","Picard"],["pce","Ruching Palaung"],["pcf","Paliyan"],["pcg","Paniya"],["pch","Pardhan"],["pci","Duruwa"],["pcj","Parenga"],["pck","Paite Chin"],["pcl","Pardhi"],["pcm","Nigerian Pidgin"],["pcn","Piti"],["pcp","Pacahuara"],["pcr","Panang"],["pcw","Pyapun"],["pda","Anam"],["pdc","Pennsylvania German"],["pdi","Pa Di"],["pdn","Podena, Fedan"],["pdo","Padoe"],["pdt","Plautdietsch"],["pdu","Kayan"],["pea","Peranakan Indonesian"],["peb","Eastern Pomo"],["ped","Mala (Papua New Guinea)"],["pee","Taje"],["pef","Northeastern Pomo"],["peg","Pengo"],["peh","Bonan"],["pei","Chichimeca-Jonaz"],["pej","Northern Pomo"],["pek","Penchal"],["pel","Pekal"],["pem","Phende"],["peo","Old Persian (ca. 600-400 B.C.)"],["pep","Kunja"],["peq","Southern Pomo"],["pes","Iranian Persian"],["pev","Pémono"],["pex","Petats"],["pey","Petjo"],["pez","Eastern Penan"],["pfa","Pááfang"],["pfe","Pere"],["pfl","Pfaelzisch"],["pga","Sudanese Creole Arabic"],["pgd","Gāndhārī"],["pgg","Pangwali"],["pgi","Pagi"],["pgk","Rerep"],["pgl","Primitive Irish"],["pgn","Paelignian"],["pgs","Pangseng"],["pgu","Pagu"],["pgy","Pongyong"],["pgz","Papua New Guinean Sign Language"],["pha","Pa-Hng"],["phd","Phudagi"],["phg","Phuong"],["phh","Phukha"],["phi","Philippine languages"],["phk","Phake"],["phl","Phalura, Palula"],["phm","Phimbi"],["phn","Phoenician"],["pho","Phunoi"],["phq","Phana'"],["phr","Pahari-Potwari"],["pht","Phu Thai"],["phu","Phuan"],["phv","Pahlavani"],["phw","Phangduwali"],["pia","Pima Bajo"],["pib","Yine"],["pic","Pinji"],["pid","Piaroa"],["pie","Piro"],["pif","Pingelapese"],["pig","Pisabo"],["pih","Pitcairn-Norfolk"],["pii","Pini"],["pij","Pijao"],["pil","Yom"],["pim","Powhatan"],["pin","Piame"],["pio","Piapoco"],["pip","Pero"],["pir","Piratapuyo"],["pis","Pijin"],["pit","Pitta Pitta"],["piu","Pintupi-Luritja"],["piv","Pileni, Vaeakau-Taumako"],["piw","Pimbwe"],["pix","Piu"],["piy","Piya-Kwonci"],["piz","Pije"],["pjt","Pitjantjatjara"],["pka","Ardhamāgadhī Prākrit"],["pkb","Pokomo, Kipfokomo"],["pkc","Paekche"],["pkg","Pak-Tong"],["pkh","Pankhu"],["pkn","Pakanha"],["pko","Pökoot"],["pkp","Pukapuka"],["pkr","Attapady Kurumba"],["pks","Pakistan Sign Language"],["pkt","Maleng"],["pku","Paku"],["pla","Miani"],["plb","Polonombauk"],["plc","Central Palawano"],["pld","Polari"],["ple","Palu'e"],["plf","Central Malayo-Polynesian languages"],["plg","Pilagá"],["plh","Paulohi"],["plj","Polci"],["plk","Kohistani Shina"],["pll","Shwe Palaung"],["pln","Palenquero"],["plo","Oluta Popoluca"],["plp","Palpa"],["plq","Palaic"],["plr","Palaka Senoufo"],["pls","San Marcos Tlacoyalco Popoloca, San Marcos Tlalcoyalco Popoloca"],["plt","Plateau Malagasy"],["plu","Palikúr"],["plv","Southwest Palawano"],["plw","Brooke's Point Palawano"],["ply","Bolyu"],["plz","Paluan"],["pma","Paama"],["pmb","Pambia"],["pmc","Palumata"],["pmd","Pallanganmiddang"],["pme","Pwaamei"],["pmf","Pamona"],["pmh","Māhārāṣṭri Prākrit"],["pmi","Northern Pumi"],["pmj","Southern Pumi"],["pmk","Pamlico"],["pml","Lingua Franca"],["pmm","Pomo"],["pmn","Pam"],["pmo","Pom"],["pmq","Northern Pame"],["pmr","Paynamar"],["pms","Piemontese"],["pmt","Tuamotuan"],["pmu","Mirpur Panjabi"],["pmw","Plains Miwok"],["pmx","Poumei Naga"],["pmy","Papuan Malay"],["pmz","Southern Pame"],["pna","Punan Bah-Biau"],["pnb","Western Panjabi"],["pnc","Pannei"],["pnd","Mpinda"],["pne","Western Penan"],["png","Pangu, Pongu"],["pnh","Penrhyn"],["pni","Aoheng"],["pnj","Pinjarup"],["pnk","Paunaka"],["pnl","Paleni"],["pnm","Punan Batu 1"],["pnn","Pinai-Hagahai"],["pno","Panobo"],["pnp","Pancana"],["pnq","Pana (Burkina Faso)"],["pnr","Panim"],["pns","Ponosakan"],["pnt","Pontic"],["pnu","Jiongnai Bunu"],["pnv","Pinigura"],["pnw","Banyjima, Panytyima"],["pnx","Phong-Kniang"],["pny","Pinyin"],["pnz","Pana (Central African Republic)"],["poc","Poqomam"],["pod","Ponares"],["poe","San Juan Atzingo Popoloca"],["pof","Poke"],["pog","Potiguára"],["poh","Poqomchi'"],["poi","Highland Popoluca"],["pok","Pokangá"],["pom","Southeastern Pomo"],["pon","Pohnpeian"],["poo","Central Pomo"],["pop","Pwapwâ"],["poq","Texistepec Popoluca"],["pos","Sayula Popoluca"],["pot","Potawatomi"],["pov","Upper Guinea Crioulo"],["pow","San Felipe Otlaltepec Popoloca"],["pox","Polabian"],["poy","Pogolo"],["poz","Malayo-Polynesian languages"],["ppa","Pao"],["ppe","Papi"],["ppi","Paipai"],["ppk","Uma"],["ppl","Pipil, Nicarao"],["ppm","Papuma"],["ppn","Papapana"],["ppo","Folopa"],["ppp","Pelende"],["ppq","Pei"],["ppr","Piru"],["pps","San Luís Temalacayuca Popoloca"],["ppt","Pare"],["ppu","Papora"],["pqa","Pa'a"],["pqe","Eastern Malayo-Polynesian languages"],["pqm","Malecite-Passamaquoddy"],["pqw","Western Malayo-Polynesian languages"],["pra","Prakrit languages"],["prb","Lua'"],["prc","Parachi"],["prd","Parsi-Dari"],["pre","Principense"],["prf","Paranan"],["prg","Prussian"],["prh","Porohanon"],["pri","Paicî"],["prk","Parauk"],["prl","Peruvian Sign Language"],["prm","Kibiri"],["prn","Prasuni"],["pro","Old Provençal (to 1500), Old Occitan (to 1500)"],["prp","Parsi"],["prq","Ashéninka Perené"],["prr","Puri"],["prs","Dari, Afghan Persian"],["prt","Phai"],["pru","Puragi"],["prw","Parawen"],["prx","Purik"],["pry","Pray 3"],["prz","Providencia Sign Language"],["psa","Asue Awyu"],["psc","Persian Sign Language"],["psd","Plains Indian Sign Language"],["pse","Central Malay"],["psg","Penang Sign Language"],["psh","Southwest Pashai, Southwest Pashayi"],["psi","Southeast Pashai, Southeast Pashayi"],["psl","Puerto Rican Sign Language"],["psm","Pauserna"],["psn","Panasuan"],["pso","Polish Sign Language"],["psp","Philippine Sign Language"],["psq","Pasi"],["psr","Portuguese Sign Language"],["pss","Kaulong"],["pst","Central Pashto"],["psu","Sauraseni Prākrit"],["psw","Port Sandwich"],["psy","Piscataway"],["pta","Pai Tavytera"],["pth","Pataxó Hã-Ha-Hãe"],["pti","Pindiini, Wangkatha"],["ptn","Patani"],["pto","Zo'é"],["ptp","Patep"],["ptq","Pattapu"],["ptr","Piamatsina"],["ptt","Enrekang"],["ptu","Bambam"],["ptv","Port Vato"],["ptw","Pentlatch"],["pty","Pathiya"],["pua","Western Highland Purepecha"],["pub","Purum"],["puc","Punan Merap"],["pud","Punan Aput"],["pue","Puelche"],["puf","Punan Merah"],["pug","Phuie"],["pui","Puinave"],["puj","Punan Tubu"],["puk","Pu Ko"],["pum","Puma"],["puo","Puoc"],["pup","Pulabu"],["puq","Puquina"],["pur","Puruborá"],["put","Putoh"],["puu","Punu"],["puw","Puluwatese"],["pux","Puare"],["puy","Purisimeño"],["puz","Purum Naga"],["pwa","Pawaia"],["pwb","Panawa"],["pwg","Gapapaiwa"],["pwi","Patwin"],["pwm","Molbog"],["pwn","Paiwan"],["pwo","Pwo Western Karen"],["pwr","Powari"],["pww","Pwo Northern Karen"],["pxm","Quetzaltepec Mixe"],["pye","Pye Krumen"],["pym","Fyam"],["pyn","Poyanáwa"],["pys","Paraguayan Sign Language, Lengua de Señas del Paraguay"],["pyu","Puyuma"],["pyx","Pyu (Myanmar)"],["pyy","Pyen"],["pzn","Para Naga"],["qaa..qtz","Private use"],["qua","Quapaw"],["qub","Huallaga Huánuco Quechua"],["quc","K'iche', Quiché"],["qud","Calderón Highland Quichua"],["quf","Lambayeque Quechua"],["qug","Chimborazo Highland Quichua"],["quh","South Bolivian Quechua"],["qui","Quileute"],["quk","Chachapoyas Quechua"],["qul","North Bolivian Quechua"],["qum","Sipacapense"],["qun","Quinault"],["qup","Southern Pastaza Quechua"],["quq","Quinqui"],["qur","Yanahuanca Pasco Quechua"],["qus","Santiago del Estero Quichua"],["quv","Sacapulteco"],["quw","Tena Lowland Quichua"],["qux","Yauyos Quechua"],["quy","Ayacucho Quechua"],["quz","Cusco Quechua"],["qva","Ambo-Pasco Quechua"],["qvc","Cajamarca Quechua"],["qve","Eastern Apurímac Quechua"],["qvh","Huamalíes-Dos de Mayo Huánuco Quechua"],["qvi","Imbabura Highland Quichua"],["qvj","Loja Highland Quichua"],["qvl","Cajatambo North Lima Quechua"],["qvm","Margos-Yarowilca-Lauricocha Quechua"],["qvn","North Junín Quechua"],["qvo","Napo Lowland Quechua"],["qvp","Pacaraos Quechua"],["qvs","San Martín Quechua"],["qvw","Huaylla Wanca Quechua"],["qvy","Queyu"],["qvz","Northern Pastaza Quichua"],["qwa","Corongo Ancash Quechua"],["qwc","Classical Quechua"],["qwe","Quechuan (family)"],["qwh","Huaylas Ancash Quechua"],["qwm","Kuman (Russia)"],["qws","Sihuas Ancash Quechua"],["qwt","Kwalhioqua-Tlatskanai"],["qxa","Chiquián Ancash Quechua"],["qxc","Chincha Quechua"],["qxh","Panao Huánuco Quechua"],["qxl","Salasaca Highland Quichua"],["qxn","Northern Conchucos Ancash Quechua"],["qxo","Southern Conchucos Ancash Quechua"],["qxp","Puno Quechua"],["qxq","Qashqa'i"],["qxr","Cañar Highland Quichua"],["qxs","Southern Qiang"],["qxt","Santa Ana de Tusi Pasco Quechua"],["qxu","Arequipa-La Unión Quechua"],["qxw","Jauja Wanca Quechua"],["qya","Quenya"],["qyp","Quiripi"],["raa","Dungmali"],["rab","Camling"],["rac","Rasawa"],["rad","Rade"],["raf","Western Meohang"],["rag","Logooli, Lulogooli"],["rah","Rabha"],["rai","Ramoaaina"],["raj","Rajasthani"],["rak","Tulu-Bohuai"],["ral","Ralte"],["ram","Canela"],["ran","Riantana"],["rao","Rao"],["rap","Rapanui"],["raq","Saam"],["rar","Rarotongan, Cook Islands Maori"],["ras","Tegali"],["rat","Razajerdi"],["rau","Raute"],["rav","Sampang"],["raw","Rawang"],["rax","Rang"],["ray","Rapa"],["raz","Rahambuu"],["rbb","Rumai Palaung"],["rbk","Northern Bontok"],["rbl","Miraya Bikol"],["rbp","Barababaraba"],["rcf","Réunion Creole French"],["rdb","Rudbari"],["rea","Rerau"],["reb","Rembong"],["ree","Rejang Kayan"],["reg","Kara (Tanzania)"],["rei","Reli"],["rej","Rejang"],["rel","Rendille"],["rem","Remo"],["ren","Rengao"],["rer","Rer Bare"],["res","Reshe"],["ret","Retta"],["rey","Reyesano"],["rga","Roria"],["rge","Romano-Greek"],["rgk","Rangkas"],["rgn","Romagnol"],["rgr","Resígaro"],["rgs","Southern Roglai"],["rgu","Ringgou"],["rhg","Rohingya"],["rhp","Yahang"],["ria","Riang (India)"],["rie","Rien"],["rif","Tarifit"],["ril","Riang Lang, Riang (Myanmar)"],["rim","Nyaturu"],["rin","Nungu"],["rir","Ribun"],["rit","Ritharrngu"],["riu","Riung"],["rjg","Rajong"],["rji","Raji"],["rjs","Rajbanshi"],["rka","Kraol"],["rkb","Rikbaktsa"],["rkh","Rakahanga-Manihiki"],["rki","Rakhine"],["rkm","Marka"],["rkt","Rangpuri, Kamta"],["rkw","Arakwal"],["rma","Rama"],["rmb","Rembarrnga"],["rmc","Carpathian Romani"],["rmd","Traveller Danish"],["rme","Angloromani"],["rmf","Kalo Finnish Romani"],["rmg","Traveller Norwegian"],["rmh","Murkim"],["rmi","Lomavren"],["rmk","Romkun"],["rml","Baltic Romani"],["rmm","Roma"],["rmn","Balkan Romani"],["rmo","Sinte Romani"],["rmp","Rempi"],["rmq","Caló"],["rmr","Caló"],["rms","Romanian Sign Language"],["rmt","Domari"],["rmu","Tavringer Romani"],["rmv","Romanova"],["rmw","Welsh Romani"],["rmx","Romam"],["rmy","Vlax Romani"],["rmz","Marma"],["rna","Runa"],["rnd","Ruund"],["rng","Ronga"],["rnl","Ranglong"],["rnn","Roon"],["rnp","Rongpo"],["rnr","Nari Nari"],["rnw","Rungwa"],["roa","Romance languages"],["rob","Tae'"],["roc","Cacgia Roglai"],["rod","Rogo"],["roe","Ronji"],["rof","Rombo"],["rog","Northern Roglai"],["rol","Romblomanon"],["rom","Romany"],["roo","Rotokas"],["rop","Kriol"],["ror","Rongga"],["rou","Runga"],["row","Dela-Oenale"],["rpn","Repanbitip"],["rpt","Rapting"],["rri","Ririo"],["rro","Waima"],["rrt","Arritinngithigh"],["rsb","Romano-Serbian"],["rsi","Rennellese Sign Language"],["rsl","Russian Sign Language"],["rsm","Miriwoong Sign Language"],["rtc","Rungtu Chin"],["rth","Ratahan"],["rtm","Rotuman"],["rts","Yurats"],["rtw","Rathawi"],["rub","Gungu"],["ruc","Ruuli"],["rue","Rusyn"],["ruf","Luguru"],["rug","Roviana"],["ruh","Ruga"],["rui","Rufiji"],["ruk","Che"],["ruo","Istro Romanian"],["rup","Macedo-Romanian, Aromanian, Arumanian"],["ruq","Megleno Romanian"],["rut","Rutul"],["ruu","Lanas Lobu"],["ruy","Mala (Nigeria)"],["ruz","Ruma"],["rwa","Rawo"],["rwk","Rwa"],["rwl","Ruwila"],["rwm","Amba (Uganda)"],["rwo","Rawa"],["rwr","Marwari (India)"],["rxd","Ngardi"],["rxw","Karuwali, Garuwali"],["ryn","Northern Amami-Oshima"],["rys","Yaeyama"],["ryu","Central Okinawan"],["rzh","Rāziḥī"],["saa","Saba"],["sab","Buglere"],["sac","Meskwaki"],["sad","Sandawe"],["sae","Sabanê"],["saf","Safaliba"],["sah","Yakut"],["sai","South American Indian languages"],["saj","Sahu"],["sak","Sake"],["sal","Salishan languages"],["sam","Samaritan Aramaic"],["sao","Sause"],["sap","Sanapaná"],["saq","Samburu"],["sar","Saraveca"],["sas","Sasak"],["sat","Santali"],["sau","Saleman"],["sav","Saafi-Saafi"],["saw","Sawi"],["sax","Sa"],["say","Saya"],["saz","Saurashtra"],["sba","Ngambay"],["sbb","Simbo"],["sbc","Kele (Papua New Guinea)"],["sbd","Southern Samo"],["sbe","Saliba"],["sbf","Chabu, Shabo"],["sbg","Seget"],["sbh","Sori-Harengan"],["sbi","Seti"],["sbj","Surbakhal"],["sbk","Safwa"],["sbl","Botolan Sambal"],["sbm","Sagala"],["sbn","Sindhi Bhil"],["sbo","Sabüm"],["sbp","Sangu (Tanzania)"],["sbq","Sileibi"],["sbr","Sembakung Murut"],["sbs","Subiya"],["sbt","Kimki"],["sbu","Stod Bhoti"],["sbv","Sabine"],["sbw","Simba"],["sbx","Seberuang"],["sby","Soli"],["sbz","Sara Kaba"],["sca","Sansu"],["scb","Chut"],["sce","Dongxiang"],["scf","San Miguel Creole French"],["scg","Sanggau"],["sch","Sakachep"],["sci","Sri Lankan Creole Malay"],["sck","Sadri"],["scl","Shina"],["scn","Sicilian"],["sco","Scots"],["scp","Hyolmo, Helambu Sherpa"],["scq","Sa'och"],["scs","North Slavey"],["sct","Southern Katang"],["scu","Shumcho"],["scv","Sheni"],["scw","Sha"],["scx","Sicel"],["sda","Toraja-Sa'dan"],["sdb","Shabak"],["sdc","Sassarese Sardinian"],["sde","Surubu"],["sdf","Sarli"],["sdg","Savi"],["sdh","Southern Kurdish"],["sdj","Suundi"],["sdk","Sos Kundi"],["sdl","Saudi Arabian Sign Language"],["sdm","Semandang"],["sdn","Gallurese Sardinian"],["sdo","Bukar-Sadung Bidayuh"],["sdp","Sherdukpen"],["sdq","Semandang"],["sdr","Oraon Sadri"],["sds","Sened"],["sdt","Shuadit"],["sdu","Sarudu"],["sdv","Eastern Sudanic languages"],["sdx","Sibu Melanau"],["sdz","Sallands"],["sea","Semai"],["seb","Shempire Senoufo"],["sec","Sechelt"],["sed","Sedang"],["see","Seneca"],["sef","Cebaara Senoufo"],["seg","Segeju"],["seh","Sena"],["sei","Seri"],["sej","Sene"],["sek","Sekani"],["sel","Selkup"],["sem","Semitic languages"],["sen","Nanerigé Sénoufo"],["seo","Suarmin"],["sep","Sìcìté Sénoufo"],["seq","Senara Sénoufo"],["ser","Serrano"],["ses","Koyraboro Senni Songhai"],["set","Sentani"],["seu","Serui-Laut"],["sev","Nyarafolo Senoufo"],["sew","Sewa Bay"],["sey","Secoya"],["sez","Senthang Chin"],["sfb","Langue des signes de Belgique Francophone, French Belgian Sign Language"],["sfe","Eastern Subanen"],["sfm","Small Flowery Miao"],["sfs","South African Sign Language"],["sfw","Sehwi"],["sga","Old Irish (to 900)"],["sgb","Mag-antsi Ayta"],["sgc","Kipsigis"],["sgd","Surigaonon"],["sge","Segai"],["sgg","Swiss-German Sign Language"],["sgh","Shughni"],["sgi","Suga"],["sgj","Surgujia"],["sgk","Sangkong"],["sgl","Sanglechi-Ishkashimi"],["sgm","Singa"],["sgn","Sign languages"],["sgo","Songa"],["sgp","Singpho"],["sgr","Sangisari"],["sgs","Samogitian"],["sgt","Brokpake"],["sgu","Salas"],["sgw","Sebat Bet Gurage"],["sgx","Sierra Leone Sign Language"],["sgy","Sanglechi"],["sgz","Sursurunga"],["sha","Shall-Zwall"],["shb","Ninam"],["shc","Sonde"],["shd","Kundal Shahi"],["she","Sheko"],["shg","Shua"],["shh","Shoshoni"],["shi","Tachelhit"],["shj","Shatt"],["shk","Shilluk"],["shl","Shendu"],["shm","Shahrudi"],["shn","Shan"],["sho","Shanga"],["shp","Shipibo-Conibo"],["shq","Sala"],["shr","Shi"],["shs","Shuswap"],["sht","Shasta"],["shu","Chadian Arabic"],["shv","Shehri"],["shw","Shwai"],["shx","She"],["shy","Tachawit"],["shz","Syenara Senoufo"],["sia","Akkala Sami"],["sib","Sebop"],["sid","Sidamo"],["sie","Simaa"],["sif","Siamou"],["sig","Paasaal"],["sih","Zire, Sîshëë"],["sii","Shom Peng"],["sij","Numbami"],["sik","Sikiana"],["sil","Tumulung Sisaala"],["sim","Mende (Papua New Guinea)"],["sio","Siouan languages"],["sip","Sikkimese"],["siq","Sonia"],["sir","Siri"],["sis","Siuslaw"],["sit","Sino-Tibetan languages"],["siu","Sinagen"],["siv","Sumariup"],["siw","Siwai"],["six","Sumau"],["siy","Sivandi"],["siz","Siwi"],["sja","Epena"],["sjb","Sajau Basap"],["sjd","Kildin Sami"],["sje","Pite Sami"],["sjg","Assangori"],["sjk","Kemi Sami"],["sjl","Sajalong, Miji"],["sjm","Mapun"],["sjn","Sindarin"],["sjo","Xibe"],["sjp","Surjapuri"],["sjr","Siar-Lak"],["sjs","Senhaja De Srair"],["sjt","Ter Sami"],["sju","Ume Sami"],["sjw","Shawnee"],["ska","Skagit"],["skb","Saek"],["skc","Ma Manda"],["skd","Southern Sierra Miwok"],["ske","Seke (Vanuatu)"],["skf","Sakirabiá"],["skg","Sakalava Malagasy"],["skh","Sikule"],["ski","Sika"],["skj","Seke (Nepal)"],["skk","Sok"],["skm","Kutong"],["skn","Kolibugan Subanon"],["sko","Seko Tengah"],["skp","Sekapan"],["skq","Sininkere"],["skr","Saraiki, Seraiki"],["sks","Maia"],["skt","Sakata"],["sku","Sakao"],["skv","Skou"],["skw","Skepi Creole Dutch"],["skx","Seko Padang"],["sky","Sikaiana"],["skz","Sekar"],["sla","Slavic languages"],["slc","Sáliba"],["sld","Sissala"],["sle","Sholaga"],["slf","Swiss-Italian Sign Language"],["slg","Selungai Murut"],["slh","Southern Puget Sound Salish"],["sli","Lower Silesian"],["slj","Salumá"],["sll","Salt-Yui"],["slm","Pangutaran Sama"],["sln","Salinan"],["slp","Lamaholot"],["slq","Salchuq"],["slr","Salar"],["sls","Singapore Sign Language"],["slt","Sila"],["slu","Selaru"],["slw","Sialum"],["slx","Salampasu"],["sly","Selayar"],["slz","Ma'ya"],["sma","Southern Sami"],["smb","Simbari"],["smc","Som"],["smd","Sama"],["smf","Auwe"],["smg","Simbali"],["smh","Samei"],["smi","Sami languages"],["smj","Lule Sami"],["smk","Bolinao"],["sml","Central Sama"],["smm","Musasa"],["smn","Inari Sami"],["smp","Samaritan"],["smq","Samo"],["smr","Simeulue"],["sms","Skolt Sami"],["smt","Simte"],["smu","Somray"],["smv","Samvedi"],["smw","Sumbawa"],["smx","Samba"],["smy","Semnani"],["smz","Simeku"],["snb","Sebuyau"],["snc","Sinaugoro"],["sne","Bau Bidayuh"],["snf","Noon"],["sng","Sanga (Democratic Republic of Congo)"],["snh","Shinabo"],["sni","Sensi"],["snj","Riverain Sango"],["snk","Soninke"],["snl","Sangil"],["snm","Southern Ma'di"],["snn","Siona"],["sno","Snohomish"],["snp","Siane"],["snq","Sangu (Gabon)"],["snr","Sihan"],["sns","South West Bay, Nahavaq"],["snu","Senggi, Viid"],["snv","Sa'ban"],["snw","Selee"],["snx","Sam"],["sny","Saniyo-Hiyewe"],["snz","Kou"],["soa","Thai Song"],["sob","Sobei"],["soc","So (Democratic Republic of Congo)"],["sod","Songoora"],["soe","Songomeno"],["sog","Sogdian"],["soh","Aka"],["soi","Sonha"],["soj","Soi"],["sok","Sokoro"],["sol","Solos"],["son","Songhai languages"],["soo","Songo"],["sop","Songe"],["soq","Kanasi"],["sor","Somrai"],["sos","Seeku"],["sou","Southern Thai"],["sov","Sonsorol"],["sow","Sowanda"],["sox","Swo"],["soy","Miyobe"],["soz","Temi"],["spb","Sepa (Indonesia)"],["spc","Sapé"],["spd","Saep"],["spe","Sepa (Papua New Guinea)"],["spg","Sian"],["spi","Saponi"],["spk","Sengo"],["spl","Selepet"],["spm","Akukem"],["spn","Sanapaná"],["spo","Spokane"],["spp","Supyire Senoufo"],["spq","Loreto-Ucayali Spanish"],["spr","Saparua"],["sps","Saposa"],["spt","Spiti Bhoti"],["spu","Sapuan"],["spv","Sambalpuri, Kosli"],["spx","South Picene"],["spy","Sabaot"],["sqa","Shama-Sambuga"],["sqh","Shau"],["sqj","Albanian languages"],["sqk","Albanian Sign Language"],["sqm","Suma"],["sqn","Susquehannock"],["sqo","Sorkhei"],["sqq","Sou"],["sqr","Siculo Arabic"],["sqs","Sri Lankan Sign Language"],["sqt","Soqotri"],["squ","Squamish"],["sqx","Kufr Qassem Sign Language (KQSL)"],["sra","Saruga"],["srb","Sora"],["src","Logudorese Sardinian"],["sre","Sara"],["srf","Nafi"],["srg","Sulod"],["srh","Sarikoli"],["sri","Siriano"],["srk","Serudung Murut"],["srl","Isirawa"],["srm","Saramaccan"],["srn","Sranan Tongo"],["sro","Campidanese Sardinian"],["srq","Sirionó"],["srr","Serer"],["srs","Sarsi"],["srt","Sauri"],["sru","Suruí"],["srv","Southern Sorsoganon"],["srw","Serua"],["srx","Sirmauri"],["sry","Sera"],["srz","Shahmirzadi"],["ssa","Nilo-Saharan languages"],["ssb","Southern Sama"],["ssc","Suba-Simbiti"],["ssd","Siroi"],["sse","Balangingi, Bangingih Sama"],["ssf","Thao"],["ssg","Seimat"],["ssh","Shihhi Arabic"],["ssi","Sansi"],["ssj","Sausi"],["ssk","Sunam"],["ssl","Western Sisaala"],["ssm","Semnam"],["ssn","Waata"],["sso","Sissano"],["ssp","Spanish Sign Language"],["ssq","So'a"],["ssr","Swiss-French Sign Language"],["sss","Sô"],["sst","Sinasina"],["ssu","Susuami"],["ssv","Shark Bay"],["ssx","Samberigi"],["ssy","Saho"],["ssz","Sengseng"],["sta","Settla"],["stb","Northern Subanen"],["std","Sentinel"],["ste","Liana-Seti"],["stf","Seta"],["stg","Trieng"],["sth","Shelta"],["sti","Bulo Stieng"],["stj","Matya Samo"],["stk","Arammba"],["stl","Stellingwerfs"],["stm","Setaman"],["stn","Owa"],["sto","Stoney"],["stp","Southeastern Tepehuan"],["stq","Saterfriesisch"],["str","Straits Salish"],["sts","Shumashti"],["stt","Budeh Stieng"],["stu","Samtao"],["stv","Silt'e"],["stw","Satawalese"],["sty","Siberian Tatar"],["sua","Sulka"],["sub","Suku"],["suc","Western Subanon"],["sue","Suena"],["sug","Suganga"],["sui","Suki"],["suj","Shubi"],["suk","Sukuma"],["sul","Surigaonon"],["sum","Sumo-Mayangna"],["suo","Bouni"],["suq","Tirmaga-Chai Suri, Suri"],["sur","Mwaghavul"],["sus","Susu"],["sut","Subtiaba"],["suv","Puroik"],["suw","Sumbwa"],["sux","Sumerian"],["suy","Suyá"],["suz","Sunwar"],["sva","Svan"],["svb","Ulau-Suain"],["svc","Vincentian Creole English"],["sve","Serili"],["svk","Slovakian Sign Language"],["svm","Slavomolisano"],["svr","Savara"],["svs","Savosavo"],["svx","Skalvian"],["swb","Maore Comorian"],["swc","Congo Swahili"],["swf","Sere"],["swg","Swabian"],["swh","Swahili (individual language), Kiswahili"],["swi","Sui"],["swj","Sira"],["swk","Malawi Sena"],["swl","Swedish Sign Language"],["swm","Samosa"],["swn","Sawknah"],["swo","Shanenawa"],["swp","Suau"],["swq","Sharwa"],["swr","Saweru"],["sws","Seluwasan"],["swt","Sawila"],["swu","Suwawa"],["swv","Shekhawati"],["sww","Sowa"],["swx","Suruahá"],["swy","Sarua"],["sxb","Suba"],["sxc","Sicanian"],["sxe","Sighu"],["sxg","Shuhi, Shixing"],["sxk","Southern Kalapuya"],["sxl","Selian"],["sxm","Samre"],["sxn","Sangir"],["sxo","Sorothaptic"],["sxr","Saaroa"],["sxs","Sasaru"],["sxu","Upper Saxon"],["sxw","Saxwe Gbe"],["sya","Siang"],["syb","Central Subanen"],["syc","Classical Syriac"],["syd","Samoyedic languages"],["syi","Seki"],["syk","Sukur"],["syl","Sylheti"],["sym","Maya Samo"],["syn","Senaya"],["syo","Suoy"],["syr","Syriac"],["sys","Sinyar"],["syw","Kagate"],["syx","Samay"],["syy","Al-Sayyid Bedouin Sign Language"],["sza","Semelai"],["szb","Ngalum"],["szc","Semaq Beri"],["szd","Seru"],["sze","Seze"],["szg","Sengele"],["szl","Silesian"],["szn","Sula"],["szp","Suabo"],["szs","Solomon Islands Sign Language"],["szv","Isu (Fako Division)"],["szw","Sawai"],["szy","Sakizaya"],["taa","Lower Tanana"],["tab","Tabassaran"],["tac","Lowland Tarahumara"],["tad","Tause"],["tae","Tariana"],["taf","Tapirapé"],["tag","Tagoi"],["tai","Tai languages"],["taj","Eastern Tamang"],["tak","Tala"],["tal","Tal"],["tan","Tangale"],["tao","Yami"],["tap","Taabwa"],["taq","Tamasheq"],["tar","Central Tarahumara"],["tas","Tay Boi"],["tau","Upper Tanana"],["tav","Tatuyo"],["taw","Tai"],["tax","Tamki"],["tay","Atayal"],["taz","Tocho"],["tba","Aikanã"],["tbb","Tapeba"],["tbc","Takia"],["tbd","Kaki Ae"],["tbe","Tanimbili"],["tbf","Mandara"],["tbg","North Tairora"],["tbh","Dharawal, Thurawal"],["tbi","Gaam"],["tbj","Tiang"],["tbk","Calamian Tagbanwa"],["tbl","Tboli"],["tbm","Tagbu"],["tbn","Barro Negro Tunebo"],["tbo","Tawala"],["tbp","Taworta, Diebroud"],["tbq","Tibeto-Burman languages"],["tbr","Tumtum"],["tbs","Tanguat"],["tbt","Tembo (Kitembo)"],["tbu","Tubar"],["tbv","Tobo"],["tbw","Tagbanwa"],["tbx","Kapin"],["tby","Tabaru"],["tbz","Ditammari"],["tca","Ticuna"],["tcb","Tanacross"],["tcc","Datooga"],["tcd","Tafi"],["tce","Southern Tutchone"],["tcf","Malinaltepec Me'phaa, Malinaltepec Tlapanec"],["tcg","Tamagario"],["tch","Turks And Caicos Creole English"],["tci","Wára"],["tck","Tchitchege"],["tcl","Taman (Myanmar)"],["tcm","Tanahmerah"],["tcn","Tichurong"],["tco","Taungyo"],["tcp","Tawr Chin"],["tcq","Kaiy"],["tcs","Torres Strait Creole, Yumplatok"],["tct","T'en"],["tcu","Southeastern Tarahumara"],["tcw","Tecpatlán Totonac"],["tcx","Toda"],["tcy","Tulu"],["tcz","Thado Chin"],["tda","Tagdal"],["tdb","Panchpargania"],["tdc","Emberá-Tadó"],["tdd","Tai Nüa"],["tde","Tiranige Diga Dogon"],["tdf","Talieng"],["tdg","Western Tamang"],["tdh","Thulung"],["tdi","Tomadino"],["tdj","Tajio"],["tdk","Tambas"],["tdl","Sur"],["tdm","Taruma"],["tdn","Tondano"],["tdo","Teme"],["tdq","Tita"],["tdr","Todrah"],["tds","Doutai"],["tdt","Tetun Dili"],["tdu","Tempasuk Dusun"],["tdv","Toro"],["tdx","Tandroy-Mahafaly Malagasy"],["tdy","Tadyawan"],["tea","Temiar"],["teb","Tetete"],["tec","Terik"],["ted","Tepo Krumen"],["tee","Huehuetla Tepehua"],["tef","Teressa"],["teg","Teke-Tege"],["teh","Tehuelche"],["tei","Torricelli"],["tek","Ibali Teke"],["tem","Timne"],["ten","Tama (Colombia)"],["teo","Teso"],["tep","Tepecano"],["teq","Temein"],["ter","Tereno"],["tes","Tengger"],["tet","Tetum"],["teu","Soo"],["tev","Teor"],["tew","Tewa (USA)"],["tex","Tennet"],["tey","Tulishi"],["tez","Tetserret"],["tfi","Tofin Gbe"],["tfn","Tanaina"],["tfo","Tefaro"],["tfr","Teribe"],["tft","Ternate"],["tga","Sagalla"],["tgb","Tobilung"],["tgc","Tigak"],["tgd","Ciwogai"],["tge","Eastern Gorkha Tamang"],["tgf","Chalikha"],["tgg","Tangga"],["tgh","Tobagonian Creole English"],["tgi","Lawunuia"],["tgj","Tagin"],["tgn","Tandaganon"],["tgo","Sudest"],["tgp","Tangoa"],["tgq","Tring"],["tgr","Tareng"],["tgs","Nume"],["tgt","Central Tagbanwa"],["tgu","Tanggu"],["tgv","Tingui-Boto"],["tgw","Tagwana Senoufo"],["tgx","Tagish"],["tgy","Togoyo"],["tgz","Tagalaka"],["thc","Tai Hang Tong"],["thd","Kuuk Thaayorre, Thayore"],["the","Chitwania Tharu"],["thf","Thangmi"],["thh","Northern Tarahumara"],["thi","Tai Long"],["thk","Tharaka, Kitharaka"],["thl","Dangaura Tharu"],["thm","Aheu"],["thn","Thachanadan"],["thp","Thompson"],["thq","Kochila Tharu"],["thr","Rana Tharu"],["ths","Thakali"],["tht","Tahltan"],["thu","Thuri"],["thv","Tahaggart Tamahaq"],["thw","Thudam"],["thx","The"],["thy","Tha"],["thz","Tayart Tamajeq"],["tia","Tidikelt Tamazight"],["tic","Tira"],["tid","Tidong"],["tie","Tingal"],["tif","Tifal"],["tig","Tigre"],["tih","Timugon Murut"],["tii","Tiene"],["tij","Tilung"],["tik","Tikar"],["til","Tillamook"],["tim","Timbe"],["tin","Tindi"],["tio","Teop"],["tip","Trimuris"],["tiq","Tiéfo"],["tis","Masadiit Itneg"],["tit","Tinigua"],["tiu","Adasen"],["tiv","Tiv"],["tiw","Tiwi"],["tix","Southern Tiwa"],["tiy","Tiruray"],["tiz","Tai Hongjin"],["tja","Tajuasohn"],["tjg","Tunjung"],["tji","Northern Tujia"],["tjj","Tjungundji"],["tjl","Tai Laing"],["tjm","Timucua"],["tjn","Tonjon"],["tjo","Temacine Tamazight"],["tjp","Tjupany"],["tjs","Southern Tujia"],["tju","Tjurruru"],["tjw","Djabwurrung"],["tka","Truká"],["tkb","Buksa"],["tkd","Tukudede"],["tke","Takwane"],["tkf","Tukumanféd"],["tkg","Tesaka Malagasy"],["tkk","Takpa"],["tkl","Tokelau"],["tkm","Takelma"],["tkn","Toku-No-Shima"],["tkp","Tikopia"],["tkq","Tee"],["tkr","Tsakhur"],["tks","Takestani"],["tkt","Kathoriya Tharu"],["tku","Upper Necaxa Totonac"],["tkv","Mur Pano"],["tkw","Teanu"],["tkx","Tangko"],["tkz","Takua"],["tla","Southwestern Tepehuan"],["tlb","Tobelo"],["tlc","Yecuatla Totonac"],["tld","Talaud"],["tlf","Telefol"],["tlg","Tofanma"],["tlh","Klingon, tlhIngan Hol"],["tli","Tlingit"],["tlj","Talinga-Bwisi"],["tlk","Taloki"],["tll","Tetela"],["tlm","Tolomako"],["tln","Talondo'"],["tlo","Talodi"],["tlp","Filomena Mata-Coahuitlán Totonac"],["tlq","Tai Loi"],["tlr","Talise"],["tls","Tambotalo"],["tlt","Sou Nama, Teluti"],["tlu","Tulehu"],["tlv","Taliabu"],["tlw","South Wemale"],["tlx","Khehek"],["tly","Talysh"],["tma","Tama (Chad)"],["tmb","Katbol, Avava"],["tmc","Tumak"],["tmd","Haruai"],["tme","Tremembé"],["tmf","Toba-Maskoy"],["tmg","Ternateño"],["tmh","Tamashek"],["tmi","Tutuba"],["tmj","Samarokena"],["tmk","Northwestern Tamang"],["tml","Tamnim Citak"],["tmm","Tai Thanh"],["tmn","Taman (Indonesia)"],["tmo","Temoq"],["tmp","Tai Mène"],["tmq","Tumleo"],["tmr","Jewish Babylonian Aramaic (ca. 200-1200 CE)"],["tms","Tima"],["tmt","Tasmate"],["tmu","Iau"],["tmv","Tembo (Motembo)"],["tmw","Temuan"],["tmy","Tami"],["tmz","Tamanaku"],["tna","Tacana"],["tnb","Western Tunebo"],["tnc","Tanimuca-Retuarã"],["tnd","Angosturas Tunebo"],["tne","Tinoc Kallahan"],["tnf","Tangshewi"],["tng","Tobanga"],["tnh","Maiani"],["tni","Tandia"],["tnk","Kwamera"],["tnl","Lenakel"],["tnm","Tabla"],["tnn","North Tanna"],["tno","Toromono"],["tnp","Whitesands"],["tnq","Taino"],["tnr","Ménik"],["tns","Tenis"],["tnt","Tontemboan"],["tnu","Tay Khang"],["tnv","Tangchangya"],["tnw","Tonsawang"],["tnx","Tanema"],["tny","Tongwe"],["tnz","Ten'edn"],["tob","Toba"],["toc","Coyutla Totonac"],["tod","Toma"],["toe","Tomedes"],["tof","Gizrra"],["tog","Tonga (Nyasa)"],["toh","Gitonga"],["toi","Tonga (Zambia)"],["toj","Tojolabal"],["tol","Tolowa"],["tom","Tombulu"],["too","Xicotepec De Juárez Totonac"],["top","Papantla Totonac"],["toq","Toposa"],["tor","Togbo-Vara Banda"],["tos","Highland Totonac"],["tou","Tho"],["tov","Upper Taromi"],["tow","Jemez"],["tox","Tobian"],["toy","Topoiyo"],["toz","To"],["tpa","Taupota"],["tpc","Azoyú Me'phaa, Azoyú Tlapanec"],["tpe","Tippera"],["tpf","Tarpia"],["tpg","Kula"],["tpi","Tok Pisin"],["tpj","Tapieté"],["tpk","Tupinikin"],["tpl","Tlacoapa Me'phaa, Tlacoapa Tlapanec"],["tpm","Tampulma"],["tpn","Tupinambá"],["tpo","Tai Pao"],["tpp","Pisaflores Tepehua"],["tpq","Tukpa"],["tpr","Tuparí"],["tpt","Tlachichilco Tepehua"],["tpu","Tampuan"],["tpv","Tanapag"],["tpw","Tupí"],["tpx","Acatepec Me'phaa, Acatepec Tlapanec"],["tpy","Trumai"],["tpz","Tinputz"],["tqb","Tembé"],["tql","Lehali"],["tqm","Turumsa"],["tqn","Tenino"],["tqo","Toaripi"],["tqp","Tomoip"],["tqq","Tunni"],["tqr","Torona"],["tqt","Western Totonac"],["tqu","Touo"],["tqw","Tonkawa"],["tra","Tirahi"],["trb","Terebu"],["trc","Copala Triqui"],["trd","Turi"],["tre","East Tarangan"],["trf","Trinidadian Creole English"],["trg","Lishán Didán"],["trh","Turaka"],["tri","Trió"],["trj","Toram"],["trk","Turkic languages"],["trl","Traveller Scottish"],["trm","Tregami"],["trn","Trinitario"],["tro","Tarao Naga"],["trp","Kok Borok"],["trq","San Martín Itunyoso Triqui"],["trr","Taushiro"],["trs","Chicahuaxtla Triqui"],["trt","Tunggare"],["tru","Turoyo, Surayt"],["trv","Taroko"],["trw","Torwali"],["trx","Tringgus-Sembaan Bidayuh"],["try","Turung"],["trz","Torá"],["tsa","Tsaangi"],["tsb","Tsamai"],["tsc","Tswa"],["tsd","Tsakonian"],["tse","Tunisian Sign Language"],["tsf","Southwestern Tamang"],["tsg","Tausug"],["tsh","Tsuvan"],["tsi","Tsimshian"],["tsj","Tshangla"],["tsk","Tseku"],["tsl","Ts'ün-Lao"],["tsm","Turkish Sign Language, Türk İşaret Dili"],["tsp","Northern Toussian"],["tsq","Thai Sign Language"],["tsr","Akei"],["tss","Taiwan Sign Language"],["tst","Tondi Songway Kiini"],["tsu","Tsou"],["tsv","Tsogo"],["tsw","Tsishingini"],["tsx","Mubami"],["tsy","Tebul Sign Language"],["tsz","Purepecha"],["tta","Tutelo"],["ttb","Gaa"],["ttc","Tektiteko"],["ttd","Tauade"],["tte","Bwanabwana"],["ttf","Tuotomb"],["ttg","Tutong"],["tth","Upper Ta'oih"],["tti","Tobati"],["ttj","Tooro"],["ttk","Totoro"],["ttl","Totela"],["ttm","Northern Tutchone"],["ttn","Towei"],["tto","Lower Ta'oih"],["ttp","Tombelala"],["ttq","Tawallammat Tamajaq"],["ttr","Tera"],["tts","Northeastern Thai"],["ttt","Muslim Tat"],["ttu","Torau"],["ttv","Titan"],["ttw","Long Wat"],["tty","Sikaritai"],["ttz","Tsum"],["tua","Wiarumus"],["tub","Tübatulabal"],["tuc","Mutu"],["tud","Tuxá"],["tue","Tuyuca"],["tuf","Central Tunebo"],["tug","Tunia"],["tuh","Taulil"],["tui","Tupuri"],["tuj","Tugutil"],["tul","Tula"],["tum","Tumbuka"],["tun","Tunica"],["tuo","Tucano"],["tup","Tupi languages"],["tuq","Tedaga"],["tus","Tuscarora"],["tut","Altaic languages"],["tuu","Tututni"],["tuv","Turkana"],["tuw","Tungus languages"],["tux","Tuxináwa"],["tuy","Tugen"],["tuz","Turka"],["tva","Vaghua"],["tvd","Tsuvadi"],["tve","Te'un"],["tvk","Southeast Ambrym"],["tvl","Tuvalu"],["tvm","Tela-Masbuar"],["tvn","Tavoyan"],["tvo","Tidore"],["tvs","Taveta"],["tvt","Tutsa Naga"],["tvu","Tunen"],["tvw","Sedoa"],["tvx","Taivoan"],["tvy","Timor Pidgin"],["twa","Twana"],["twb","Western Tawbuid"],["twc","Teshenawa"],["twd","Twents"],["twe","Tewa (Indonesia)"],["twf","Northern Tiwa"],["twg","Tereweng"],["twh","Tai Dón"],["twl","Tawara"],["twm","Tawang Monpa"],["twn","Twendi"],["two","Tswapong"],["twp","Ere"],["twq","Tasawaq"],["twr","Southwestern Tarahumara"],["twt","Turiwára"],["twu","Termanu"],["tww","Tuwari"],["twx","Tewe"],["twy","Tawoyan"],["txa","Tombonuo"],["txb","Tokharian B"],["txc","Tsetsaut"],["txe","Totoli"],["txg","Tangut"],["txh","Thracian"],["txi","Ikpeng"],["txj","Tarjumo"],["txm","Tomini"],["txn","West Tarangan"],["txo","Toto"],["txq","Tii"],["txr","Tartessian"],["txs","Tonsea"],["txt","Citak"],["txu","Kayapó"],["txx","Tatana"],["txy","Tanosy Malagasy"],["tya","Tauya"],["tye","Kyanga"],["tyh","O'du"],["tyi","Teke-Tsaayi"],["tyj","Tai Do, Tai Yo"],["tyl","Thu Lao"],["tyn","Kombai"],["typ","Thaypan"],["tyr","Tai Daeng"],["tys","Tày Sa Pa"],["tyt","Tày Tac"],["tyu","Kua"],["tyv","Tuvinian"],["tyx","Teke-Tyee"],["tyy","Tiyaa"],["tyz","Tày"],["tza","Tanzanian Sign Language"],["tzh","Tzeltal"],["tzj","Tz'utujil"],["tzl","Talossan"],["tzm","Central Atlas Tamazight"],["tzn","Tugun"],["tzo","Tzotzil"],["tzx","Tabriak"],["uam","Uamué"],["uan","Kuan"],["uar","Tairuma"],["uba","Ubang"],["ubi","Ubi"],["ubl","Buhi'non Bikol"],["ubr","Ubir"],["ubu","Umbu-Ungu"],["uby","Ubykh"],["uda","Uda"],["ude","Udihe"],["udg","Muduga"],["udi","Udi"],["udj","Ujir"],["udl","Wuzlam"],["udm","Udmurt"],["udu","Uduk"],["ues","Kioko"],["ufi","Ufim"],["uga","Ugaritic"],["ugb","Kuku-Ugbanh"],["uge","Ughele"],["ugn","Ugandan Sign Language"],["ugo","Ugong"],["ugy","Uruguayan Sign Language"],["uha","Uhami"],["uhn","Damal"],["uis","Uisai"],["uiv","Iyive"],["uji","Tanjijili"],["uka","Kaburi"],["ukg","Ukuriguma"],["ukh","Ukhwejo"],["uki","Kui (India)"],["ukk","Muak Sa-aak"],["ukl","Ukrainian Sign Language"],["ukp","Ukpe-Bayobiri"],["ukq","Ukwa"],["uks","Urubú-Kaapor Sign Language, Kaapor Sign Language"],["uku","Ukue"],["ukv","Kuku"],["ukw","Ukwuani-Aboh-Ndoni"],["uky","Kuuk-Yak"],["ula","Fungwa"],["ulb","Ulukwumi"],["ulc","Ulch"],["ule","Lule"],["ulf","Usku, Afra"],["uli","Ulithian"],["ulk","Meriam Mir"],["ull","Ullatan"],["ulm","Ulumanda'"],["uln","Unserdeutsch"],["ulu","Uma' Lung"],["ulw","Ulwa"],["uma","Umatilla"],["umb","Umbundu"],["umc","Marrucinian"],["umd","Umbindhamu"],["umg","Morrobalama, Umbuygamu"],["umi","Ukit"],["umm","Umon"],["umn","Makyan Naga"],["umo","Umotína"],["ump","Umpila"],["umr","Umbugarla"],["ums","Pendau"],["umu","Munsee"],["una","North Watut"],["und","Undetermined"],["une","Uneme"],["ung","Ngarinyin"],["uni","Uni"],["unk","Enawené-Nawé"],["unm","Unami"],["unn","Kurnai"],["unp","Worora"],["unr","Mundari"],["unu","Unubahe"],["unx","Munda"],["unz","Unde Kaili"],["uok","Uokha"],["upi","Umeda"],["upv","Uripiv-Wala-Rano-Atchin"],["ura","Urarina"],["urb","Urubú-Kaapor, Kaapor"],["urc","Urningangg"],["ure","Uru"],["urf","Uradhi"],["urg","Urigina"],["urh","Urhobo"],["uri","Urim"],["urj","Uralic languages"],["urk","Urak Lawoi'"],["url","Urali"],["urm","Urapmin"],["urn","Uruangnirin"],["uro","Ura (Papua New Guinea)"],["urp","Uru-Pa-In"],["urr","Lehalurup, Löyöp"],["urt","Urat"],["uru","Urumi"],["urv","Uruava"],["urw","Sop"],["urx","Urimo"],["ury","Orya"],["urz","Uru-Eu-Wau-Wau"],["usa","Usarufa"],["ush","Ushojo"],["usi","Usui"],["usk","Usaghade"],["usp","Uspanteco"],["uss","us-Saare"],["usu","Uya"],["uta","Otank"],["ute","Ute-Southern Paiute"],["uth","ut-Hun"],["utp","Amba (Solomon Islands)"],["utr","Etulo"],["utu","Utu"],["uum","Urum"],["uun","Kulon-Pazeh"],["uur","Ura (Vanuatu)"],["uuu","U"],["uve","West Uvean, Fagauvea"],["uvh","Uri"],["uvl","Lote"],["uwa","Kuku-Uwanh"],["uya","Doko-Uyanga"],["uzn","Northern Uzbek"],["uzs","Southern Uzbek"],["vaa","Vaagri Booli"],["vae","Vale"],["vaf","Vafsi"],["vag","Vagla"],["vah","Varhadi-Nagpuri"],["vai","Vai"],["vaj","Sekele, Northwestern ǃKung, Vasekele"],["val","Vehes"],["vam","Vanimo"],["van","Valman"],["vao","Vao"],["vap","Vaiphei"],["var","Huarijio"],["vas","Vasavi"],["vau","Vanuma"],["vav","Varli"],["vay","Wayu"],["vbb","Southeast Babar"],["vbk","Southwestern Bontok"],["vec","Venetian"],["ved","Veddah"],["vel","Veluws"],["vem","Vemgo-Mabas"],["veo","Ventureño"],["vep","Veps"],["ver","Mom Jango"],["vgr","Vaghri"],["vgt","Vlaamse Gebarentaal, Flemish Sign Language"],["vic","Virgin Islands Creole English"],["vid","Vidunda"],["vif","Vili"],["vig","Viemo"],["vil","Vilela"],["vin","Vinza"],["vis","Vishavan"],["vit","Viti"],["viv","Iduna"],["vka","Kariyarra"],["vki","Ija-Zuba"],["vkj","Kujarge"],["vkk","Kaur"],["vkl","Kulisusu"],["vkm","Kamakan"],["vkn","Koro Nulu"],["vko","Kodeoha"],["vkp","Korlai Creole Portuguese"],["vkt","Tenggarong Kutai Malay"],["vku","Kurrama"],["vkz","Koro Zuba"],["vlp","Valpei"],["vls","Vlaams"],["vma","Martuyhunira"],["vmb","Barbaram"],["vmc","Juxtlahuaca Mixtec"],["vmd","Mudu Koraga"],["vme","East Masela"],["vmf","Mainfränkisch"],["vmg","Lungalunga"],["vmh","Maraghei"],["vmi","Miwa"],["vmj","Ixtayutla Mixtec"],["vmk","Makhuwa-Shirima"],["vml","Malgana"],["vmm","Mitlatongo Mixtec"],["vmp","Soyaltepec Mazatec"],["vmq","Soyaltepec Mixtec"],["vmr","Marenje"],["vms","Moksela"],["vmu","Muluridyi"],["vmv","Valley Maidu"],["vmw","Makhuwa"],["vmx","Tamazola Mixtec"],["vmy","Ayautla Mazatec"],["vmz","Mazatlán Mazatec"],["vnk","Vano, Lovono"],["vnm","Vinmavis, Neve'ei"],["vnp","Vunapu"],["vor","Voro"],["vot","Votic"],["vra","Vera'a"],["vro","Võro"],["vrs","Varisi"],["vrt","Burmbar, Banam Bay"],["vsi","Moldova Sign Language"],["vsl","Venezuelan Sign Language"],["vsv","Valencian Sign Language, Llengua de signes valenciana"],["vto","Vitou"],["vum","Vumbu"],["vun","Vunjo"],["vut","Vute"],["vwa","Awa (China)"],["waa","Walla Walla"],["wab","Wab"],["wac","Wasco-Wishram"],["wad","Wamesa, Wondama"],["wae","Walser"],["waf","Wakoná"],["wag","Wa'ema"],["wah","Watubela"],["wai","Wares"],["waj","Waffa"],["wak","Wakashan languages"],["wal","Wolaytta, Wolaitta"],["wam","Wampanoag"],["wan","Wan"],["wao","Wappo"],["wap","Wapishana"],["waq","Wagiman"],["war","Waray (Philippines)"],["was","Washo"],["wat","Kaninuwa"],["wau","Waurá"],["wav","Waka"],["waw","Waiwai"],["wax","Watam, Marangis"],["way","Wayana"],["waz","Wampur"],["wba","Warao"],["wbb","Wabo"],["wbe","Waritai"],["wbf","Wara"],["wbh","Wanda"],["wbi","Vwanji"],["wbj","Alagwa"],["wbk","Waigali"],["wbl","Wakhi"],["wbm","Wa"],["wbp","Warlpiri"],["wbq","Waddar"],["wbr","Wagdi"],["wbs","West Bengal Sign Language"],["wbt","Warnman"],["wbv","Wajarri"],["wbw","Woi"],["wca","Yanomámi"],["wci","Waci Gbe"],["wdd","Wandji"],["wdg","Wadaginam"],["wdj","Wadjiginy"],["wdk","Wadikali"],["wdu","Wadjigu"],["wdy","Wadjabangayi"],["wea","Wewaw"],["wec","Wè Western"],["wed","Wedau"],["weg","Wergaia"],["weh","Weh"],["wei","Kiunum"],["wem","Weme Gbe"],["wen","Sorbian languages"],["weo","Wemale"],["wep","Westphalien"],["wer","Weri"],["wes","Cameroon Pidgin"],["wet","Perai"],["weu","Rawngtu Chin"],["wew","Wejewa"],["wfg","Yafi, Zorop"],["wga","Wagaya"],["wgb","Wagawaga"],["wgg","Wangkangurru, Wangganguru"],["wgi","Wahgi"],["wgo","Waigeo"],["wgu","Wirangu"],["wgw","Wagawaga"],["wgy","Warrgamay"],["wha","Sou Upaa, Manusela"],["whg","North Wahgi"],["whk","Wahau Kenyah"],["whu","Wahau Kayan"],["wib","Southern Toussian"],["wic","Wichita"],["wie","Wik-Epa"],["wif","Wik-Keyangan"],["wig","Wik Ngathan"],["wih","Wik-Me'anha"],["wii","Minidien"],["wij","Wik-Iiyanh"],["wik","Wikalkan"],["wil","Wilawila"],["wim","Wik-Mungkan"],["win","Ho-Chunk"],["wir","Wiraféd"],["wit","Wintu"],["wiu","Wiru"],["wiv","Vitu"],["wiw","Wirangu"],["wiy","Wiyot"],["wja","Waja"],["wji","Warji"],["wka","Kw'adza"],["wkb","Kumbaran"],["wkd","Wakde, Mo"],["wkl","Kalanadi"],["wkr","Keerray-Woorroong"],["wku","Kunduvadi"],["wkw","Wakawaka"],["wky","Wangkayutyuru"],["wla","Walio"],["wlc","Mwali Comorian"],["wle","Wolane"],["wlg","Kunbarlang"],["wlh","Welaun"],["wli","Waioli"],["wlk","Wailaki"],["wll","Wali (Sudan)"],["wlm","Middle Welsh"],["wlo","Wolio"],["wlr","Wailapa"],["wls","Wallisian"],["wlu","Wuliwuli"],["wlv","Wichí Lhamtés Vejoz"],["wlw","Walak"],["wlx","Wali (Ghana)"],["wly","Waling"],["wma","Mawa (Nigeria)"],["wmb","Wambaya"],["wmc","Wamas"],["wmd","Mamaindé"],["wme","Wambule"],["wmg","Western Minyag"],["wmh","Waima'a"],["wmi","Wamin"],["wmm","Maiwa (Indonesia)"],["wmn","Waamwang"],["wmo","Wom (Papua New Guinea)"],["wms","Wambon"],["wmt","Walmajarri"],["wmw","Mwani"],["wmx","Womo"],["wnb","Wanambre"],["wnc","Wantoat"],["wnd","Wandarang"],["wne","Waneci"],["wng","Wanggom"],["wni","Ndzwani Comorian"],["wnk","Wanukaka"],["wnm","Wanggamala"],["wnn","Wunumara"],["wno","Wano"],["wnp","Wanap"],["wnu","Usan"],["wnw","Wintu"],["wny","Wanyi, Waanyi"],["woa","Kuwema, Tyaraity"],["wob","Wè Northern"],["woc","Wogeo"],["wod","Wolani"],["woe","Woleaian"],["wof","Gambian Wolof"],["wog","Wogamusin"],["woi","Kamang"],["wok","Longto"],["wom","Wom (Nigeria)"],["won","Wongo"],["woo","Manombai"],["wor","Woria"],["wos","Hanga Hundi"],["wow","Wawonii"],["woy","Weyto"],["wpc","Maco"],["wra","Warapu"],["wrb","Waluwarra, Warluwara"],["wrd","Warduji"],["wrg","Warungu, Gudjal"],["wrh","Wiradjuri"],["wri","Wariyangga"],["wrk","Garrwa"],["wrl","Warlmanpa"],["wrm","Warumungu"],["wrn","Warnang"],["wro","Worrorra"],["wrp","Waropen"],["wrr","Wardaman"],["wrs","Waris"],["wru","Waru"],["wrv","Waruna"],["wrw","Gugu Warra"],["wrx","Wae Rana"],["wry","Merwari"],["wrz","Waray (Australia)"],["wsa","Warembori"],["wsg","Adilabad Gondi"],["wsi","Wusi"],["wsk","Waskia"],["wsr","Owenia"],["wss","Wasa"],["wsu","Wasu"],["wsv","Wotapuri-Katarqalai"],["wtf","Watiwa"],["wth","Wathawurrung"],["wti","Berta"],["wtk","Watakataui"],["wtm","Mewati"],["wtw","Wotu"],["wua","Wikngenchera"],["wub","Wunambal"],["wud","Wudu"],["wuh","Wutunhua"],["wul","Silimo"],["wum","Wumbvu"],["wun","Bungu"],["wur","Wurrugu"],["wut","Wutung"],["wuu","Wu Chinese"],["wuv","Wuvulu-Aua"],["wux","Wulna"],["wuy","Wauyai"],["wwa","Waama"],["wwb","Wakabunga"],["wwo","Wetamut, Dorig"],["wwr","Warrwa"],["www","Wawa"],["wxa","Waxianghua"],["wxw","Wardandi"],["wya","Wyandot"],["wyb","Wangaaybuwan-Ngiyambaa"],["wyi","Woiwurrung"],["wym","Wymysorys"],["wyr","Wayoró"],["wyy","Western Fijian"],["xaa","Andalusian Arabic"],["xab","Sambe"],["xac","Kachari"],["xad","Adai"],["xae","Aequian"],["xag","Aghwan"],["xai","Kaimbé"],["xaj","Ararandewára"],["xak","Máku"],["xal","Kalmyk, Oirat"],["xam","ǀXam"],["xan","Xamtanga"],["xao","Khao"],["xap","Apalachee"],["xaq","Aquitanian"],["xar","Karami"],["xas","Kamas"],["xat","Katawixi"],["xau","Kauwera"],["xav","Xavánte"],["xaw","Kawaiisu"],["xay","Kayan Mahakam"],["xba","Kamba (Brazil)"],["xbb","Lower Burdekin"],["xbc","Bactrian"],["xbd","Bindal"],["xbe","Bigambal"],["xbg","Bunganditj"],["xbi","Kombio"],["xbj","Birrpayi"],["xbm","Middle Breton"],["xbn","Kenaboi"],["xbo","Bolgarian"],["xbp","Bibbulman"],["xbr","Kambera"],["xbw","Kambiwá"],["xbx","Kabixí"],["xby","Batjala, Batyala"],["xcb","Cumbric"],["xcc","Camunic"],["xce","Celtiberian"],["xcg","Cisalpine Gaulish"],["xch","Chemakum, Chimakum"],["xcl","Classical Armenian"],["xcm","Comecrudo"],["xcn","Cotoname"],["xco","Chorasmian"],["xcr","Carian"],["xct","Classical Tibetan"],["xcu","Curonian"],["xcv","Chuvantsy"],["xcw","Coahuilteco"],["xcy","Cayuse"],["xda","Darkinyung"],["xdc","Dacian"],["xdk","Dharuk"],["xdm","Edomite"],["xdo","Kwandu"],["xdy","Malayic Dayak"],["xeb","Eblan"],["xed","Hdi"],["xeg","ǁXegwi"],["xel","Kelo"],["xem","Kembayan"],["xep","Epi-Olmec"],["xer","Xerénte"],["xes","Kesawai"],["xet","Xetá"],["xeu","Keoru-Ahia"],["xfa","Faliscan"],["xga","Galatian"],["xgb","Gbin"],["xgd","Gudang"],["xgf","Gabrielino-Fernandeño"],["xgg","Goreng"],["xgi","Garingbal"],["xgl","Galindan"],["xgm","Dharumbal, Guwinmal"],["xgn","Mongolian languages"],["xgr","Garza"],["xgu","Unggumi"],["xgw","Guwa"],["xha","Harami"],["xhc","Hunnic"],["xhd","Hadrami"],["xhe","Khetrani"],["xhr","Hernican"],["xht","Hattic"],["xhu","Hurrian"],["xhv","Khua"],["xia","Xiandao"],["xib","Iberian"],["xii","Xiri"],["xil","Illyrian"],["xin","Xinca"],["xip","Xipináwa"],["xir","Xiriâna"],["xis","Kisan"],["xiv","Indus Valley Language"],["xiy","Xipaya"],["xjb","Minjungbal"],["xjt","Jaitmatang"],["xka","Kalkoti"],["xkb","Northern Nago"],["xkc","Kho'ini"],["xkd","Mendalam Kayan"],["xke","Kereho"],["xkf","Khengkha"],["xkg","Kagoro"],["xkh","Karahawyana"],["xki","Kenyan Sign Language"],["xkj","Kajali"],["xkk","Kaco'"],["xkl","Mainstream Kenyah"],["xkn","Kayan River Kayan"],["xko","Kiorr"],["xkp","Kabatei"],["xkq","Koroni"],["xkr","Xakriabá"],["xks","Kumbewaha"],["xkt","Kantosi"],["xku","Kaamba"],["xkv","Kgalagadi"],["xkw","Kembra"],["xkx","Karore"],["xky","Uma' Lasan"],["xkz","Kurtokha"],["xla","Kamula"],["xlb","Loup B"],["xlc","Lycian"],["xld","Lydian"],["xle","Lemnian"],["xlg","Ligurian (Ancient)"],["xli","Liburnian"],["xln","Alanic"],["xlo","Loup A"],["xlp","Lepontic"],["xls","Lusitanian"],["xlu","Cuneiform Luwian"],["xly","Elymian"],["xma","Mushungulu"],["xmb","Mbonga"],["xmc","Makhuwa-Marrevone"],["xmd","Mbudum"],["xme","Median"],["xmf","Mingrelian"],["xmg","Mengaka"],["xmh","Kugu-Muminh"],["xmj","Majera"],["xmk","Ancient Macedonian"],["xml","Malaysian Sign Language"],["xmm","Manado Malay"],["xmn","Manichaean Middle Persian"],["xmo","Morerebi"],["xmp","Kuku-Mu'inh"],["xmq","Kuku-Mangk"],["xmr","Meroitic"],["xms","Moroccan Sign Language"],["xmt","Matbat"],["xmu","Kamu"],["xmv","Antankarana Malagasy, Tankarana Malagasy"],["xmw","Tsimihety Malagasy"],["xmx","Maden"],["xmy","Mayaguduna"],["xmz","Mori Bawah"],["xna","Ancient North Arabian"],["xnb","Kanakanabu"],["xnd","Na-Dene languages"],["xng","Middle Mongolian"],["xnh","Kuanhua"],["xni","Ngarigu"],["xnj","Ngoni (Tanzania)"],["xnk","Nganakarti"],["xnm","Ngumbarl"],["xnn","Northern Kankanay"],["xno","Anglo-Norman"],["xnq","Ngoni (Mozambique)"],["xnr","Kangri"],["xns","Kanashi"],["xnt","Narragansett"],["xnu","Nukunul"],["xny","Nyiyaparli"],["xnz","Kenzi, Mattoki"],["xoc","O'chi'chi'"],["xod","Kokoda"],["xog","Soga"],["xoi","Kominimung"],["xok","Xokleng"],["xom","Komo (Sudan)"],["xon","Konkomba"],["xoo","Xukurú"],["xop","Kopar"],["xor","Korubo"],["xow","Kowaki"],["xpa","Pirriya"],["xpb","Northeastern Tasmanian, Pyemmairrener"],["xpc","Pecheneg"],["xpd","Oyster Bay Tasmanian"],["xpe","Liberia Kpelle"],["xpf","Southeast Tasmanian, Nuenonne"],["xpg","Phrygian"],["xph","North Midlands Tasmanian, Tyerrenoterpanner"],["xpi","Pictish"],["xpj","Mpalitjanh"],["xpk","Kulina Pano"],["xpl","Port Sorell Tasmanian"],["xpm","Pumpokol"],["xpn","Kapinawá"],["xpo","Pochutec"],["xpp","Puyo-Paekche"],["xpq","Mohegan-Pequot"],["xpr","Parthian"],["xps","Pisidian"],["xpt","Punthamara"],["xpu","Punic"],["xpv","Northern Tasmanian, Tommeginne"],["xpw","Northwestern Tasmanian, Peerapper"],["xpx","Southwestern Tasmanian, Toogee"],["xpy","Puyo"],["xpz","Bruny Island Tasmanian"],["xqa","Karakhanid"],["xqt","Qatabanian"],["xra","Krahô"],["xrb","Eastern Karaboro"],["xrd","Gundungurra"],["xre","Kreye"],["xrg","Minang"],["xri","Krikati-Timbira"],["xrm","Armazic"],["xrn","Arin"],["xrq","Karranga"],["xrr","Raetic"],["xrt","Aranama-Tamique"],["xru","Marriammu"],["xrw","Karawa"],["xsa","Sabaean"],["xsb","Sambal"],["xsc","Scythian"],["xsd","Sidetic"],["xse","Sempan"],["xsh","Shamang"],["xsi","Sio"],["xsj","Subi"],["xsl","South Slavey"],["xsm","Kasem"],["xsn","Sanga (Nigeria)"],["xso","Solano"],["xsp","Silopi"],["xsq","Makhuwa-Saka"],["xsr","Sherpa"],["xss","Assan"],["xsu","Sanumá"],["xsv","Sudovian"],["xsy","Saisiyat"],["xta","Alcozauca Mixtec"],["xtb","Chazumba Mixtec"],["xtc","Katcha-Kadugli-Miri"],["xtd","Diuxi-Tilantongo Mixtec"],["xte","Ketengban"],["xtg","Transalpine Gaulish"],["xth","Yitha Yitha"],["xti","Sinicahua Mixtec"],["xtj","San Juan Teita Mixtec"],["xtl","Tijaltepec Mixtec"],["xtm","Magdalena Peñasco Mixtec"],["xtn","Northern Tlaxiaco Mixtec"],["xto","Tokharian A"],["xtp","San Miguel Piedras Mixtec"],["xtq","Tumshuqese"],["xtr","Early Tripuri"],["xts","Sindihui Mixtec"],["xtt","Tacahua Mixtec"],["xtu","Cuyamecalco Mixtec"],["xtv","Thawa"],["xtw","Tawandê"],["xty","Yoloxochitl Mixtec"],["xtz","Tasmanian"],["xua","Alu Kurumba"],["xub","Betta Kurumba"],["xud","Umiida"],["xug","Kunigami"],["xuj","Jennu Kurumba"],["xul","Ngunawal, Nunukul"],["xum","Umbrian"],["xun","Unggaranggu"],["xuo","Kuo"],["xup","Upper Umpqua"],["xur","Urartian"],["xut","Kuthant"],["xuu","Kxoe, Khwedam"],["xve","Venetic"],["xvi","Kamviri"],["xvn","Vandalic"],["xvo","Volscian"],["xvs","Vestinian"],["xwa","Kwaza"],["xwc","Woccon"],["xwd","Wadi Wadi"],["xwe","Xwela Gbe"],["xwg","Kwegu"],["xwj","Wajuk"],["xwk","Wangkumara"],["xwl","Western Xwla Gbe"],["xwo","Written Oirat"],["xwr","Kwerba Mamberamo"],["xwt","Wotjobaluk"],["xww","Wemba Wemba"],["xxb","Boro (Ghana)"],["xxk","Ke'o"],["xxm","Minkin"],["xxr","Koropó"],["xxt","Tambora"],["xya","Yaygir"],["xyb","Yandjibara"],["xyj","Mayi-Yapi"],["xyk","Mayi-Kulan"],["xyl","Yalakalore"],["xyt","Mayi-Thakurti"],["xyy","Yorta Yorta"],["xzh","Zhang-Zhung"],["xzm","Zemgalian"],["xzp","Ancient Zapotec"],["yaa","Yaminahua"],["yab","Yuhup"],["yac","Pass Valley Yali"],["yad","Yagua"],["yae","Pumé"],["yaf","Yaka (Democratic Republic of Congo)"],["yag","Yámana"],["yah","Yazgulyam"],["yai","Yagnobi"],["yaj","Banda-Yangere"],["yak","Yakama"],["yal","Yalunka"],["yam","Yamba"],["yan","Mayangna"],["yao","Yao"],["yap","Yapese"],["yaq","Yaqui"],["yar","Yabarana"],["yas","Nugunu (Cameroon)"],["yat","Yambeta"],["yau","Yuwana"],["yav","Yangben"],["yaw","Yawalapití"],["yax","Yauma"],["yay","Agwagwune"],["yaz","Lokaa"],["yba","Yala"],["ybb","Yemba"],["ybd","Yangbye"],["ybe","West Yugur"],["ybh","Yakha"],["ybi","Yamphu"],["ybj","Hasha"],["ybk","Bokha"],["ybl","Yukuben"],["ybm","Yaben"],["ybn","Yabaâna"],["ybo","Yabong"],["ybx","Yawiyo"],["yby","Yaweyuha"],["ych","Chesu"],["ycl","Lolopo"],["ycn","Yucuna"],["ycp","Chepya"],["yda","Yanda"],["ydd","Eastern Yiddish"],["yde","Yangum Dey"],["ydg","Yidgha"],["ydk","Yoidik"],["yds","Yiddish Sign Language"],["yea","Ravula"],["yec","Yeniche"],["yee","Yimas"],["yei","Yeni"],["yej","Yevanic"],["yel","Yela"],["yen","Yendang"],["yer","Tarok"],["yes","Nyankpa"],["yet","Yetfa"],["yeu","Yerukula"],["yev","Yapunda"],["yey","Yeyi"],["yga","Malyangapa"],["ygi","Yiningayi"],["ygl","Yangum Gel"],["ygm","Yagomi"],["ygp","Gepo"],["ygr","Yagaria"],["ygs","Yolŋu Sign Language"],["ygu","Yugul"],["ygw","Yagwoia"],["yha","Baha Buyang"],["yhd","Judeo-Iraqi Arabic"],["yhl","Hlepho Phowa"],["yhs","Yan-nhaŋu Sign Language"],["yia","Yinggarda"],["yif","Ache"],["yig","Wusa Nasu"],["yih","Western Yiddish"],["yii","Yidiny"],["yij","Yindjibarndi"],["yik","Dongshanba Lalo"],["yil","Yindjilandji"],["yim","Yimchungru Naga"],["yin","Riang Lai, Yinchia"],["yip","Pholo"],["yiq","Miqie"],["yir","North Awyu"],["yis","Yis"],["yit","Eastern Lalu"],["yiu","Awu"],["yiv","Northern Nisu"],["yix","Axi Yi"],["yiy","Yir Yoront"],["yiz","Azhe"],["yka","Yakan"],["ykg","Northern Yukaghir"],["yki","Yoke"],["ykk","Yakaikeke"],["ykl","Khlula"],["ykm","Kap"],["ykn","Kua-nsi"],["yko","Yasa"],["ykr","Yekora"],["ykt","Kathu"],["yku","Kuamasi"],["yky","Yakoma"],["yla","Yaul"],["ylb","Yaleba"],["yle","Yele"],["ylg","Yelogu"],["yli","Angguruk Yali"],["yll","Yil"],["ylm","Limi"],["yln","Langnian Buyang"],["ylo","Naluo Yi"],["ylr","Yalarnnga"],["ylu","Aribwaung"],["yly","Nyâlayu, Nyelâyu"],["yma","Yamphe"],["ymb","Yambes"],["ymc","Southern Muji"],["ymd","Muda"],["yme","Yameo"],["ymg","Yamongeri"],["ymh","Mili"],["ymi","Moji"],["ymk","Makwe"],["yml","Iamalele"],["ymm","Maay"],["ymn","Yamna, Sunum"],["ymo","Yangum Mon"],["ymp","Yamap"],["ymq","Qila Muji"],["ymr","Malasar"],["yms","Mysian"],["ymt","Mator-Taygi-Karagas"],["ymx","Northern Muji"],["ymz","Muzi"],["yna","Aluo"],["ynd","Yandruwandha"],["yne","Lang'e"],["yng","Yango"],["ynh","Yangho"],["ynk","Naukan Yupik"],["ynl","Yangulam"],["ynn","Yana"],["yno","Yong"],["ynq","Yendang"],["yns","Yansi"],["ynu","Yahuna"],["yob","Yoba"],["yog","Yogad"],["yoi","Yonaguni"],["yok","Yokuts"],["yol","Yola"],["yom","Yombe"],["yon","Yongkom"],["yos","Yos"],["yot","Yotti"],["yox","Yoron"],["yoy","Yoy"],["ypa","Phala"],["ypb","Labo Phowa"],["ypg","Phola"],["yph","Phupha"],["ypk","Yupik languages"],["ypm","Phuma"],["ypn","Ani Phowa"],["ypo","Alo Phola"],["ypp","Phupa"],["ypz","Phuza"],["yra","Yerakai"],["yrb","Yareba"],["yre","Yaouré"],["yri","Yarí"],["yrk","Nenets"],["yrl","Nhengatu"],["yrm","Yirrk-Mel"],["yrn","Yerong"],["yro","Yaroamë"],["yrs","Yarsun"],["yrw","Yarawata"],["yry","Yarluyandi"],["ysc","Yassic"],["ysd","Samatao"],["ysg","Sonaga"],["ysl","Yugoslavian Sign Language"],["ysm","Myanmar Sign Language"],["ysn","Sani"],["yso","Nisi (China)"],["ysp","Southern Lolopo"],["ysr","Sirenik Yupik"],["yss","Yessan-Mayo"],["ysy","Sanie"],["yta","Talu"],["ytl","Tanglang"],["ytp","Thopho"],["ytw","Yout Wam"],["yty","Yatay"],["yua","Yucateco, Yucatec Maya"],["yub","Yugambal"],["yuc","Yuchi"],["yud","Judeo-Tripolitanian Arabic"],["yue","Yue Chinese, Cantonese"],["yuf","Havasupai-Walapai-Yavapai"],["yug","Yug"],["yui","Yurutí"],["yuj","Karkar-Yuri"],["yuk","Yuki"],["yul","Yulu"],["yum","Quechan"],["yun","Bena (Nigeria)"],["yup","Yukpa"],["yuq","Yuqui"],["yur","Yurok"],["yut","Yopno"],["yuu","Yugh"],["yuw","Yau (Morobe Province)"],["yux","Southern Yukaghir"],["yuy","East Yugur"],["yuz","Yuracare"],["yva","Yawa"],["yvt","Yavitero"],["ywa","Kalou"],["ywg","Yinhawangka"],["ywl","Western Lalu"],["ywn","Yawanawa"],["ywq","Wuding-Luquan Yi"],["ywr","Yawuru"],["ywt","Xishanba Lalo, Central Lalo"],["ywu","Wumeng Nasu"],["yww","Yawarawarga"],["yxa","Mayawali"],["yxg","Yagara"],["yxl","Yardliyawarra"],["yxm","Yinwum"],["yxu","Yuyu"],["yxy","Yabula Yabula"],["yyr","Yir Yoront"],["yyu","Yau (Sandaun Province)"],["yyz","Ayizi"],["yzg","E'ma Buyang"],["yzk","Zokhuo"],["zaa","Sierra de Juárez Zapotec"],["zab","Western Tlacolula Valley Zapotec, San Juan Guelavía Zapotec"],["zac","Ocotlán Zapotec"],["zad","Cajonos Zapotec"],["zae","Yareni Zapotec"],["zaf","Ayoquesco Zapotec"],["zag","Zaghawa"],["zah","Zangwal"],["zai","Isthmus Zapotec"],["zaj","Zaramo"],["zak","Zanaki"],["zal","Zauzou"],["zam","Miahuatlán Zapotec"],["zao","Ozolotepec Zapotec"],["zap","Zapotec"],["zaq","Aloápam Zapotec"],["zar","Rincón Zapotec"],["zas","Santo Domingo Albarradas Zapotec"],["zat","Tabaa Zapotec"],["zau","Zangskari"],["zav","Yatzachi Zapotec"],["zaw","Mitla Zapotec"],["zax","Xadani Zapotec"],["zay","Zayse-Zergulla, Zaysete"],["zaz","Zari"],["zba","Balaibalan"],["zbc","Central Berawan"],["zbe","East Berawan"],["zbl","Blissymbols, Bliss, Blissymbolics"],["zbt","Batui"],["zbu","Bu (Bauchi State)"],["zbw","West Berawan"],["zca","Coatecas Altas Zapotec"],["zch","Central Hongshuihe Zhuang"],["zdj","Ngazidja Comorian"],["zea","Zeeuws"],["zeg","Zenag"],["zeh","Eastern Hongshuihe Zhuang"],["zen","Zenaga"],["zga","Kinga"],["zgb","Guibei Zhuang"],["zgh","Standard Moroccan Tamazight"],["zgm","Minz Zhuang"],["zgn","Guibian Zhuang"],["zgr","Magori"],["zhb","Zhaba"],["zhd","Dai Zhuang"],["zhi","Zhire"],["zhn","Nong Zhuang"],["zhw","Zhoa"],["zhx","Chinese (family)"],["zia","Zia"],["zib","Zimbabwe Sign Language"],["zik","Zimakani"],["zil","Zialo"],["zim","Mesme"],["zin","Zinza"],["zir","Ziriya"],["ziw","Zigula"],["ziz","Zizilivakan"],["zka","Kaimbulawa"],["zkb","Koibal"],["zkd","Kadu"],["zkg","Koguryo"],["zkh","Khorezmian"],["zkk","Karankawa"],["zkn","Kanan"],["zko","Kott"],["zkp","São Paulo Kaingáng"],["zkr","Zakhring"],["zkt","Kitan"],["zku","Kaurna"],["zkv","Krevinian"],["zkz","Khazar"],["zla","Zula"],["zle","East Slavic languages"],["zlj","Liujiang Zhuang"],["zlm","Malay (individual language)"],["zln","Lianshan Zhuang"],["zlq","Liuqian Zhuang"],["zls","South Slavic languages"],["zlw","West Slavic languages"],["zma","Manda (Australia)"],["zmb","Zimba"],["zmc","Margany"],["zmd","Maridan"],["zme","Mangerr"],["zmf","Mfinu"],["zmg","Marti Ke"],["zmh","Makolkol"],["zmi","Negeri Sembilan Malay"],["zmj","Maridjabin"],["zmk","Mandandanyi"],["zml","Matngala"],["zmm","Marimanindji, Marramaninyshi"],["zmn","Mbangwe"],["zmo","Molo"],["zmp","Mpuono"],["zmq","Mituku"],["zmr","Maranunggu"],["zms","Mbesa"],["zmt","Maringarr"],["zmu","Muruwari"],["zmv","Mbariman-Gudhinma"],["zmw","Mbo (Democratic Republic of Congo)"],["zmx","Bomitaba"],["zmy","Mariyedi"],["zmz","Mbandja"],["zna","Zan Gula"],["znd","Zande languages"],["zne","Zande (individual language)"],["zng","Mang"],["znk","Manangkari"],["zns","Mangas"],["zoc","Copainalá Zoque"],["zoh","Chimalapa Zoque"],["zom","Zou"],["zoo","Asunción Mixtepec Zapotec"],["zoq","Tabasco Zoque"],["zor","Rayón Zoque"],["zos","Francisco León Zoque"],["zpa","Lachiguiri Zapotec"],["zpb","Yautepec Zapotec"],["zpc","Choapan Zapotec"],["zpd","Southeastern Ixtlán Zapotec"],["zpe","Petapa Zapotec"],["zpf","San Pedro Quiatoni Zapotec"],["zpg","Guevea De Humboldt Zapotec"],["zph","Totomachapan Zapotec"],["zpi","Santa María Quiegolani Zapotec"],["zpj","Quiavicuzas Zapotec"],["zpk","Tlacolulita Zapotec"],["zpl","Lachixío Zapotec"],["zpm","Mixtepec Zapotec"],["zpn","Santa Inés Yatzechi Zapotec"],["zpo","Amatlán Zapotec"],["zpp","El Alto Zapotec"],["zpq","Zoogocho Zapotec"],["zpr","Santiago Xanica Zapotec"],["zps","Coatlán Zapotec"],["zpt","San Vicente Coatlán Zapotec"],["zpu","Yalálag Zapotec"],["zpv","Chichicapan Zapotec"],["zpw","Zaniza Zapotec"],["zpx","San Baltazar Loxicha Zapotec"],["zpy","Mazaltepec Zapotec"],["zpz","Texmelucan Zapotec"],["zqe","Qiubei Zhuang"],["zra","Kara (Korea)"],["zrg","Mirgan"],["zrn","Zerenkel"],["zro","Záparo"],["zrp","Zarphatic"],["zrs","Mairasi"],["zsa","Sarasira"],["zsk","Kaskean"],["zsl","Zambian Sign Language"],["zsm","Standard Malay"],["zsr","Southern Rincon Zapotec"],["zsu","Sukurum"],["zte","Elotepec Zapotec"],["ztg","Xanaguía Zapotec"],["ztl","Lapaguía-Guivini Zapotec"],["ztm","San Agustín Mixtepec Zapotec"],["ztn","Santa Catarina Albarradas Zapotec"],["ztp","Loxicha Zapotec"],["ztq","Quioquitani-Quierí Zapotec"],["zts","Tilquiapan Zapotec"],["ztt","Tejalapan Zapotec"],["ztu","Güilá Zapotec"],["ztx","Zaachila Zapotec"],["zty","Yatee Zapotec"],["zua","Zeem"],["zuh","Tokano"],["zum","Kumzari"],["zun","Zuni"],["zuy","Zumaya"],["zwa","Zay"],["zxx","No linguistic content, Not applicable"],["zyb","Yongbei Zhuang"],["zyg","Yang Zhuang"],["zyj","Youjiang Zhuang"],["zyn","Yongnan Zhuang"],["zyp","Zyphe Chin"],["zza","Zaza, Dimili, Dimli (macrolanguage), Kirdki, Kirmanjki (macrolanguage), Zazaki"],["zzj","Zuojiang Zhuang"]],ki=a=>e(void 0,void 0,void 0,(function*(){var e;const[n,t]=a.split("-"),i={latn:Ni.direct("Latin").toString(),cyrl:Ni.direct("Cyrillic").toString()},o=yi.find((a=>a[0]===n));return(null==o?void 0:o[1])?`${o[1]}${t?` (${null!==(e=null==i?void 0:i[t.toLowerCase()])&&void 0!==e?e:t})`:""}`:a}));let vi,wi="en",xi={en:"English"},Si={en:"English"},Mi=[];class ji extends EventTarget{constructor(){super(),this.ready=!1}init(a){return e(this,void 0,void 0,(function*(){yield this.setUiLanguage("en");const n=()=>e(this,void 0,void 0,(function*(){var n,t,i;const o=yield this.extractUsedLanguages(a.formData.proxy),r=null!==(n=JSON.parse(a.getAttribute("languages")))&&void 0!==n?n:o.length?yield(s=o,e(void 0,void 0,void 0,(function*(){const a={};for(const e of s)a[e]=yield ki(e);return a}))):{};var s;const u=JSON.parse(a.getAttribute("l10n-languages"));this.l10nLanguages=Object.assign({},u,r),a.getAttribute("required-l10n-languages")&&(Mi=a.getAttribute("required-l10n-languages").split(",")),a.getAttribute("selected-l10n-language")&&a.getAttribute("selected-l10n-language").toLowerCase()in this.l10nLanguages&&(this.l10nLanguage=a.getAttribute("selected-l10n-language").toLowerCase()),this.uiLanguages=null!==(t=JSON.parse(a.getAttribute("ui-languages")))&&void 0!==t?t:{},yield this.setUiLanguage(null!==(i=a.getAttribute("selected-language"))&&void 0!==i?i:"en"),this.ready=!0,this.dispatchEvent(new CustomEvent("ready"))}));a.formData.ready?n():a.formData.addEventListener("ready",n,{once:!0})}))}get requiredL10nLanguages(){return Mi}get uiLanguage(){return wi}setUiLanguage(a){return e(this,void 0,void 0,(function*(){wi=a,Ni=yield function(a,n="",t,i="en"){return e(this,void 0,void 0,(function*(){let e={};if(e[a]={},t.includes(a)&&a!==i)try{const t=`/js/Translations/${(n?n+".":"")+a}.js`;e[a]=(yield import(t)).Translations}catch(a){console.info(a)}function o(n,...t){if("string"==typeof n)return(a,...e)=>{let t=o(a,...e);return t.context=n,t};{let i=n,o=fi(i,t,!0);if(void 0===e[a][o])return new bi(fi(i,t));{let n=e[a][o],i=Object.assign({},...t),r=n.match(/{[a-zA-Z]*}/g);return r&&r.forEach((a=>{let e=a.substr(1).substr(0,a.length-2);n=n.replace(a,i[e])})),new bi(n)}}}return o.constructor.prototype.direct=n=>void 0===e[a][n]?new bi(n):new bi(e[a][n]),o}))}(a,"RdfForm",Object.keys(this.uiLanguages),"en"),this.dispatchEvent(new CustomEvent("language-change"))}))}set l10nLanguage(a){vi=a,this.dispatchEvent(new CustomEvent("l10n-change",{detail:a}))}get l10nLanguage(){return vi}set l10nLanguages(a){const e=Object.keys(Si),n=Object.keys(a);let t=n.filter((a=>!e.includes(a))),i=e.filter((a=>!n.includes(a)));i.includes(vi)&&(vi=n[0]);for(const a of t)this.dispatchEvent(new CustomEvent("this.added",{detail:a}));for(const a of i)this.dispatchEvent(new CustomEvent("this.removed",{detail:a}));Si=a,vi||(vi=Object.keys(Si)[0])}get l10nLanguages(){return Si}set uiLanguages(a){xi=a}get uiLanguages(){return xi}multilingualValue(a,e="ui"){var n,t,i;Array.isArray(a)||(a=[a]);const o=a.find((a=>a["@language"]===("ui"===e?this.uiLanguage:this.l10nLanguage))),r=a.find((a=>!a["@language"]));return null!==(i=null!==(t=null!==(n=null==o?void 0:o["@value"])&&void 0!==n?n:null==r?void 0:r["@value"])&&void 0!==t?t:null==o?void 0:o["@id"])&&void 0!==i?i:null==r?void 0:r["@id"]}extractUsedLanguages(a){const e=new Set,n=a=>{if(!a)return;const t=Array.isArray(a)?a.entries():Object.entries(a);for(const[a,i]of t)"@language"===a&&e.add(i),"string"!=typeof i&&n(i)};return n(a),[...e.values()]}}const Ai=new ji;let Ni;const Ci=(...a)=>e=>{var n;return null===(n=e["@type"])||void 0===n?void 0:n.some((e=>a.includes(yt(e))))};class Ki extends EventTarget{constructor(a){if(super(),this.sourceDefinitionCompacted={},this.context={form:null},this.ready=!1,this.chain=new Map,this.chainReferences=new Map,this.ontology=[],this.form=a,this.formUrl=this.form.getAttribute("form"),!this.formUrl)throw new Error('No data attribute "form" was found on the custom element.');this.init()}init(){var a;return e(this,void 0,void 0,(function*(){const n=null!==(a=this.form.getAttribute("proxy"))&&void 0!==a?a:"";this.roles=this.form.getAttribute("roles")?this.form.getAttribute("roles").split(","):[];const i=yield fetch(n+this.formUrl.replace("http:",location.protocol)),o=yield i.text();if(this.sourceDefinitionCompacted=t(o),Object.assign(this.context,this.sourceDefinitionCompacted["@context"]),!this.context.form)throw new Error("The prefix form was not found in the form definition.");if(!this.sourceDefinitionCompacted["@graph"])throw new Error("Missing fields inside form definition");if(this.sourceDefinitionExpanded=kt(yield ft.expand(this.sourceDefinitionCompacted),this.context,{_:a=>Ai.multilingualValue(a,"ui")}),yield this.resolveSubForms(this.sourceDefinitionExpanded),!this.info)throw new Error("The form definition did not define a form itself.");const r=yield fetch(n+this.context.form.replace("http:",location.protocol)).then((a=>e(this,void 0,void 0,(function*(){return t(yield a.text())}))));Object.assign(this.context,r["@context"]),this.ontology=kt(yield ft.expand(r),this.context),this.chain=this.createChain(),this.ready=!0,this.dispatchEvent(new CustomEvent("ready"))}))}get prefix(){return this.context.form}get info(){return this.sourceDefinitionExpanded.find(Ci("Form"))}get fieldsToRemove(){var a,e,n,t;const i=JSON.parse(null!==(a=this.form.getAttribute("fields-to-remove"))&&void 0!==a?a:"[]");return null!==(t=[...null!==(n=null===(e=this.info["form:remove"])||void 0===e?void 0:e.map((a=>a._)))&&void 0!==n?n:[],...i].map((a=>((a,e)=>{const n=a.split(":");return e[n[0]]&&(a=e[n[0]]+n[1]),a})(a,this.context))))&&void 0!==t?t:[]}get fields(){return this.sourceDefinitionExpanded.filter(Ci("Field")).filter((a=>!this.fieldsToRemove.includes(a["@id"])))}get elements(){return this.sourceDefinitionExpanded.filter(Ci("Field","Container","UiComponent")).filter((a=>!this.fieldsToRemove.includes(a["@id"])))}resolveSubForms(a){var n,i,o,r,s;return e(this,void 0,void 0,(function*(){const e=null!==(n=this.form.getAttribute("proxy"))&&void 0!==n?n:"",u=a.filter(Ci("Field"));for(const n of u){const u=n["form:subform"];if((null==u?void 0:u.length)>1)throw new Error("Multiple sub forms were found for one field.");if(u){const l=yield fetch(e+u._.replace("http:",location.protocol)),c=yield l.text(),d=t(c),g=kt(yield ft.expand(d),d["@context"],{_:a=>Ai.multilingualValue(a,"ui")});yield this.resolveSubForms(g),Object.assign(this.context,d["@context"]);for(const a of g)n["form:container"]&&(a["form:container"]=n["form:container"].$),(null===(i=n["form:order"])||void 0===i?void 0:i._)&&(a["form:order"]=[{"@value":(null!==(r=null===(o=n["form:order"])||void 0===o?void 0:o._)&&void 0!==r?r:0)+parseFloat("0."+(null===(s=a["form:order"])||void 0===s?void 0:s._))}]);const h=a.map((a=>a.$)).indexOf(n.$);a.$.splice(h,1,...g.map((a=>a.$)))}}return a}))}applyFieldAccessRoles(a){return a.filter((a=>!a["form:access"]||this.roles.some((e=>a["form:access"].map((a=>a["@id"])).includes(e)))))}createChain(){const a=e=>{var n,t;const i=new Map;e.sort(((a,e)=>{var n,t,i,o;return(null!==(t=null===(n=a["form:order"])||void 0===n?void 0:n._)&&void 0!==t?t:0)-(null!==(o=null===(i=e["form:order"])||void 0===i?void 0:i._)&&void 0!==o?o:0)}));for(const o of e){const e=this.getBindingsOfField(o);let r=[];if("group"===(null===(n=o["form:widget"])||void 0===n?void 0:n._)||"Container"===yt(o["@type"][0])){const a="group"===(null===(t=o["form:widget"])||void 0===t?void 0:t._)?"group":"container";r=this.applyFieldAccessRoles(this.elements.filter((e=>{var n;return(null===(n=null==e?void 0:e[`form:${a}`])||void 0===n?void 0:n._)===yt(o["@id"])})))}i.set(e.length?e:o.$,[o,a(r)])}return i},e=this.applyFieldAccessRoles(this.elements.filter((a=>!a["form:group"]&&!a["form:container"])));return a(e)}getBindingsOfField(a){const e=[];for(const[n,t]of Object.entries(a)){const a=this.ontology.find((a=>yt(null==a?void 0:a["@id"])===yt(n)));a&&a["form:isBindingProperty"]&&Array.isArray(t)&&e.push(...t.$.flatMap((a=>a["@id"])))}return e}}const Ti=a=>a.startsWith("http")||a.startsWith("blob")||"/"===a.substr(0,1);class Li extends EventTarget{constructor(a){super(),this.ready=!1,this.proxy={$:null},this.form=a,this.formDefinition=this.form.formDefinition,this.dataAsTextOrUrl=this.form.getAttribute("data"),this.formDefinition.addEventListener("ready",(()=>this.init()))}init(){var a;return e(this,void 0,void 0,(function*(){let e;if(this.dataAsTextOrUrl||(this.sourceData=[]),this.dataAsTextOrUrl&&Ti(this.dataAsTextOrUrl)){const a=yield fetch(this.dataAsTextOrUrl);e=yield a.text()}else e=this.dataAsTextOrUrl;try{this.sourceDataCompacted=JSON.parse(e)}catch(a){this.sourceDataCompacted=t(e)}this.sourceData=yield ft.expand(this.sourceDataCompacted),Array.isArray(this.sourceData)&&(this.sourceData=this.sourceData.pop()),this.sourceData||(this.sourceData={}),(null===(a=this.sourceData)||void 0===a?void 0:a["@type"])||(this.sourceData["@type"]=this.formDefinition.info["form:binding"].map((a=>a["@id"]))),this.createProxy(),this.ready=!0,this.dispatchEvent(new CustomEvent("ready"))}))}get context(){var a;return Object.assign({},this.formDefinition.context,null===(a=this.sourceDataCompacted)||void 0===a?void 0:a["@context"])}createProxy(){const a=this.context;this.proxy=kt(this.sourceData,a,{_:a=>Ai.multilingualValue(a,"l10n")})}}class Bi extends EventTarget{constructor(a){super(),this.ready=!1,this.registeredFieldClasses={},this.form=a,this.init()}init(){return e(this,void 0,void 0,(function*(){const a=new CustomEvent("register-elements",{detail:{fields:[]}});this.form.dispatchEvent(a),Object.assign(this.registeredFieldClasses,a.detail.fields),this.ready=!0,this.dispatchEvent(new CustomEvent("ready"))}))}setupElement(a,n,t=null,i={},o=null,r=(()=>null),s,u=null,l=[]){var c,d,g;return e(this,void 0,void 0,(function*(){const e=(null===(c=a["form:widget"])||void 0===c?void 0:c._)&&this.registeredFieldClasses[null===(d=a["form:widget"])||void 0===d?void 0:d._]?a["form:widget"]._:"unknown";let h=this.registeredFieldClasses[e];if(!h)throw console.log(this.registeredFieldClasses),new Error("Unknown widget type: "+(null===(g=a["form:widget"])||void 0===g?void 0:g._));return new h(a,n,t,i,o,r,s,u,l)}))}}const{isArray:zi}=Array,Pi=(a,e)=>{const n=[];for(const{length:t}=a;e<t;e++)n.push(zi(a[e])?Pi(a[e],0):a[e]);return Promise.all(n)};var Di=a=>{function e(e,n){return a.apply(this,[e].concat(n))}return function(a){return Pi(arguments,1).then(e.bind(this,a))}};const{defineProperties:Ii}=Object,Oi=a=>{const e=vt(new WeakMap);return Ii(Di(a),{for:{value(n,t){const i=a.for(n,t);return e.get(i)||e.set(i,Di(i))}},node:{value:Di(a.node)}})},qi=Oi(mi);Oi(pi);const Ei=(a,e)=>{const n="function"==typeof e?e():e;return Promise.resolve(n).then((e=>((a,e)=>{const n="function"==typeof e?e():e,t=hi.get(a)||hi.set(a,{stack:[],entry:null,wire:null}),i=n instanceof li?si(t,n):n;return i!==t.wire&&(t.wire=i,a.textContent="",a.appendChild(i.valueOf())),a})(a,e)))},Gi=(a,e)=>{const n=a.flatMap((a=>a[e]));return new Proxy(a,{get:(a,e,t)=>"_proxyType"===e?"flatMapProxy":Reflect.get(n,e,t),has:(a,e)=>Reflect.has(n,e),deleteProperty:(a,e)=>!0})},Ri=(a,e)=>new Proxy(a,{get:function(n,t){return"_proxyType"===t?"containerProxy":!!a[e]&&Reflect.get(a[e],t)},has:function(n,t){return!!a[e]&&Reflect.has(a[e],t)},set:function(n,t,i){return a[e]?Reflect.set(a[e],t,i):(a[e]=[{"@list":[]}],!0)}});var Wi=Object.freeze({__proto__:null}),Hi=Object.freeze({__proto__:null});class _i extends EventTarget{constructor(a){super(),this.ready=!1,this.fieldInstances=new Map,this.extraStylesheets=new Set,this.init(),this.form=a}init(){return e(this,void 0,void 0,(function*(){this.ready=!0,this.dispatchEvent(new CustomEvent("ready"))}))}render(){return e(this,void 0,void 0,(function*(){const a=yield this.nest(this.form.formDefinition.chain,this.form.registry,this.form.formData.proxy,this.form),e=this.form.getAttribute("display");Ei(this.form.shadow,qi`
      <style>:host { display: none; }</style>
      <style>${Wi}</style>

      ${[...this.extraStylesheets.values()].map((a=>qi`<link href=${a} rel='stylesheet' type='text/css'>`))}

      ${e?qi`<style>${Hi}</style>`:null}


      ${e?a:qi`
      <form onsubmit=${a=>{a.preventDefault(),a.stopImmediatePropagation(),this.form.dispatchEvent(new CustomEvent("submit",{detail:{proxy:this.form.formData.proxy,expanded:this.form.formData.proxy.$}}))}}>
        ${a}
        <div class="actions">
          <button class="button save primary big">${Ni`Save`}</button>
        </div>
      </form>

      `}
    `)}))}nest(a,n,t,i){var o,r,s;return e(this,void 0,void 0,(function*(){const e=[],u=this.form.getAttribute("display");for(const[l,[c,d]]of a.entries()){const a=null===(o=c["form:binding"])||void 0===o?void 0:o._,g="Container"===yt(c["@type"][0]),h="UiComponent"===yt(c["@type"][0]);let m=!(!h&&!g)&&this.fieldInstances.get(c.$);if(m||(m=yield n.setupElement(c,l,null,null,t,(()=>this.render()),i,null,d)),!m)continue;this.fieldInstances.has(c.$)||this.fieldInstances.set(c.$,m);const p=[];if(a&&!g){let e=(null==t?void 0:t[a])?[...t[a].values()].filter((a=>!a["@language"]||a["@language"]===Ai.l10nLanguage)):[];if(t&&Array.isArray(t.$)&&(e=Gi(t,a).filter((a=>a&&!a["@language"]||a&&a["@language"]===Ai.l10nLanguage))),e.length)for(const[o,g]of e.entries()){const e=null!==(r=this.fieldInstances.get(g.$))&&void 0!==r?r:yield n.setupElement(c,l,g,null==t?void 0:t[o],t,(()=>this.render()),i,o,d);this.fieldInstances.has(g.$)||this.fieldInstances.set(g.$,e);const h="group"===(null===(s=c["form:widget"])||void 0===s?void 0:s._)?t[a][o]:t[a],b=d.size?yield this.nest(d,n,h,m):[];p.push(u?e.itemDisplay(b):e.item(b))}else if(!u){const a=d.size?yield this.nest(d,n,[],m):[];p.push(u?m.itemDisplay(a):m.item(a))}}else if(h){const a=d.size?yield this.nest(d,n,t,m):[];p.push(u?m.itemDisplay(a):m.item(a))}else if(g){const e=d.size?yield this.nest(d,n,a?Ri(t,a):t,m):[];p.push(u?m.itemDisplay(e):m.item(e))}e.push(u?m.wrapperDisplay(p):m.wrapper(p))}return e}))}}const Fi={prefix:"fas",iconName:"times",icon:[352,512,[],"f00d","M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"]},Ui={prefix:"fas",iconName:"plus",icon:[448,512,[],"f067","M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"]},Yi={prefix:"fas",iconName:"language",icon:[640,512,[],"f1ab","M152.1 236.2c-3.5-12.1-7.8-33.2-7.8-33.2h-.5s-4.3 21.1-7.8 33.2l-11.1 37.5H163zM616 96H336v320h280c13.3 0 24-10.7 24-24V120c0-13.3-10.7-24-24-24zm-24 120c0 6.6-5.4 12-12 12h-11.4c-6.9 23.6-21.7 47.4-42.7 69.9 8.4 6.4 17.1 12.5 26.1 18 5.5 3.4 7.3 10.5 4.1 16.2l-7.9 13.9c-3.4 5.9-10.9 7.8-16.7 4.3-12.6-7.8-24.5-16.1-35.4-24.9-10.9 8.7-22.7 17.1-35.4 24.9-5.8 3.5-13.3 1.6-16.7-4.3l-7.9-13.9c-3.2-5.6-1.4-12.8 4.2-16.2 9.3-5.7 18-11.7 26.1-18-7.9-8.4-14.9-17-21-25.7-4-5.7-2.2-13.6 3.7-17.1l6.5-3.9 7.3-4.3c5.4-3.2 12.4-1.7 16 3.4 5 7 10.8 14 17.4 20.9 13.5-14.2 23.8-28.9 30-43.2H412c-6.6 0-12-5.4-12-12v-16c0-6.6 5.4-12 12-12h64v-16c0-6.6 5.4-12 12-12h16c6.6 0 12 5.4 12 12v16h64c6.6 0 12 5.4 12 12zM0 120v272c0 13.3 10.7 24 24 24h280V96H24c-13.3 0-24 10.7-24 24zm58.9 216.1L116.4 167c1.7-4.9 6.2-8.1 11.4-8.1h32.5c5.1 0 9.7 3.3 11.4 8.1l57.5 169.1c2.6 7.8-3.1 15.9-11.4 15.9h-22.9a12 12 0 0 1-11.5-8.6l-9.4-31.9h-60.2l-9.1 31.8c-1.5 5.1-6.2 8.7-11.5 8.7H70.3c-8.2 0-14-8.1-11.4-15.9z"]},Ji=a=>a.split("").every((a=>a.toUpperCase()===a))?a.toLowerCase():a.split("").map(((a,e)=>a.toUpperCase()===a?`${0!==e?"-":""}${a.toLowerCase()}`:a)).join(""),Vi=(a,e=null)=>n=>{for(const t of Object.keys(a)){if(a[t]){const e=Array.isArray(a[t])?a[t].join(" "):a[t];("string"!=typeof e||e.trim())&&n.setAttribute(t,e)}else n.removeAttribute(t);e&&(e(n),e=null)}}
/*!
     * Font Awesome Free 5.15.1 by @fontawesome - https://fontawesome.com
     * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
     */;function Zi(a,e){for(var n=0;n<e.length;n++){var t=e[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(a,t.key,t)}}function $i(a,e,n){return e in a?Object.defineProperty(a,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[e]=n,a}function Qi(a){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},t=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(n).filter((function(a){return Object.getOwnPropertyDescriptor(n,a).enumerable})))),t.forEach((function(e){$i(a,e,n[e])}))}return a}function Xi(a,e){return function(a){if(Array.isArray(a))return a}(a)||function(a,e){var n=[],t=!0,i=!1,o=void 0;try{for(var r,s=a[Symbol.iterator]();!(t=(r=s.next()).done)&&(n.push(r.value),!e||n.length!==e);t=!0);}catch(a){i=!0,o=a}finally{try{t||null==s.return||s.return()}finally{if(i)throw o}}return n}(a,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var ao=function(){},eo={},no={},to={mark:ao,measure:ao};try{"undefined"!=typeof window&&(eo=window),"undefined"!=typeof document&&(no=document),"undefined"!=typeof MutationObserver&&MutationObserver,"undefined"!=typeof performance&&(to=performance)}catch(i){}var io=(eo.navigator||{}).userAgent,oo=void 0===io?"":io,ro=eo,so=no,uo=to;ro.document;var lo=!!so.documentElement&&!!so.head&&"function"==typeof so.addEventListener&&"function"==typeof so.createElement;~oo.indexOf("MSIE")||oo.indexOf("Trident/");var co="svg-inline--fa";!function(){try{}catch(a){return!1}}();var go="group",ho="primary",mo="secondary",po=ro.FontAwesomeConfig||{};if(so&&"function"==typeof so.querySelector){[["data-family-prefix","familyPrefix"],["data-replacement-class","replacementClass"],["data-auto-replace-svg","autoReplaceSvg"],["data-auto-add-css","autoAddCss"],["data-auto-a11y","autoA11y"],["data-search-pseudo-elements","searchPseudoElements"],["data-observe-mutations","observeMutations"],["data-mutate-approach","mutateApproach"],["data-keep-original-source","keepOriginalSource"],["data-measure-performance","measurePerformance"],["data-show-missing-icons","showMissingIcons"]].forEach((function(a){var e=Xi(a,2),n=e[0],t=e[1],i=function(a){return""===a||"false"!==a&&("true"===a||a)}(function(a){var e=so.querySelector("script["+a+"]");if(e)return e.getAttribute(a)}(n));null!=i&&(po[t]=i)}))}var bo=Qi({},{familyPrefix:"fa",replacementClass:co,autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,mutateApproach:"async",keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0},po);bo.autoReplaceSvg||(bo.observeMutations=!1);var fo=Qi({},bo);ro.FontAwesomeConfig=fo;var yo=ro||{};yo.___FONT_AWESOME___||(yo.___FONT_AWESOME___={}),yo.___FONT_AWESOME___.styles||(yo.___FONT_AWESOME___.styles={}),yo.___FONT_AWESOME___.hooks||(yo.___FONT_AWESOME___.hooks={}),yo.___FONT_AWESOME___.shims||(yo.___FONT_AWESOME___.shims=[]);var ko=yo.___FONT_AWESOME___,vo=[];lo&&((so.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(so.readyState)||so.addEventListener("DOMContentLoaded",(function a(){so.removeEventListener("DOMContentLoaded",a),1,vo.map((function(a){return a()}))}))),"undefined"!=typeof global&&void 0!==global.process&&global.process.emit,"undefined"==typeof setImmediate?setTimeout:setImmediate;var wo={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function xo(){for(var a=12,e="";a-- >0;)e+="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[62*Math.random()|0];return e}function So(a){return"".concat(a).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function Mo(a){return Object.keys(a||{}).reduce((function(e,n){return e+"".concat(n,": ").concat(a[n],";")}),"")}function jo(a){return a.size!==wo.size||a.x!==wo.x||a.y!==wo.y||a.rotate!==wo.rotate||a.flipX||a.flipY}function Ao(a){var e=a.transform,n=a.containerWidth,t=a.iconWidth,i={transform:"translate(".concat(n/2," 256)")},o="translate(".concat(32*e.x,", ").concat(32*e.y,") "),r="scale(".concat(e.size/16*(e.flipX?-1:1),", ").concat(e.size/16*(e.flipY?-1:1),") "),s="rotate(".concat(e.rotate," 0 0)");return{outer:i,inner:{transform:"".concat(o," ").concat(r," ").concat(s)},path:{transform:"translate(".concat(t/2*-1," -256)")}}}var No={x:0,y:0,width:"100%",height:"100%"};function Co(a){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return a.attributes&&(a.attributes.fill||e)&&(a.attributes.fill="black"),a}function Ko(a){var e=a.icons,n=e.main,t=e.mask,i=a.prefix,o=a.iconName,r=a.transform,s=a.symbol,u=a.title,l=a.maskId,c=a.titleId,d=a.extra,g=a.watchable,h=void 0!==g&&g,m=t.found?t:n,p=m.width,b=m.height,f="fak"===i,y=f?"":"fa-w-".concat(Math.ceil(p/b*16)),k=[fo.replacementClass,o?"".concat(fo.familyPrefix,"-").concat(o):"",y].filter((function(a){return-1===d.classes.indexOf(a)})).filter((function(a){return""!==a||!!a})).concat(d.classes).join(" "),v={children:[],attributes:Qi({},d.attributes,{"data-prefix":i,"data-icon":o,class:k,role:d.attributes.role||"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 ".concat(p," ").concat(b)})},w=f&&!~d.classes.indexOf("fa-fw")?{width:"".concat(p/b*16*.0625,"em")}:{};h&&(v.attributes["data-fa-i2svg"]=""),u&&v.children.push({tag:"title",attributes:{id:v.attributes["aria-labelledby"]||"title-".concat(c||xo())},children:[u]});var x=Qi({},v,{prefix:i,iconName:o,main:n,mask:t,maskId:l,transform:r,symbol:s,styles:Qi({},w,d.styles)}),S=t.found&&n.found?function(a){var e,n=a.children,t=a.attributes,i=a.main,o=a.mask,r=a.maskId,s=a.transform,u=i.width,l=i.icon,c=o.width,d=o.icon,g=Ao({transform:s,containerWidth:c,iconWidth:u}),h={tag:"rect",attributes:Qi({},No,{fill:"white"})},m=l.children?{children:l.children.map(Co)}:{},p={tag:"g",attributes:Qi({},g.inner),children:[Co(Qi({tag:l.tag,attributes:Qi({},l.attributes,g.path)},m))]},b={tag:"g",attributes:Qi({},g.outer),children:[p]},f="mask-".concat(r||xo()),y="clip-".concat(r||xo()),k={tag:"mask",attributes:Qi({},No,{id:f,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[h,b]},v={tag:"defs",children:[{tag:"clipPath",attributes:{id:y},children:(e=d,"g"===e.tag?e.children:[e])},k]};return n.push(v,{tag:"rect",attributes:Qi({fill:"currentColor","clip-path":"url(#".concat(y,")"),mask:"url(#".concat(f,")")},No)}),{children:n,attributes:t}}(x):function(a){var e=a.children,n=a.attributes,t=a.main,i=a.transform,o=Mo(a.styles);if(o.length>0&&(n.style=o),jo(i)){var r=Ao({transform:i,containerWidth:t.width,iconWidth:t.width});e.push({tag:"g",attributes:Qi({},r.outer),children:[{tag:"g",attributes:Qi({},r.inner),children:[{tag:t.icon.tag,children:t.icon.children,attributes:Qi({},t.icon.attributes,r.path)}]}]})}else e.push(t.icon);return{children:e,attributes:n}}(x),M=S.children,j=S.attributes;return x.children=M,x.attributes=j,s?function(a){var e=a.prefix,n=a.iconName,t=a.children,i=a.attributes,o=a.symbol;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:Qi({},i,{id:!0===o?"".concat(e,"-").concat(fo.familyPrefix,"-").concat(n):o}),children:t}]}]}(x):function(a){var e=a.children,n=a.main,t=a.mask,i=a.attributes,o=a.styles,r=a.transform;if(jo(r)&&n.found&&!t.found){var s={x:n.width/n.height/2,y:.5};i.style=Mo(Qi({},o,{"transform-origin":"".concat(s.x+r.x/16,"em ").concat(s.y+r.y/16,"em")}))}return[{tag:"svg",attributes:i,children:e}]}(x)}fo.measurePerformance&&uo&&uo.mark&&uo.measure;var To=function(a,e,n,t){var i,o,r,s=Object.keys(a),u=s.length,l=void 0!==t?function(a,e){return function(n,t,i,o){return a.call(e,n,t,i,o)}}(e,t):e;for(void 0===n?(i=1,r=a[s[0]]):(i=0,r=n);i<u;i++)r=l(r,a[o=s[i]],o,a);return r};function Lo(a,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},t=n.skipHooks,i=void 0!==t&&t,o=Object.keys(e).reduce((function(a,n){var t=e[n];return!!t.icon?a[t.iconName]=t.icon:a[n]=t,a}),{});"function"!=typeof ko.hooks.addPack||i?ko.styles[a]=Qi({},ko.styles[a]||{},o):ko.hooks.addPack(a,o),"fas"===a&&Lo("fa",e)}var Bo=ko.styles,zo=ko.shims,Po=function(){var a=function(a){return To(Bo,(function(e,n,t){return e[t]=To(n,a,{}),e}),{})};a((function(a,e,n){return e[3]&&(a[e[3]]=n),a})),a((function(a,e,n){var t=e[2];return a[n]=n,t.forEach((function(e){a[e]=n})),a}));var e="far"in Bo;To(zo,(function(a,n){var t=n[0],i=n[1],o=n[2];return"far"!==i||e||(i="fas"),a[t]={prefix:i,iconName:o},a}),{})};function Do(a,e,n){if(a&&a[e]&&a[e][n])return{prefix:e,iconName:n,icon:a[e][n]}}function Io(a){var e=a.tag,n=a.attributes,t=void 0===n?{}:n,i=a.children,o=void 0===i?[]:i;return"string"==typeof a?So(a):"<".concat(e," ").concat(function(a){return Object.keys(a||{}).reduce((function(e,n){return e+"".concat(n,'="').concat(So(a[n]),'" ')}),"").trim()}(t),">").concat(o.map(Io).join(""),"</").concat(e,">")}function Oo(a){this.name="MissingIcon",this.message=a||"Icon unavailable",this.stack=(new Error).stack}Po(),ko.styles,Oo.prototype=Object.create(Error.prototype),Oo.prototype.constructor=Oo;var qo={fill:"currentColor"},Eo={attributeType:"XML",repeatCount:"indefinite",dur:"2s"};Qi({},qo,{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"});var Go=Qi({},Eo,{attributeName:"opacity"});function Ro(a){var e=a[0],n=a[1],t=Xi(a.slice(4),1)[0];return{found:!0,width:e,height:n,icon:Array.isArray(t)?{tag:"g",attributes:{class:"".concat(fo.familyPrefix,"-").concat(go)},children:[{tag:"path",attributes:{class:"".concat(fo.familyPrefix,"-").concat(mo),fill:"currentColor",d:t[0]}},{tag:"path",attributes:{class:"".concat(fo.familyPrefix,"-").concat(ho),fill:"currentColor",d:t[1]}}]}:{tag:"path",attributes:{fill:"currentColor",d:t}}}}Qi({},qo,{cx:"256",cy:"364",r:"28"}),Qi({},Eo,{attributeName:"r",values:"28;14;28;28;14;28;"}),Qi({},Go,{values:"1;0;1;1;0;1;"}),Qi({},qo,{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),Qi({},Go,{values:"1;0;0;0;0;1;"}),Qi({},qo,{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),Qi({},Go,{values:"0;0;1;1;0;0;"}),ko.styles,ko.styles;var Wo=function(){function a(){!function(a,e){if(!(a instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),this.definitions={}}var e,n,t;return e=a,n=[{key:"add",value:function(){for(var a=this,e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];var i=n.reduce(this._pullDefinitions,{});Object.keys(i).forEach((function(e){a.definitions[e]=Qi({},a.definitions[e]||{},i[e]),Lo(e,i[e]),Po()}))}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(a,e){var n=e.prefix&&e.iconName&&e.icon?{0:e}:e;return Object.keys(n).map((function(e){var t=n[e],i=t.prefix,o=t.iconName,r=t.icon;a[i]||(a[i]={}),a[i][o]=r})),a}}],n&&Zi(e.prototype,n),t&&Zi(e,t),a}();function Ho(){fo.autoAddCss&&!Jo&&(!function(a){if(a&&lo){var e=so.createElement("style");e.setAttribute("type","text/css"),e.innerHTML=a;for(var n=so.head.childNodes,t=null,i=n.length-1;i>-1;i--){var o=n[i],r=(o.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(r)>-1&&(t=o)}so.head.insertBefore(e,t)}}(function(){var a="fa",e=co,n=fo.familyPrefix,t=fo.replacementClass,i='svg:not(:root).svg-inline--fa {\n  overflow: visible;\n}\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.225em;\n}\n.svg-inline--fa.fa-w-1 {\n  width: 0.0625em;\n}\n.svg-inline--fa.fa-w-2 {\n  width: 0.125em;\n}\n.svg-inline--fa.fa-w-3 {\n  width: 0.1875em;\n}\n.svg-inline--fa.fa-w-4 {\n  width: 0.25em;\n}\n.svg-inline--fa.fa-w-5 {\n  width: 0.3125em;\n}\n.svg-inline--fa.fa-w-6 {\n  width: 0.375em;\n}\n.svg-inline--fa.fa-w-7 {\n  width: 0.4375em;\n}\n.svg-inline--fa.fa-w-8 {\n  width: 0.5em;\n}\n.svg-inline--fa.fa-w-9 {\n  width: 0.5625em;\n}\n.svg-inline--fa.fa-w-10 {\n  width: 0.625em;\n}\n.svg-inline--fa.fa-w-11 {\n  width: 0.6875em;\n}\n.svg-inline--fa.fa-w-12 {\n  width: 0.75em;\n}\n.svg-inline--fa.fa-w-13 {\n  width: 0.8125em;\n}\n.svg-inline--fa.fa-w-14 {\n  width: 0.875em;\n}\n.svg-inline--fa.fa-w-15 {\n  width: 0.9375em;\n}\n.svg-inline--fa.fa-w-16 {\n  width: 1em;\n}\n.svg-inline--fa.fa-w-17 {\n  width: 1.0625em;\n}\n.svg-inline--fa.fa-w-18 {\n  width: 1.125em;\n}\n.svg-inline--fa.fa-w-19 {\n  width: 1.1875em;\n}\n.svg-inline--fa.fa-w-20 {\n  width: 1.25em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-border {\n  height: 1.5em;\n}\n.svg-inline--fa.fa-li {\n  width: 2em;\n}\n.svg-inline--fa.fa-fw {\n  width: 1.25em;\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: 0.25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-lg {\n  font-size: 1.3333333333em;\n  line-height: 0.75em;\n  vertical-align: -0.0667em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit;\n}\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: 0.1em;\n  padding: 0.2em 0.25em 0.15em;\n}\n\n.fa-pull-left {\n  float: left;\n}\n\n.fa-pull-right {\n  float: right;\n}\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: 0.3em;\n}\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: 0.3em;\n}\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8);\n}\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both, .fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical,\n:root .fa-flip-both {\n  -webkit-filter: none;\n          filter: none;\n}\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse {\n  color: #fff;\n}';if(n!==a||t!==e){var o=new RegExp("\\.".concat(a,"\\-"),"g"),r=new RegExp("\\--".concat(a,"\\-"),"g"),s=new RegExp("\\.".concat(e),"g");i=i.replace(o,".".concat(n,"-")).replace(r,"--".concat(n,"-")).replace(s,".".concat(t))}return i}()),Jo=!0)}function _o(a,e){return Object.defineProperty(a,"abstract",{get:e}),Object.defineProperty(a,"html",{get:function(){return a.abstract.map((function(a){return Io(a)}))}}),Object.defineProperty(a,"node",{get:function(){if(lo){var e=so.createElement("div");return e.innerHTML=a.html,e.children}}}),a}function Fo(a){var e=a.prefix,n=void 0===e?"fa":e,t=a.iconName;if(t)return Do(Yo.definitions,n,t)||Do(ko.styles,n,t)}var Uo,Yo=new Wo,Jo=!1,Vo=(Uo=function(a){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.transform,t=void 0===n?wo:n,i=e.symbol,o=void 0!==i&&i,r=e.mask,s=void 0===r?null:r,u=e.maskId,l=void 0===u?null:u,c=e.title,d=void 0===c?null:c,g=e.titleId,h=void 0===g?null:g,m=e.classes,p=void 0===m?[]:m,b=e.attributes,f=void 0===b?{}:b,y=e.styles,k=void 0===y?{}:y;if(a){var v=a.prefix,w=a.iconName,x=a.icon;return _o(Qi({type:"icon"},a),(function(){return Ho(),fo.autoA11y&&(d?f["aria-labelledby"]="".concat(fo.replacementClass,"-title-").concat(h||xo()):(f["aria-hidden"]="true",f.focusable="false")),Ko({icons:{main:Ro(x),mask:s?Ro(s.icon):{found:!1,width:null,height:null,icon:{}}},prefix:v,iconName:w,transform:Qi({},wo,t),symbol:o,title:d,maskId:l,titleId:h,extra:{attributes:f,styles:k,classes:p}})}))}},function(a){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(a||{}).icon?a:Fo(a||{}),t=e.mask;return t&&(t=(t||{}).icon?t:Fo(t||{})),Uo(n,Qi({},e,{mask:t}))});class Zo extends li{constructor(a){super("svg",[a],[])}}function $o(a){return new Zo(Vo(a).html[0])}class Qo extends EventTarget{constructor(...a){var e,n,t,i,o,r,s,u,l,c,d;super(),this.jsonldKey="value",this.mainBinding=null,this.render=()=>null,this.suggestions=[],this.index=null,this.children=[],this.attributes={type:"input",class:[],disabled:null,readonly:null,placeholder:null,required:null,multiple:null,rows:null,open:null},this.wrapperAttributes={open:!1,class:["form-element"]},this.labelAttributes={class:["label"]};const[g,h,m,p,b,f,y,k,v]=a;this.definition=g,this.bindings=h,this.mainBinding=null===(e=g["form:binding"])||void 0===e?void 0:e._,this.parentValues=b,this.itemValues=p,this.value=m,this.render=f,this.parent=y,this.index=k,this.children=v,this.debouncedRender=function(a,e,n=!1){var t;return function(){var i=this,o=arguments,r=function(){t=null,n||a.apply(i,o)},s=n&&!t;clearTimeout(t),t=setTimeout(r,e),s&&a.apply(i,o)}}(this.render.bind(this),300),this.definition["form:jsonLdKey"]&&(this.jsonldKey=this.definition["form:jsonLdKey"]._),(null===(n=this.definition["form:placeholder"])||void 0===n?void 0:n._)&&(this.attributes.placeholder=null===(t=this.definition["form:placeholder"])||void 0===t?void 0:t._),!0===(null===(i=this.definition["form:required"])||void 0===i?void 0:i._)&&(this.attributes.required=!0),!0===(null===(o=this.definition["form:multiple"])||void 0===o?void 0:o._)&&(this.attributes.multiple=!0),!0===(null===(r=this.definition["form:readonly"])||void 0===r?void 0:r._)&&(this.attributes.readonly=!0),!0===(null===(s=this.definition["form:disabled"])||void 0===s?void 0:s._)&&(this.attributes.disabled=!0),void 0!==(null===(u=this.definition["form:open"])||void 0===u?void 0:u._)&&(this.wrapperAttributes.open=this.definition["form:open"]._),void 0!==(null===(l=this.definition["form:rows"])||void 0===l?void 0:l._)&&(this.attributes.rows=parseInt(this.definition["form:rows"]._)),(null===(c=this.definition["form:cssClass"])||void 0===c?void 0:c._)&&this.wrapperAttributes.class.push(this.definition["form:cssClass"]._),(null===(d=this.definition["form:label"])||void 0===d?void 0:d._)||this.wrapperAttributes.class.push("no-label")}get proxy(){var a;return null===(a=this.form)||void 0===a?void 0:a.proxy}get t(){return this.form.t}get form(){let a=this;for(;a.parent;)a=a.parent;return a.registry?a:null}on(a){["keyup","change"].includes(a.type)&&(this.value||this.addItem(),this.value&&(this.value[`@${this.jsonldKey}`]=a.target.value))}get removable(){var a,e,n,t,i,o,r,s,u,l;if(!1===(null===(e=null===(a=this.definition)||void 0===a?void 0:a["form:removable"])||void 0===e?void 0:e._))return!1;const c=null===(n=this.value)||void 0===n?void 0:n._,d=this.parent instanceof Qo&&"group"===(null===(o=null===(i=null===(t=this.parent)||void 0===t?void 0:t.definition)||void 0===i?void 0:i["form:widget"])||void 0===o?void 0:o._),g="group"===(null===(s=null===(r=this.definition)||void 0===r?void 0:r["form:widget"])||void 0===s?void 0:s._);return!(null===(l=null===(u=this.definition)||void 0===u?void 0:u["form:required"])||void 0===l?void 0:l._)&&c&&!d||g}get languages(){var a;return Ai.extractUsedLanguages(null===(a=this.parentValues)||void 0===a?void 0:a[this.mainBinding])}addItem(){var a,e,n,t,i,o,r,s;if(this.bindings.length>1){this.parentValues[this.mainBinding]||(this.parentValues[this.mainBinding]=[]);const a={};for(const e of this.bindings)a[e]=[];a[this.mainBinding].push({}),this.parentValues.push(a),this.itemValues=a,this.value=a[this.mainBinding][0]}else if("group"===(null===(a=this.definition["form:widget"])||void 0===a?void 0:a._)){this.parentValues[this.mainBinding]||(this.parentValues[this.mainBinding]=[{"@list":[{}]}]);const a=null===(n=null===(e=this.parentValues[this.mainBinding])||void 0===e?void 0:e[0])||void 0===n?void 0:n.$,i=JSON.parse(JSON.stringify(a));for(const[a,e]of Object.entries(i))(null==e?void 0:e[0]["@id"])&&(e[0]["@id"]=null),(null==e?void 0:e[0]["@value"])&&(e[0]["@value"]=""),(null==e?void 0:e[0]["@language"])&&(e[0]["@value"]=Ai.l10nLanguage);null===(t=this.parentValues)||void 0===t||t[this.mainBinding].push(i),this.value=i}else{const a={[`@${this.jsonldKey}`]:null};!(null===(i=this.parentValues)||void 0===i?void 0:i[this.mainBinding])||Ai.extractUsedLanguages(this.parentValues),(this.languages.length||"always"===(null===(o=this.definition["form:translatable"])||void 0===o?void 0:o._))&&(a["@language"]=Ai.l10nLanguage),(null===(r=this.parentValues)||void 0===r?void 0:r[this.mainBinding])||(this.parentValues[this.mainBinding]=[]),null===(s=this.parentValues)||void 0===s||s[this.mainBinding].push(a),this.value=a}}removeItem(){var a,e;if(this.bindings.length>1){const a=this.parentValues.$;if(a){const e=a.indexOf(this.itemValues.$);a.splice(e,1)}}else{const n=null===(e=this.parentValues[null===(a=this.definition["form:binding"])||void 0===a?void 0:a._])||void 0===e?void 0:e.$;if(n){const a=n.indexOf(this.value.$);n.splice(a,1)}}}wrapperDisplay(a=[]){return this.wrapper(a,!0)}itemDisplay(a=[]){return qi`
    <div class="item">
      ${this.valueDisplay()}
      ${a}
    </div>`}valueDisplay(){var a;return qi`${null===(a=this.value)||void 0===a?void 0:a._}`}wrapper(a=[],n=!1){var t,i;return e(this,void 0,void 0,(function*(){const e=Ji(this.constructor.name),o="always"===(null===(t=this.definition["form:translatable"])||void 0===t?void 0:t._)&&!Ai.l10nLanguage;return qi`
    ${o||n&&!(a.length>0)?qi``:qi`
    <div ref=${Vi(this.wrapperAttributes)} name=${Ji(yt(this.definition["@id"]))} type="${e}">
    ${this.label()}
    ${a.length?qi`
      <div class="items">
        ${this.description()}
        ${a}
      </div>
    `:""}
      ${(null===(i=this.definition["form:multiple"])||void 0===i?void 0:i._)&&!n?qi`<div>${this.addButton()}</div>`:qi``}
    </div>
    `}`}))}description(){var a,e;return(null===(a=this.definition["form:description"])||void 0===a?void 0:a._)?qi`<p class="description">${null===(e=this.definition["form:description"])||void 0===e?void 0:e._}</p>`:null}item(a=[]){return qi`
    <div class="item">
      ${this.input()}
      ${this.removeButton()}
      ${a}
    </div>`}addButton(){return qi`<button type="button" class="button add primary" onclick="${()=>e(this,void 0,void 0,(function*(){yield this.addItem(),this.render()}))}">
      ${$o(Ui)}
    </button>`}removeButton(){return this.removable?qi`<button type="button" class="button remove danger" onclick="${()=>{this.removeItem(),this.render()}}">
      ${$o(Fi)}
    </button>`:qi``}input(){var a,e;return qi`
      <input 
        ref=${Vi(this.attributes)} 
        .value=${null!==(e=null===(a=this.value)||void 0===a?void 0:a._)&&void 0!==e?e:""} 
        onchange=${a=>this.on(a)}
        onkeyup=${a=>this.on(a)}
      />
    `}disableLanguage(){const a=this.parentValues[this.mainBinding];a&&(a.splice(1),delete a[0]["@language"])}enableLanguage(){this.parentValues[this.mainBinding]||(this.parentValues[this.mainBinding]=this.parentValues[this.mainBinding]=[]);const a=this.parentValues[this.mainBinding];a.length?a[0]["@language"]=Ai.l10nLanguage:a.push({"@language":Ai.l10nLanguage})}label(){var a,n,t,i,o,r,s,u;return e(this,void 0,void 0,(function*(){let e="";const l=this.form.getAttribute("display");if(null===(a=this.definition["form:translatable"])||void 0===a?void 0:a._){const a=(null===(n=this.parentValues)||void 0===n?void 0:n[this.mainBinding])?[...this.parentValues[this.mainBinding].values()].filter((a=>!a["@language"]||a["@language"]===Ai.l10nLanguage)):[],i=a.map((a=>a["@language"]))[0];i?e=`(${Ai.l10nLanguages[i]})`:0===a.length&&"always"===(null===(t=this.definition["form:translatable"])||void 0===t?void 0:t._)&&(e=`(${Ai.l10nLanguages[Ai.l10nLanguage]})`)}return(null===(i=this.definition["form:label"])||void 0===i?void 0:i._)?qi`
      <label ref=${Vi(this.labelAttributes)}>
        ${this.definition["form:label"]._}${l?":":""}
        <small>&nbsp;<em>
        ${e&&!l?qi`${e}`:qi``}
        ${(null===(o=this.definition["form:translatable"])||void 0===o?void 0:o._)&&"always"!==(null===(r=this.definition["form:translatable"])||void 0===r?void 0:r._)&&e?qi`<span title=${this.t.direct("Disable translations for this field").toString()} class="icon-button disable-language" onclick=${()=>{this.disableLanguage(),this.render()}}>${$o(Fi)}</span>`:qi``}
        ${(null===(s=this.definition["form:translatable"])||void 0===s?void 0:s._)&&"always"!==(null===(u=this.definition["form:translatable"])||void 0===u?void 0:u._)&&!e?qi`<span title=${this.t.direct("Enable translations for this field").toString()} class="icon-button enable-language" onclick=${()=>{this.enableLanguage(),this.render()}}>${$o(Yi)}</span>`:qi``}
        </em></small>
      </label>
    `:qi``}))}referenceLabel(a,n){return e(this,void 0,void 0,(function*(){if(!n){const e=yt(a).replace(/_|-/g," ");n={label:e}}return qi`
      <div class="reference-label">
        ${!1===(null==n?void 0:n.label)?qi`<span class="reference-loading">${this.t`Could not load data`}</span>`:qi`
          ${(null==n?void 0:n.thumbnail)?qi`<div class="image"><img src="${`//images.weserv.nl/?url=${null==n?void 0:n.thumbnail}&default=${null==n?void 0:n.thumbnail}&w=100&h=100`}"></div>`:""}
          ${(null==n?void 0:n.label)?Ti(a)?qi`<a href="${a}" target="_blank">${null==n?void 0:n.label}</a>`:qi`<span class="reference-text">${null==n?void 0:n.label}</span>`:qi`<span class="reference-loading">${this.t`Loading...`}</span>`}
        `}
      </div>
    `}))}}let Xo;class ar extends HTMLElement{constructor(){super(),this.ready=!1,this.proxy=null,this.addEventListener("register-elements",(a=>a.detail.fields=Xo))}connectedCallback(){return e(this,void 0,void 0,(function*(){if(this.shadow)return;this.shadow=this.attachShadow({mode:"open"}),this.formDefinition=new Ki(this),this.formData=new Li(this),this.registry=new Bi(this),this.renderer=new _i(this),this.language=Ai,yield this.language.init(this),this.t=Ni,this.language.addEventListener("l10n-change",(a=>this.dispatchEvent(new CustomEvent("l10n-change",{detail:a.detail})))),this.proxy=this.getAttribute("proxy"),null!==this.getAttribute("debug")&&(()=>{const a=console.log;console.log=(...e)=>{const n=[...e];for(let[a,e]of n.entries())(null==e?void 0:e.isProxy)&&(n[a]=e.$);a(...n)}})();const a=[this.formDefinition,this.formData,this.registry,this.language,this.renderer];for(const e of a)e.addEventListener("ready",(()=>{a.every((a=>a.ready))&&!this.ready&&(this.ready=!0,this.renderer.render(),this.dispatchEvent(new CustomEvent("ready")))}))}))}}return customElements.define("rdf-form",ar),a.ElementBase=Qo,a.JsonLdProxy=kt,a.RdfForm=ar,a.init=(a=null)=>{Xo=a},a.languages=yi,a}({});
